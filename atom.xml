<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duy NG</title>
  <id>https://tduyng.com</id>
  <updated>2025-09-25T13:12:36Z</updated>
  <author>
    <name></name>
  </author>
  <link rel="self" href="https://tduyng.com/atom.xml"></link>
  <link href="https://tduyng.com"></link>
  <entry>
    <title>[Note] managing everything with nix-darwin + home manager</title>
    <id>/notes/nix-again/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-09-26T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="managing-everything-with-nix-darwin--home-manager">Managing everything with nix-darwin + home manager</h1>
<p>At the beginning of the year, I tried Nix for the first time.
I even wrote about my first attempt: <a href="https://tduyng.com/notes/nix-home-manager/">migrating from Homebrew to Nix with Home Manager</a>.</p>
<p>This time, I finally made it work.</p>
<p>I’m now running <strong>nix-darwin + nix home manager</strong> with <strong>flakes</strong> to manage all my dotfiles.
The cool part: I don’t need <code>stow</code> anymore. Nix (through flakes) handles all the symlinks.
See my old note about <a href="https://tduyng.com/notes/stow-dotfiles/">stow dotfiles</a>, now all of that is replaced by Nix.</p>
<p>Flakes make the whole setup feel cleaner: everything is versioned, pinned, and reproducible.
One <code>nix flake update</code> → all dependencies stay fresh but consistent across machines.</p>
<p>Everything is in one place, declarative, reproducible.
Install and update feels much faster than when I was only using brew.</p>
<p>I still keep Homebrew integrated in my Nix config, mostly for tools missing in nixpkgs or Mac desktop apps via cask:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>    brews = [
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;sst/tap/opencode&#34;</span> <span style="color:#6272a4"># AI tool</span>
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    casks = [
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Terminals</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;ghostty@tip&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;wezterm&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Development tools</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;visual-studio-code&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;podman-desktop&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Productivity</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;bitwarden&#34;</span> <span style="color:#6272a4"># Password manager</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;homerow&#34;</span> <span style="color:#6272a4"># Mouseless navigation</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f1fa8c">&#34;nikitabobko/tap/aerospace&#34;</span> <span style="color:#6272a4"># Tiling window manager</span>
</span></span><span style="display:flex;"><span>    ];
</span></span></code></pre><p>Homebrew is still better for launching those from spotlight.</p>
<p>But now:</p>
<ul>
<li>configs + dotfiles = Nix flakes</li>
<li>updates = one command</li>
<li>machines = reproducible setup</li>
</ul>
<p>Feels super clean.</p>
]]></content>
    <link href="/notes/nix-again/"></link>
  </entry>
  <entry>
    <title>[Note] make your shell magical with Atuin</title>
    <id>/notes/atuin/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-09-25T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="make-your-shell-magical-with-atuin">Make your shell magical with Atuin</h1>
<p>Discovered <a href="https://github.com/atuinsh/atuin">Atuin</a>.
Feels like my shell just leveled up.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>user@atuin:~$ <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;Making your shell&#34;</span>
</span></span><span style="display:flex;"><span>Making your shell
</span></span><span style="display:flex;"><span>magical█
</span></span></code></pre><p>Atuin replaces boring history with something smart:</p>
<ul>
<li>Full-screen fuzzy search (rebind <code>Ctrl-R</code>, or arrow up).</li>
<li>All commands stored in SQLite, not a flat text file.</li>
<li>Encrypted sync across machines.</li>
<li>History per session, per directory, or global.</li>
<li>Knows exit code, duration, cwd, hostname… even stats of “most used commands.”</li>
</ul>
<p>Example:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># search through all your history</span>
</span></span><span style="display:flex;"><span>atuin search docker build
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># fuzzy jump back to a command and run it</span>
</span></span><span style="display:flex;"><span>Ctrl-R → <span style="color:#8be9fd;font-style:italic">type</span> <span style="color:#f1fa8c">&#34;kubectl logs&#34;</span>
</span></span></code></pre><p>I open a new laptop → log into Atuin → my history is already there. Magic.</p>
<p>Bonus: it doesn’t delete your old history file, just makes it better. Supported shells: zsh, bash, fish, nushell, xonsh.</p>
]]></content>
    <link href="/notes/atuin/"></link>
  </entry>
  <entry>
    <title>[Note] everyone should use zoxide</title>
    <id>/notes/zoxide/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-09-20T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="everyone-should-use-zoxide">Everyone should use zoxide</h1>
<p>I stopped using <code>cd</code> since more than a year ago.
Now I use <a href="https://github.com/ajeetdsouza/zoxide">zoxide</a>.</p>
<p>It’s a small rust tool, super fast, and it just remembers every folder you’ve been to.
Next time you want to jump back, type:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>z projects
</span></span><span style="display:flex;"><span>z notes
</span></span><span style="display:flex;"><span>z blog
</span></span></code></pre><p>That’s it. No full paths. No thinking. It learns your habits.</p>
<p>And the best part: <code>zi</code> + <a href="https://github.com/junegunn/fzf">fzf</a>.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>zi
</span></span></code></pre><p>It pops up a fuzzy list of your most used folders. Type a few letters, hit enter, and you’re there.</p>
<p>Example:</p>
<ul>
<li><code>zi</code> → type <code>doc</code> → jumps straight to <code>~/work/docs/2025</code>.</li>
<li>Way faster than <code>cd ~/work/docs/2025</code>.</li>
</ul>
<p>After 5 minutes, <code>cd</code> feels broken.</p>
<p>Bonus tricks:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">cd</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;z&#34;</span>
</span></span><span style="display:flex;"><span>nvim <span style="color:#ff79c6">$(</span>zi<span style="color:#ff79c6">)</span>
</span></span></code></pre>]]></content>
    <link href="/notes/zoxide/"></link>
  </entry>
  <entry>
    <title>Part 2: Setting up neovim 0.12 (the core configuration before plugins)</title>
    <id>/blog/neovim-basic-setup/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-09-04T00:00:00Z</published>
    <summary>My complete basic setup keymaps, options, autocmds and diagnostics with Neovim 0.12 without installed plugins yet</summary>
    <content type="html"><![CDATA[<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Neovim 0.11+ or higher (0.12 (nightly) recommended for latest features)</li>
<li><code>ripgrep</code> (<code>rg</code>) - For fast file searching (used in grep settings)</li>
<li>A <a href="https://www.nerdfonts.com/">Nerd Font</a> - For diagnostic icons and symbols</li>
</ul>
<p>This config includes macOS-specific keybindings (<code>Cmd</code> key combinations)</p>
<h2 id="why-neovim-012-nightly">Why Neovim 0.12 (nightly)?</h2>
<p>I use the nightly version because I want to test new features as soon as they're available. The 0.12 development has some really cool stuff coming, including improved diagnostic line highlighting and better LSP integration. The nightly builds are surprisingly stable. I've been running them for months without issues.</p>
<p>For installation, follow the <a href="https://github.com/neovim/neovim/blob/master/INSTALL.md">Neovim installation guide</a>.</p>
<h2 id="my-configuration-structure">My configuration structure</h2>
<p>Here's exactly how I organize everything (without plugins yet). This modular approach makes the configuration maintainable and easy to understand:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>~/.config/nvim/
</span></span><span style="display:flex;"><span>├── init.lua                   # Entry point - loads everything
</span></span><span style="display:flex;"><span>├── lua/
</span></span><span style="display:flex;"><span>│   └── config/                # Core configuration modules
</span></span><span style="display:flex;"><span>│       ├── init.lua           # Orchestrates loading order
</span></span><span style="display:flex;"><span>│       ├── options.lua        # Neovim behavior settings
</span></span><span style="display:flex;"><span>│       ├── keymaps.lua        # All keyboard shortcuts
</span></span><span style="display:flex;"><span>│       ├── diagnostics.lua    # Error/warning appearance
</span></span><span style="display:flex;"><span>│       └── autocmds.lua       # Automatic behaviors
</span></span></code></pre><p>The entry points</p>
<p><code>~/.config/nvim/init.lua</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Entry point for Neovim configuration</span>
</span></span><span style="display:flex;"><span>require(<span style="color:#f1fa8c">&#34;config&#34;</span>)
</span></span></code></pre><p><strong><code>~/.config/nvim/lua/config/init.lua</code>:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Load all configuration modules</span>
</span></span><span style="display:flex;"><span>require(<span style="color:#f1fa8c">&#34;config.options&#34;</span>)
</span></span><span style="display:flex;"><span>require(<span style="color:#f1fa8c">&#34;config.keymaps&#34;</span>)
</span></span><span style="display:flex;"><span>require(<span style="color:#f1fa8c">&#34;config.diagnostics&#34;</span>)
</span></span><span style="display:flex;"><span>require(<span style="color:#f1fa8c">&#34;config.autocmds&#34;</span>)
</span></span></code></pre><p><strong>NOTES</strong>: Most of my current setup comes from what I learned using <a href="https://github.com/LazyVim/LazyVim">Lazyvim</a>. This gives us the foundation to understand how modern Neovim configurations work.</p>
<h2 id="optionslua">options.lua</h2>
<p>Create <code>lua/config/options.lua</code>. This is where I make Neovim behave the way I want:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> opt <span style="color:#ff79c6">=</span> vim.opt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opt.number <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Line numbers</span>
</span></span><span style="display:flex;"><span>opt.relativenumber <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Relative line numbers</span>
</span></span><span style="display:flex;"><span>opt.cursorline <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Highlight current line</span>
</span></span><span style="display:flex;"><span>opt.wrap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t wrap lines</span>
</span></span><span style="display:flex;"><span>opt.scrolloff <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> <span style="color:#6272a4">-- Keep 10 lines above/below cursor</span>
</span></span><span style="display:flex;"><span>opt.sidescrolloff <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">8</span> <span style="color:#6272a4">-- Keep 8 columns left/right of cursor</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Indentation</span>
</span></span><span style="display:flex;"><span>opt.tabstop <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- Tab width</span>
</span></span><span style="display:flex;"><span>opt.shiftwidth <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- Indent width</span>
</span></span><span style="display:flex;"><span>opt.softtabstop <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- Soft tab stop</span>
</span></span><span style="display:flex;"><span>opt.expandtab <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Use spaces instead of tabs</span>
</span></span><span style="display:flex;"><span>opt.smartindent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Smart auto-indenting</span>
</span></span><span style="display:flex;"><span>opt.autoindent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Copy indent from current line</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Search settings</span>
</span></span><span style="display:flex;"><span>opt.ignorecase <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Case insensitive search</span>
</span></span><span style="display:flex;"><span>opt.smartcase <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Case sensitive if uppercase in search</span>
</span></span><span style="display:flex;"><span>opt.hlsearch <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t highlight search results</span>
</span></span><span style="display:flex;"><span>opt.incsearch <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Show matches as you type</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Visual settings</span>
</span></span><span style="display:flex;"><span>opt.termguicolors <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Enable 24-bit colors</span>
</span></span><span style="display:flex;"><span>opt.signcolumn <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;yes&#34;</span> <span style="color:#6272a4">-- Always show sign column</span>
</span></span><span style="display:flex;"><span>opt.showmatch <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Highlight matching brackets</span>
</span></span><span style="display:flex;"><span>opt.matchtime <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- How long to show matching bracket</span>
</span></span><span style="display:flex;"><span>opt.cmdheight <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span> <span style="color:#6272a4">-- Command line height</span>
</span></span><span style="display:flex;"><span>opt.showmode <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t show mode in command line</span>
</span></span><span style="display:flex;"><span>opt.pumheight <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> <span style="color:#6272a4">-- Popup menu height</span>
</span></span><span style="display:flex;"><span>opt.pumblend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> <span style="color:#6272a4">-- Popup menu transparency</span>
</span></span><span style="display:flex;"><span>opt.winblend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span> <span style="color:#6272a4">-- Floating window transparency</span>
</span></span><span style="display:flex;"><span>opt.completeopt <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;menu,menuone,noselect&#34;</span>
</span></span><span style="display:flex;"><span>opt.conceallevel <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- Hide * markup for bold and italic, but not markers with substitutions</span>
</span></span><span style="display:flex;"><span>opt.confirm <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Confirm to save changes before exiting modified buffer</span>
</span></span><span style="display:flex;"><span>opt.concealcursor <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#6272a4">-- Don&#39;t hide cursor line markup</span>
</span></span><span style="display:flex;"><span>opt.synmaxcol <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">300</span> <span style="color:#6272a4">-- Syntax highlighting limit</span>
</span></span><span style="display:flex;"><span>opt.ruler <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Disable the default ruler</span>
</span></span><span style="display:flex;"><span>opt.virtualedit <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;block&#34;</span> <span style="color:#6272a4">-- Allow cursor to move where there is no text in visual block mode</span>
</span></span><span style="display:flex;"><span>opt.winminwidth <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">5</span> <span style="color:#6272a4">-- Minimum window width</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- File handling</span>
</span></span><span style="display:flex;"><span>opt.backup <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create backup files</span>
</span></span><span style="display:flex;"><span>opt.writebackup <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create backup before writing</span>
</span></span><span style="display:flex;"><span>opt.swapfile <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create swap files</span>
</span></span><span style="display:flex;"><span>opt.undofile <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Persistent undo</span>
</span></span><span style="display:flex;"><span>opt.undolevels <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10000</span>
</span></span><span style="display:flex;"><span>opt.undodir <span style="color:#ff79c6">=</span> vim.fn.expand(<span style="color:#f1fa8c">&#34;~/.vim/undodir&#34;</span>) <span style="color:#6272a4">-- Undo directory</span>
</span></span><span style="display:flex;"><span>opt.updatetime <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">300</span> <span style="color:#6272a4">-- Faster completion</span>
</span></span><span style="display:flex;"><span>opt.timeoutlen <span style="color:#ff79c6">=</span> vim.g.vscode <span style="color:#ff79c6">and</span> <span style="color:#bd93f9">1000</span> <span style="color:#ff79c6">or</span> <span style="color:#bd93f9">300</span> <span style="color:#6272a4">-- Lower than default (1000) to quickly trigger which-key</span>
</span></span><span style="display:flex;"><span>opt.ttimeoutlen <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span> <span style="color:#6272a4">-- Key code timeout</span>
</span></span><span style="display:flex;"><span>opt.autoread <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Auto reload files changed outside vim</span>
</span></span><span style="display:flex;"><span>opt.autowrite <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Auto save</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Behavior settings</span>
</span></span><span style="display:flex;"><span>opt.hidden <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Allow hidden buffers</span>
</span></span><span style="display:flex;"><span>opt.errorbells <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- No error bells</span>
</span></span><span style="display:flex;"><span>opt.backspace <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;indent,eol,start&#34;</span> <span style="color:#6272a4">-- Better backspace behavior</span>
</span></span><span style="display:flex;"><span>opt.autochdir <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t auto change directory</span>
</span></span><span style="display:flex;"><span>opt.iskeyword:append(<span style="color:#f1fa8c">&#34;-&#34;</span>) <span style="color:#6272a4">-- Treat dash as part of word</span>
</span></span><span style="display:flex;"><span>opt.path:append(<span style="color:#f1fa8c">&#34;**&#34;</span>) <span style="color:#6272a4">-- include subdirectories in search</span>
</span></span><span style="display:flex;"><span>opt.selection <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;exclusive&#34;</span> <span style="color:#6272a4">-- Selection behavior</span>
</span></span><span style="display:flex;"><span>opt.mouse <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;a&#34;</span> <span style="color:#6272a4">-- Enable mouse support</span>
</span></span><span style="display:flex;"><span>opt.clipboard <span style="color:#ff79c6">=</span> vim.env.SSH_TTY <span style="color:#ff79c6">and</span> <span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#ff79c6">or</span> <span style="color:#f1fa8c">&#34;unnamedplus&#34;</span> <span style="color:#6272a4">-- Sync with system clipboard</span>
</span></span><span style="display:flex;"><span>opt.modifiable <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Allow buffer modifications</span>
</span></span><span style="display:flex;"><span>opt.encoding <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;UTF-8&#34;</span> <span style="color:#6272a4">-- Set encoding</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Folding settings</span>
</span></span><span style="display:flex;"><span>opt.smoothscroll <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>vim.wo.foldmethod <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;expr&#34;</span>
</span></span><span style="display:flex;"><span>opt.foldlevel <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">99</span> <span style="color:#6272a4">-- Start with all folds open</span>
</span></span><span style="display:flex;"><span>opt.formatoptions <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;jcroqlnt&#34;</span> <span style="color:#6272a4">-- tcqj</span>
</span></span><span style="display:flex;"><span>opt.grepformat <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;%f:%l:%c:%m&#34;</span>
</span></span><span style="display:flex;"><span>opt.grepprg <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;rg --vimgrep&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Split behavior</span>
</span></span><span style="display:flex;"><span>opt.splitbelow <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Horizontal splits go below</span>
</span></span><span style="display:flex;"><span>opt.splitright <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Vertical splits go right</span>
</span></span><span style="display:flex;"><span>opt.splitkeep <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;screen&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Command-line completion</span>
</span></span><span style="display:flex;"><span>opt.wildmenu <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>opt.wildmode <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;longest:full,full&#34;</span>
</span></span><span style="display:flex;"><span>opt.wildignore:append({ <span style="color:#f1fa8c">&#34;*.o&#34;</span>, <span style="color:#f1fa8c">&#34;*.obj&#34;</span>, <span style="color:#f1fa8c">&#34;*.pyc&#34;</span>, <span style="color:#f1fa8c">&#34;*.class&#34;</span>, <span style="color:#f1fa8c">&#34;*.jar&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Better diff options</span>
</span></span><span style="display:flex;"><span>opt.diffopt:append(<span style="color:#f1fa8c">&#34;linematch:60&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Performance improvements</span>
</span></span><span style="display:flex;"><span>opt.redrawtime <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10000</span>
</span></span><span style="display:flex;"><span>opt.maxmempattern <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">20000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Create undo directory if it doesn&#39;t exist</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> undodir <span style="color:#ff79c6">=</span> vim.fn.expand(<span style="color:#f1fa8c">&#34;~/.vim/undodir&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> vim.fn.isdirectory(undodir) <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>  vim.fn.mkdir(undodir, <span style="color:#f1fa8c">&#34;p&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.g.autoformat <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>vim.g.trouble_lualine <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opt.fillchars <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  foldopen <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  foldclose <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  fold <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>  foldsep <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>  diff <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;╱&#34;</span>,
</span></span><span style="display:flex;"><span>  eob <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>opt.jumpoptions <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;view&#34;</span>
</span></span><span style="display:flex;"><span>opt.laststatus <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">3</span> <span style="color:#6272a4">-- global statusline</span>
</span></span><span style="display:flex;"><span>opt.list <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>
</span></span><span style="display:flex;"><span>opt.linebreak <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Wrap lines at convenient points</span>
</span></span><span style="display:flex;"><span>opt.list <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Show some invisible characters (tabs...</span>
</span></span><span style="display:flex;"><span>opt.shiftround <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Round indent</span>
</span></span><span style="display:flex;"><span>opt.shiftwidth <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span> <span style="color:#6272a4">-- Size of an indent</span>
</span></span><span style="display:flex;"><span>opt.shortmess:append({ W <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, I <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, c <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, C <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.g.markdown_recommended_style <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.filetype.add({
</span></span><span style="display:flex;"><span>  extension <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    env <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  filename <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;.env&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;env&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;[jt]sconfig.*.json&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;jsonc&#34;</span>,
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;%.env%.[%w_.-]+&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>Let me walk through the key sections of this configuration:</p>
<h3 id="line-numbers-and-navigation">Line numbers and navigation</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.number <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Line numbers</span>
</span></span><span style="display:flex;"><span>opt.relativenumber <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Relative line numbers</span>
</span></span><span style="display:flex;"><span>opt.cursorline <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Highlight current line</span>
</span></span><span style="display:flex;"><span>opt.scrolloff <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> <span style="color:#6272a4">-- Keep 10 lines above/below cursor</span>
</span></span><span style="display:flex;"><span>opt.sidescrolloff <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">8</span> <span style="color:#6272a4">-- Keep 8 columns left/right of cursor</span>
</span></span></code></pre><p>The <code>relativenumber = true</code> changed how I navigate code. Instead of thinking &quot;I need to go to line 47&quot;, I see &quot;that line is 5 down&quot; and just hit <code>5j</code>. Way faster.</p>
<p>The <code>scrolloff = 10</code> keeps my cursor away from screen edges. I always have context around what I'm editing. Try it - you'll never go back.</p>
<h3 id="smart-search-settings">Smart search settings</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.ignorecase <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Case insensitive search</span>
</span></span><span style="display:flex;"><span>opt.smartcase <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Case sensitive if uppercase in search</span>
</span></span><span style="display:flex;"><span>opt.hlsearch <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t highlight search results</span>
</span></span></code></pre><p>This combo is genius. Search for &quot;hello&quot; and it finds everything. But search for &quot;Hello&quot; and it only finds exact matches. The <code>hlsearch = false</code> stops those annoying yellow highlights after you've found what you need.</p>
<h3 id="performance-settings">Performance settings</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.synmaxcol <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">300</span> <span style="color:#6272a4">-- Syntax highlighting limit</span>
</span></span><span style="display:flex;"><span>opt.updatetime <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">300</span> <span style="color:#6272a4">-- Faster completion</span>
</span></span><span style="display:flex;"><span>opt.redrawtime <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10000</span>
</span></span><span style="display:flex;"><span>opt.maxmempattern <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">20000</span>
</span></span></code></pre><p>That <code>synmaxcol = 300</code> prevents freezes on minified files. The <code>updatetime = 300</code> (down from 4000ms default) makes completion and git signs feel instant. These small changes make a huge difference in daily use.</p>
<h3 id="file-handling-philosophy">File handling philosophy</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.backup <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create backup files</span>
</span></span><span style="display:flex;"><span>opt.writebackup <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create backup before writing</span>
</span></span><span style="display:flex;"><span>opt.swapfile <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span> <span style="color:#6272a4">-- Don&#39;t create swap files</span>
</span></span><span style="display:flex;"><span>opt.undofile <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> <span style="color:#6272a4">-- Persistent undo</span>
</span></span></code></pre><p>I don't want <code>.swp</code> and <code>.bak</code> files cluttering my projects. Git is my backup system. But persistent undo? That's magic - close Neovim, reopen a file days later, and your undo history is still there.</p>
<h3 id="smart-clipboard-integration">Smart clipboard integration</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.clipboard <span style="color:#ff79c6">=</span> vim.env.SSH_TTY <span style="color:#ff79c6">and</span> <span style="color:#f1fa8c">&#34;&#34;</span> <span style="color:#ff79c6">or</span> <span style="color:#f1fa8c">&#34;unnamedplus&#34;</span> <span style="color:#6272a4">-- Sync with system clipboard</span>
</span></span></code></pre><p>This automatically disables system clipboard when I'm SSH'd into a server (prevents weird terminal behavior) but enables it when I'm working locally. It just figures out what I want.</p>
<h3 id="visual-polish">Visual polish</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>opt.fillchars <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  foldopen <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  foldclose <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  fold <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>  foldsep <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>  diff <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;╱&#34;</span>,
</span></span><span style="display:flex;"><span>  eob <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>Replace ugly default fold markers with clean Unicode symbols. Makes code look modern instead of like it's from 1985.</p>
<h3 id="file-type-detection">File type detection</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>vim.filetype.add({
</span></span><span style="display:flex;"><span>  extension <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    env <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  filename <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;.env&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;env&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;[jt]sconfig.*.json&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;jsonc&#34;</span>,
</span></span><span style="display:flex;"><span>    [<span style="color:#f1fa8c">&#34;%.env%.[%w_.-]+&#34;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;dotenv&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>This handles modern file types that Neovim doesn't recognize by default. TypeScript configs get proper JSON with comments support, and all those <code>.env.local</code>, <code>.env.production</code> files get shell syntax highlighting.</p>
<h2 id="keymapslua">keymaps.lua</h2>
<p>Create <code>lua/config/keymaps.lua</code>. This is where I make Neovim feel familiar and efficient. Instead of dumping all the keymaps at once, let me organize them by functionality so you can understand what each group does.</p>
<h3 id="understanding-the-leader-key">Understanding the leader key</h3>
<p>First, understand that <code>&lt;leader&gt;</code> is a special prefix key. By default in Neovim, it's the space bar. So when you see <code>&lt;leader&gt;qq</code>, that means &quot;Space + q + q&quot;.</p>
<h3 id="core-keymap-categories">Core keymap categories</h3>
<p>I organize my keymaps into logical groups:</p>
<ol>
<li>Buffer Navigation - Moving between open files</li>
<li>Window Management - Splitting and navigating windows</li>
<li>Line Movement - Moving and editing lines efficiently</li>
<li>Search &amp; Navigation - Finding and jumping to content</li>
<li>Text Editing - Advanced editing operations</li>
<li>File Operations - Creating, saving, and managing files</li>
<li>Development Tools - Debugging and development helpers</li>
</ol>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> map <span style="color:#ff79c6">=</span> vim.keymap.set
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> opts <span style="color:#ff79c6">=</span> { noremap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- BUFFER NAVIGATION (think browser tabs)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Tab/Shift-Tab: Like browser tabs, feels natural</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;Tab&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:bnext&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;S-Tab&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:bprevious&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Previous buffer&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Alternative buffer switching (vim-style)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;bn&#34;</span>, <span style="color:#f1fa8c">&#34;:bnext&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;bp&#34;</span>, <span style="color:#f1fa8c">&#34;:bprevious&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Previous buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;S-h&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;bprevious&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;S-l&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;bnext&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;[b&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;bprevious&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;]b&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;bnext&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Quick switch to last edited file (super useful!)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;bb&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;e #&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Switch to Other Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;`&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;e #&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Switch to Other Buffer&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- WINDOW MANAGEMENT (splitting and navigation)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Move between windows with Ctrl+hjkl (like tmux)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-h&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-w&gt;h&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Left Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-w&gt;j&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Lower Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-w&gt;k&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Upper Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-l&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-w&gt;l&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Right Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Resize windows with Ctrl+Shift+arrows (macOS friendly)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-S-Up&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;resize +5&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-S-Down&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;resize -5&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-S-Left&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;vertical resize -5&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-S-Right&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;vertical resize +5&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Window splitting</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;ww&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;p&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Other Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;wd&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;c&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Delete Window&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;w-&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;s&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Split Window Below&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;sh&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;s&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Split Window Below&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;w|&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;v&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Split Window Right&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;|&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;v&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Split Window Right&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;sv&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-W&gt;v&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Split Window Right&#34;</span>, remap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- SMART LINE MOVEMENT (the VSCode experience)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Smart j/k: moves by visual lines when no count, real lines with count</span>
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;j&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gj&#39; : &#39;j&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Down&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;&lt;Down&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gj&#39; : &#39;j&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Down&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;k&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gk&#39; : &#39;k&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Up&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;&lt;Up&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gk&#39; : &#39;k&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Up&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Move lines up/down (Alt+j/k like VSCode)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;execute &#39;move .+&#39; . v:count1&lt;cr&gt;==&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;execute &#39;move .-&#39; . (v:count1 + 1)&lt;cr&gt;==&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Up&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;esc&gt;&lt;cmd&gt;m .+1&lt;cr&gt;==gi&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;esc&gt;&lt;cmd&gt;m .-2&lt;cr&gt;==gi&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Up&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:&lt;C-u&gt;execute </span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c">&#39;&lt;,&#39;&gt;move &#39;&gt;+</span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c"> . v:count1&lt;cr&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:&lt;C-u&gt;execute </span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c">&#39;&lt;,&#39;&gt;move &#39;&lt;-</span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c"> . (v:count1 + 1)&lt;cr&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Up&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Alternative line movement (for terminals that don&#39;t support Alt)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;J&#34;</span>, <span style="color:#f1fa8c">&#34;:move &#39;&gt;+1&lt;CR&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Block Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;K&#34;</span>, <span style="color:#f1fa8c">&#34;:move &#39;&lt;-2&lt;CR&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Block Up&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Down&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:m .+1&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Up&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:m .-2&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Down&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;Esc&gt;:m .+1&lt;CR&gt;==gi&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Up&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;Esc&gt;:m .-2&lt;CR&gt;==gi&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Down&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:m &#39;&gt;+1&lt;CR&gt;gv=gv&#34;</span>, opts)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-Up&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:m &#39;&lt;-2&lt;CR&gt;gv=gv&#34;</span>, opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- SEARCH &amp; NAVIGATION (ergonomic improvements)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Better line start/end (more comfortable than $ and ^)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gl&#34;</span>, <span style="color:#f1fa8c">&#34;$&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to end of line&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gh&#34;</span>, <span style="color:#f1fa8c">&#34;^&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to start of line&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-h&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;^&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to start of line&#34;</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-l&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;$&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to end of line&#34;</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Select all content</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;==&#34;</span>, <span style="color:#f1fa8c">&#34;gg&lt;S-v&gt;G&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-a&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;ggVG&#34;</span>, { noremap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Select all&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Clear search highlighting</span>
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span> }, <span style="color:#f1fa8c">&#34;&lt;esc&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;noh&lt;cr&gt;&lt;esc&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Escape and Clear hlsearch&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;ur&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;Cmd&gt;nohlsearch&lt;Bar&gt;diffupdate&lt;Bar&gt;normal! &lt;C-L&gt;&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Redraw / Clear hlsearch / Diff Update&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Smart search navigation (n always goes forward, N always backward)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;Nn&#39;[v:searchforward].&#39;zv&#39;&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;x&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;Nn&#39;[v:searchforward]&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;o&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;Nn&#39;[v:searchforward]&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;N&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;nN&#39;[v:searchforward].&#39;zv&#39;&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;x&#34;</span>, <span style="color:#f1fa8c">&#34;N&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;nN&#39;[v:searchforward]&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;o&#34;</span>, <span style="color:#f1fa8c">&#34;N&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;nN&#39;[v:searchforward]&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- SMART TEXT EDITING</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Better indenting (stay in visual mode)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;gv&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&gt;gv&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Better paste (doesn&#39;t replace clipboard with deleted text)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;p&#34;</span>, <span style="color:#f1fa8c">&#39;&#34;_dP&#39;</span>, opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Copy whole file to clipboard</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-c&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:%y+&lt;CR&gt;&#34;</span>, opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Smart undo break-points (create undo points at logical stops)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;,&#34;</span>, <span style="color:#f1fa8c">&#34;,&lt;c-g&gt;u&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;.&#34;</span>, <span style="color:#f1fa8c">&#34;.&lt;c-g&gt;u&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;;&#34;</span>, <span style="color:#f1fa8c">&#34;;&lt;c-g&gt;u&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Auto-close pairs (simple, no plugin needed)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;`&#34;</span>, <span style="color:#f1fa8c">&#34;``&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#39;&#34;&#39;</span>, <span style="color:#f1fa8c">&#39;&#34;&#34;&lt;left&gt;&#39;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;(&#34;</span>, <span style="color:#f1fa8c">&#34;()&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;[&#34;</span>, <span style="color:#f1fa8c">&#34;[]&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;{&#34;</span>, <span style="color:#f1fa8c">&#34;{}&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&gt;&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Note: Single quotes commented out to avoid conflicts in some contexts</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- map(&#34;i&#34;, &#34;&#39;&#34;, &#34;&#39;&#39;&lt;left&gt;&#34;)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- FILE OPERATIONS</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Save file (works in all modes)</span>
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;s&#34;</span> }, <span style="color:#f1fa8c">&#34;&lt;C-s&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;w&lt;cr&gt;&lt;esc&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Save File&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Create new file</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;fn&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;enew&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;New File&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Quit operations</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;qq&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;qa&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Quit All&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- DEVELOPMENT TOOLS</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Commenting (add comment above/below current line)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gco&#34;</span>, <span style="color:#f1fa8c">&#34;o&lt;esc&gt;Vcx&lt;esc&gt;&lt;cmd&gt;normal gcc&lt;cr&gt;fxa&lt;bs&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Add Comment Below&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gcO&#34;</span>, <span style="color:#f1fa8c">&#34;O&lt;esc&gt;Vcx&lt;esc&gt;&lt;cmd&gt;normal gcc&lt;cr&gt;fxa&lt;bs&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Add Comment Above&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Quickfix and location lists</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;xl&#34;</span>, <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">local</span> success, err <span style="color:#ff79c6">=</span> pcall(vim.fn.getloclist(<span style="color:#bd93f9">0</span>, { winid <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span> }).winid <span style="color:#ff79c6">~=</span> <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">and</span> vim.cmd.lclose <span style="color:#ff79c6">or</span> vim.cmd.lopen)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> success <span style="color:#ff79c6">and</span> err <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>    vim.notify(err, vim.log.levels.ERROR)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Location List&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;xq&#34;</span>, <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">local</span> success, err <span style="color:#ff79c6">=</span> pcall(vim.fn.getqflist({ winid <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span> }).winid <span style="color:#ff79c6">~=</span> <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">and</span> vim.cmd.cclose <span style="color:#ff79c6">or</span> vim.cmd.copen)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> success <span style="color:#ff79c6">and</span> err <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>    vim.notify(err, vim.log.levels.ERROR)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Quickfix List&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;[q&#34;</span>, vim.cmd.cprev, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Previous Quickfix&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;]q&#34;</span>, vim.cmd.cnext, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Quickfix&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Inspection tools (useful for debugging highlights and treesitter)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;ui&#34;</span>, vim.show_pos, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Inspect Pos&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;uI&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;InspectTree&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Inspect Tree&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Keyword program (K for help on word under cursor)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;K&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;norm! K&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Keywordprg&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- TERMINAL INTEGRATION</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Terminal mode navigation</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;esc&gt;&lt;esc&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;c-</span><span style="color:#f1fa8c">\\</span><span style="color:#f1fa8c">&gt;&lt;c-n&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Enter Normal Mode&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-h&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;wincmd h&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Left Window&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;wincmd j&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Lower Window&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;wincmd k&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Upper Window&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-l&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;wincmd l&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to Right Window&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;C-/&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;close&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Hide Terminal&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;t&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;c-_&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;close&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;which_key_ignore&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- TAB MANAGEMENT (when you need multiple workspaces)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;l&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tablast&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Last Tab&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;o&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabonly&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close Other Tabs&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;f&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabfirst&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;First Tab&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;&lt;tab&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabnew&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;New Tab&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;]&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabnext&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Tab&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;d&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabclose&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close Tab&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;&lt;tab&gt;[&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;tabprevious&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Previous Tab&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- FOLDING NAVIGATION (for code organization)</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Close all folds except current one (great for focus)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;zv&#34;</span>, <span style="color:#f1fa8c">&#34;zMzvzz&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close all folds except the current one&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Smart fold navigation (closes current, opens next/previous)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;zj&#34;</span>, <span style="color:#f1fa8c">&#34;zcjzOzz&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close current fold when open. Always open next fold.&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;zk&#34;</span>, <span style="color:#f1fa8c">&#34;zckzOzz&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close current fold when open. Always open previous fold.&#34;</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- UTILITY SHORTCUTS</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- ═══════════════════════════════════════════════════════════</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Toggle line wrapping</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;tw&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;set wrap!&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Toggle Wrap&#34;</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Fix spelling (picks first suggestion)</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;z0&#34;</span>, <span style="color:#f1fa8c">&#34;1z=&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Fix word under cursor&#34;</span> })
</span></span></code></pre><p>Let me explain the cool parts:</p>
<h3 id="browser-style-buffer-navigation">Browser style buffer navigation</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Tab switching</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;Tab&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:bnext&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;S-Tab&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:bprevious&lt;CR&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Previous buffer&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;bb&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;e #&lt;cr&gt;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Switch to Other Buffer&#34;</span> })
</span></span></code></pre><p>Tab/Shift-Tab feels like browser tabs. Everyone knows this pattern. The <code>&lt;leader&gt;bb</code> is really interesting shortcut, instantly jumps back to the last file I was editing. Super useful when switching between test files and implementation.</p>
<h3 id="smart-line-movement">Smart line movement</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Better up/down</span>
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;j&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gj&#39; : &#39;j&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Down&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>map({ <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;x&#34;</span> }, <span style="color:#f1fa8c">&#34;k&#34;</span>, <span style="color:#f1fa8c">&#34;v:count == 0 ? &#39;gk&#39; : &#39;k&#39;&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Up&#34;</span>, expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span></code></pre><p>This fixes Vim's annoying behavior with wrapped lines. When I press <code>j</code>, it moves down visually. But when I press <code>5j</code>, it moves 5 actual lines. I get both behaviors automatically.</p>
<h3 id="vscode-style-line-movement">VSCode style line movement</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Move Lines</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;execute &#39;move .+&#39; . v:count1&lt;cr&gt;==&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;cmd&gt;execute &#39;move .-&#39; . (v:count1 + 1)&lt;cr&gt;==&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Up&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-j&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:&lt;C-u&gt;execute </span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c">&#39;&lt;,&#39;&gt;move &#39;&gt;+</span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c"> . v:count1&lt;cr&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Down&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;A-k&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;:&lt;C-u&gt;execute </span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c">&#39;&lt;,&#39;&gt;move &#39;&lt;-</span><span style="color:#f1fa8c">\&#34;</span><span style="color:#f1fa8c"> . (v:count1 + 1)&lt;cr&gt;gv=gv&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Move Up&#34;</span> })
</span></span></code></pre><p><code>Alt+j/k</code> moves lines just like VSCode. The magic is in the details:</p>
<ul>
<li>Works with counts (<code>3Alt+j</code> moves 3 lines)</li>
<li>Auto-indents after moving (<code>==</code>)</li>
<li>In visual mode, moves the whole selection and keeps it selected</li>
<li>Works in insert mode too</li>
</ul>
<h3 id="ergonomic-shortcuts">Ergonomic shortcuts</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Goto</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gl&#34;</span>, <span style="color:#f1fa8c">&#34;$&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to end of line&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;gh&#34;</span>, <span style="color:#f1fa8c">&#34;^&#34;</span>, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Go to start of line&#34;</span> })
</span></span></code></pre><p><code>$</code> and <code>^</code> are painful to reach. <code>gl</code> (go line-end) and <code>gh</code> (go home) are much more comfortable. After using these for a few days, going back to <code>$</code> feels clunky. (Here is that I learned from Helix)</p>
<h3 id="intelligent-search">Intelligent search</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;Nn&#39;[v:searchforward].&#39;zv&#39;&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Search Result&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;N&#34;</span>, <span style="color:#f1fa8c">&#34;&#39;nN&#39;[v:searchforward].&#39;zv&#39;&#34;</span>, { expr <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Search Result&#34;</span> })
</span></span></code></pre><p>This fixes Vim's confusing search behavior. <code>n</code> always goes forward in your search direction, <code>N</code> always goes backward. The <code>.'zv'</code> opens folds if the match is hidden. Much more intuitive.</p>
<h3 id="undo-break-points-really-useful">Undo break points (really useful)</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Add undo break-points</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;,&#34;</span>, <span style="color:#f1fa8c">&#34;,&lt;c-g&gt;u&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;.&#34;</span>, <span style="color:#f1fa8c">&#34;.&lt;c-g&gt;u&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;;&#34;</span>, <span style="color:#f1fa8c">&#34;;&lt;c-g&gt;u&#34;</span>)
</span></span></code></pre><p>This changed how I edit text. Without this, typing a long paragraph and hitting <code>u</code> undoes everything. With break-points, <code>u</code> goes back to natural stopping places. Type &quot;Hello, world. How are you;&quot; and <code>u</code> takes you back to &quot;Hello, world. How are you&quot; instead of deleting everything.</p>
<h3 id="smart-auto-pairs-no-plugin">Smart auto-pairs (no plugin!)</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- auto close pairs</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- map(&#34;i&#34;, &#34;&#39;&#34;, &#34;&#39;&#39;&lt;left&gt;&#34;) -- commented out - smart!</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;`&#34;</span>, <span style="color:#f1fa8c">&#34;``&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#39;&#34;&#39;</span>, <span style="color:#f1fa8c">&#39;&#34;&#34;&lt;left&gt;&#39;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;(&#34;</span>, <span style="color:#f1fa8c">&#34;()&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;[&#34;</span>, <span style="color:#f1fa8c">&#34;[]&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;{&#34;</span>, <span style="color:#f1fa8c">&#34;{}&lt;left&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;i&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&gt;&lt;left&gt;&#34;</span>)
</span></span></code></pre><p>I spent way too much time fighting with auto-pair plugins. This simple approach just works:</p>
<ul>
<li>No plugin overhead</li>
<li>No weird edge cases</li>
<li>Covers 95% of use cases with zero complexity</li>
</ul>
<h3 id="visual-mode-improvements">Visual mode improvements</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Better paste</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;p&#34;</span>, <span style="color:#f1fa8c">&#39;&#34;_dP&#39;</span>, opts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- better indenting</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;gv&#34;</span>)
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;v&#34;</span>, <span style="color:#f1fa8c">&#34;&gt;&#34;</span>, <span style="color:#f1fa8c">&#34;&gt;gv&#34;</span>)
</span></span></code></pre><p>The paste improvement is huge, when you paste over selected text, it doesn't replace your clipboard with the deleted text. So you can paste the same thing multiple times.</p>
<p>The indenting keeps you in visual mode, so you can adjust indentation multiple times without reselecting.</p>
<h3 id="folding-navigation">Folding navigation</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Close all fold except the current one.</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;zv&#34;</span>, <span style="color:#f1fa8c">&#34;zMzvzz&#34;</span>, {
</span></span><span style="display:flex;"><span>  desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close all folds except the current one&#34;</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Close current fold when open. Always open next fold.</span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;zj&#34;</span>, <span style="color:#f1fa8c">&#34;zcjzOzz&#34;</span>, {
</span></span><span style="display:flex;"><span>  desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Close current fold when open. Always open next fold.&#34;</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>These make folding actually useful. <code>zv</code> gives me focus, closes everything except what I'm working on. <code>zj</code>/<code>zk</code> navigate through functions while managing fold state automatically.</p>
<h2 id="my-diagnostics-configuration">My diagnostics configuration</h2>
<p>Create <code>lua/config/diagnostics.lua</code>. This makes errors look better</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">--- diagnostic settings</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> map <span style="color:#ff79c6">=</span> vim.keymap.set
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> palette <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  err <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;#51202A&#34;</span>,
</span></span><span style="display:flex;"><span>  warn <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;#3B3B1B&#34;</span>,
</span></span><span style="display:flex;"><span>  info <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;#1F3342&#34;</span>,
</span></span><span style="display:flex;"><span>  hint <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;#1E2E1E&#34;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.api.nvim_set_hl(<span style="color:#bd93f9">0</span>, <span style="color:#f1fa8c">&#34;DiagnosticErrorLine&#34;</span>, { bg <span style="color:#ff79c6">=</span> palette.err, blend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">20</span> })
</span></span><span style="display:flex;"><span>vim.api.nvim_set_hl(<span style="color:#bd93f9">0</span>, <span style="color:#f1fa8c">&#34;DiagnosticWarnLine&#34;</span>, { bg <span style="color:#ff79c6">=</span> palette.warn, blend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">15</span> })
</span></span><span style="display:flex;"><span>vim.api.nvim_set_hl(<span style="color:#bd93f9">0</span>, <span style="color:#f1fa8c">&#34;DiagnosticInfoLine&#34;</span>, { bg <span style="color:#ff79c6">=</span> palette.info, blend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> })
</span></span><span style="display:flex;"><span>vim.api.nvim_set_hl(<span style="color:#bd93f9">0</span>, <span style="color:#f1fa8c">&#34;DiagnosticHintLine&#34;</span>, { bg <span style="color:#ff79c6">=</span> palette.hint, blend <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span> })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.api.nvim_set_hl(<span style="color:#bd93f9">0</span>, <span style="color:#f1fa8c">&#34;DapBreakpointSign&#34;</span>, { fg <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;#FF0000&#34;</span>, bg <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">nil</span>, bold <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>vim.fn.sign_define(<span style="color:#f1fa8c">&#34;DapBreakpoint&#34;</span>, {
</span></span><span style="display:flex;"><span>  text <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;●&#34;</span>, <span style="color:#6272a4">-- a large dot; change as desired</span>
</span></span><span style="display:flex;"><span>  texthl <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DapBreakpointSign&#34;</span>, <span style="color:#6272a4">-- the highlight group you just defined</span>
</span></span><span style="display:flex;"><span>  linehl <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>, <span style="color:#6272a4">-- no full-line highlight</span>
</span></span><span style="display:flex;"><span>  numhl <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;&#34;</span>, <span style="color:#6272a4">-- no number-column highlight</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> sev <span style="color:#ff79c6">=</span> vim.diagnostic.severity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vim.diagnostic.config({
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4">-- keep underline &amp; severity_sort on for quick scanning</span>
</span></span><span style="display:flex;"><span>  underline <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>  severity_sort <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>  update_in_insert <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>, <span style="color:#6272a4">-- less flicker</span>
</span></span><span style="display:flex;"><span>  float <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    border <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;rounded&#34;</span>,
</span></span><span style="display:flex;"><span>    source <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4">-- keep signs &amp; virtual text, but tune them as you like</span>
</span></span><span style="display:flex;"><span>  signs <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    text <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>      [sev.ERROR] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>      [sev.WARN] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>      [sev.INFO] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34; &#34;</span>,
</span></span><span style="display:flex;"><span>      [sev.HINT] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;󰌵 &#34;</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  virtual_text <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    spacing <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">4</span>,
</span></span><span style="display:flex;"><span>    source <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;if_many&#34;</span>,
</span></span><span style="display:flex;"><span>    prefix <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;●&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4">-- NEW in 0.11 — dim whole line</span>
</span></span><span style="display:flex;"><span>  linehl <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    [sev.ERROR] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DiagnosticErrorLine&#34;</span>,
</span></span><span style="display:flex;"><span>    [sev.WARN] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DiagnosticWarnLine&#34;</span>,
</span></span><span style="display:flex;"><span>    [sev.INFO] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DiagnosticInfoLine&#34;</span>,
</span></span><span style="display:flex;"><span>    [sev.HINT] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DiagnosticHintLine&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- diagnostic keymaps</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> diagnostic_goto <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(next, severity)
</span></span><span style="display:flex;"><span>  severity <span style="color:#ff79c6">=</span> severity <span style="color:#ff79c6">and</span> vim.diagnostic.severity[severity] <span style="color:#ff79c6">or</span> <span style="color:#ff79c6">nil</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.diagnostic.jump({ count <span style="color:#ff79c6">=</span> next <span style="color:#ff79c6">and</span> <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">or</span> <span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span>, float <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, severity <span style="color:#ff79c6">=</span> severity })
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;&lt;leader&gt;cd&#34;</span>, vim.diagnostic.open_float, { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Line Diagnostics&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;]d&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">true</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Diagnostic&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;[d&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">false</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Diagnostic&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;]e&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">true</span>, <span style="color:#f1fa8c">&#34;ERROR&#34;</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Error&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;[e&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">false</span>, <span style="color:#f1fa8c">&#34;ERROR&#34;</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Error&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;]w&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">true</span>, <span style="color:#f1fa8c">&#34;WARN&#34;</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Next Warning&#34;</span> })
</span></span><span style="display:flex;"><span>map(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;[w&#34;</span>, diagnostic_goto(<span style="color:#ff79c6">false</span>, <span style="color:#f1fa8c">&#34;WARN&#34;</span>), { desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Prev Warning&#34;</span> })
</span></span></code></pre><h3 id="the-color-philosophy">The color philosophy</h3>
<p>Those color values aren't random. I spent time finding colors that indicate problems without screaming at me. Default red error backgrounds hurt my eyes during long coding sessions. These subtle colors are visible but not harsh.</p>
<h3 id="modern-diagnostic-features">Modern diagnostic features</h3>
<p>The <code>linehl</code> feature is new in Neovim 0.11+. It highlights entire lines with problems, making errors much easier to spot when scanning large files. Way better than just highlighting the problematic text.</p>
<h3 id="smart-navigation">Smart navigation</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> diagnostic_goto <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(next, severity)
</span></span><span style="display:flex;"><span>  severity <span style="color:#ff79c6">=</span> severity <span style="color:#ff79c6">and</span> vim.diagnostic.severity[severity] <span style="color:#ff79c6">or</span> <span style="color:#ff79c6">nil</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.diagnostic.jump({ count <span style="color:#ff79c6">=</span> next <span style="color:#ff79c6">and</span> <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">or</span> <span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span>, float <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>, severity <span style="color:#ff79c6">=</span> severity })
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span></code></pre><p>This creates separate navigation for errors vs warnings. When fixing bugs, I want to see errors first (<code>]e</code>/<code>[e</code>), then deal with warnings later (<code>]w</code>/<code>[w</code>). The floating window shows details without cluttering the screen.</p>
<h3 id="debugging-integration">Debugging integration</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>vim.fn.sign_define(<span style="color:#f1fa8c">&#34;DapBreakpoint&#34;</span>, {
</span></span><span style="display:flex;"><span>  text <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;●&#34;</span>, <span style="color:#6272a4">-- a large dot</span>
</span></span><span style="display:flex;"><span>  texthl <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;DapBreakpointSign&#34;</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>I set up debugging breakpoint appearance here since it uses the same sign column as diagnostics. The red dot is clear and better looking.</p>
<h2 id="my-complete-autocmds-setup">My complete autocmds setup</h2>
<p>Create <code>lua/config/autocmds.lua</code>. These automatic behaviors save me tons of time:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">local</span> <span style="color:#ff79c6">function</span> <span style="color:#50fa7b">augroup</span>(name)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> vim.api.nvim_create_augroup(<span style="color:#f1fa8c">&#34;user_&#34;</span> <span style="color:#ff79c6">..</span> name, { clear <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Check if we need to reload the file when it changed</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;FocusGained&#34;</span>, <span style="color:#f1fa8c">&#34;TermClose&#34;</span>, <span style="color:#f1fa8c">&#34;TermLeave&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;checktime&#34;</span>),
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> vim.o.buftype <span style="color:#ff79c6">~=</span> <span style="color:#f1fa8c">&#34;nofile&#34;</span> <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>      vim.cmd(<span style="color:#f1fa8c">&#34;checktime&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Highlight on yank</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;TextYankPost&#34;</span>, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;highlight_yank&#34;</span>),
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    (vim.hl <span style="color:#ff79c6">or</span> vim.highlight).on_yank()
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- resize splits if window got resized</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;VimResized&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;resize_splits&#34;</span>),
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> current_tab <span style="color:#ff79c6">=</span> vim.fn.tabpagenr()
</span></span><span style="display:flex;"><span>    vim.cmd(<span style="color:#f1fa8c">&#34;tabdo wincmd =&#34;</span>)
</span></span><span style="display:flex;"><span>    vim.cmd(<span style="color:#f1fa8c">&#34;tabnext &#34;</span> <span style="color:#ff79c6">..</span> current_tab)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- make it easier to close man-files when opened inline</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;FileType&#34;</span>, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;man_unlisted&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;man&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    vim.bo[event.buf].buflisted <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- close some filetypes with &lt;q&gt;</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;FileType&#34;</span>, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;close_with_q&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;PlenaryTestPopup&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;checkhealth&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;dbout&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;gitsigns-blame&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;grug-far&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;help&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;lspinfo&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;neotest-output&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;neotest-output-panel&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;neotest-summary&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;notify&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;qf&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;spectre_panel&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;startuptime&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;tsplayground&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    vim.bo[event.buf].buflisted <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>
</span></span><span style="display:flex;"><span>    vim.schedule(<span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>      vim.keymap.set(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;q&#34;</span>, <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>        vim.cmd(<span style="color:#f1fa8c">&#34;close&#34;</span>)
</span></span><span style="display:flex;"><span>        pcall(vim.api.nvim_buf_delete, event.buf, { force <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">end</span>, {
</span></span><span style="display:flex;"><span>        buffer <span style="color:#ff79c6">=</span> event.buf,
</span></span><span style="display:flex;"><span>        silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        desc <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;Quit buffer&#34;</span>,
</span></span><span style="display:flex;"><span>      })
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- wrap and check for spell in text filetypes</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;FileType&#34;</span>, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;wrap_spell&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;text&#34;</span>, <span style="color:#f1fa8c">&#34;plaintex&#34;</span>, <span style="color:#f1fa8c">&#34;typst&#34;</span>, <span style="color:#f1fa8c">&#34;gitcommit&#34;</span>, <span style="color:#f1fa8c">&#34;markdown&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.wrap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    vim.opt_local.spell <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Fix conceallevel for json files</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;FileType&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;json_conceal&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;json&#34;</span>, <span style="color:#f1fa8c">&#34;jsonc&#34;</span>, <span style="color:#f1fa8c">&#34;json5&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.conceallevel <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Auto create dir when saving a file, in case some intermediate directory does not exist</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufWritePre&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;auto_create_dir&#34;</span>),
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> event.match:match(<span style="color:#f1fa8c">&#34;^%w%w+:[</span>\<span style="color:#f1fa8c">/][</span>\<span style="color:#f1fa8c">/]&#34;</span>) <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">return</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> file <span style="color:#ff79c6">=</span> vim.uv.fs_realpath(event.match) <span style="color:#ff79c6">or</span> event.match
</span></span><span style="display:flex;"><span>    vim.fn.mkdir(vim.fn.fnamemodify(file, <span style="color:#f1fa8c">&#34;:p:h&#34;</span>), <span style="color:#f1fa8c">&#34;p&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Set filetype for .env and .env.* files</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufRead&#34;</span>, <span style="color:#f1fa8c">&#34;BufNewFile&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;env_filetype&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;*.env&#34;</span>, <span style="color:#f1fa8c">&#34;.env.*&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.filetype <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;sh&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Set filetype for .toml files</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufRead&#34;</span>, <span style="color:#f1fa8c">&#34;BufNewFile&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;toml_filetype&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;*.tomg-config*&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.filetype <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;toml&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Set filetype for .ejs files</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufRead&#34;</span>, <span style="color:#f1fa8c">&#34;BufNewFile&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;ejs_filetype&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;*.ejs&#34;</span>, <span style="color:#f1fa8c">&#34;*.ejs.t&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.filetype <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;embedded_template&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">-- Set filetype for .code-snippets files</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufRead&#34;</span>, <span style="color:#f1fa8c">&#34;BufNewFile&#34;</span> }, {
</span></span><span style="display:flex;"><span>  group <span style="color:#ff79c6">=</span> augroup(<span style="color:#f1fa8c">&#34;code_snippets_filetype&#34;</span>),
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;*.code-snippets&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.filetype <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;json&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span></code></pre><p>Let me explain the interesting parts:</p>
<h3 id="visual-yank">Visual yank</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Highlight on yank</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;TextYankPost&#34;</span>, {
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    (vim.hl <span style="color:#ff79c6">or</span> vim.highlight).on_yank()
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>This briefly highlights whatever I yank (copy). Great visual feedback - I know exactly what I copied. Simple but really helpful during refactoring.</p>
<h3 id="it-just-works-file-handling">&quot;It just works&quot; file handling</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- Auto create dir when saving a file</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd({ <span style="color:#f1fa8c">&#34;BufWritePre&#34;</span> }, {
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> file <span style="color:#ff79c6">=</span> vim.uv.fs_realpath(event.match) <span style="color:#ff79c6">or</span> event.match
</span></span><span style="display:flex;"><span>    vim.fn.mkdir(vim.fn.fnamemodify(file, <span style="color:#f1fa8c">&#34;:p:h&#34;</span>), <span style="color:#f1fa8c">&#34;p&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>Try creating <code>src/api/index.js</code> when the folders don't exist. Instead of an error, it creates the directory structure automatically. This removes friction from my workflow.</p>
<h3 id="smart-cursor-memory">Smart cursor memory</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- go to last loc when opening a buffer</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;BufReadPost&#34;</span>, {
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> exclude <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;gitcommit&#34;</span> } <span style="color:#6272a4">-- don&#39;t remember position in commit messages</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> mark <span style="color:#ff79c6">=</span> vim.api.nvim_buf_get_mark(event.buf, <span style="color:#f1fa8c">&#39;&#34;&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">local</span> lcount <span style="color:#ff79c6">=</span> vim.api.nvim_buf_line_count(event.buf)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> mark[<span style="color:#bd93f9">1</span>] <span style="color:#ff79c6">&gt;</span> <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">and</span> mark[<span style="color:#bd93f9">1</span>] <span style="color:#ff79c6">&lt;=</span> lcount <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>      pcall(vim.api.nvim_win_set_cursor, <span style="color:#bd93f9">0</span>, mark)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>Reopen any file and the cursor goes back to where I left off. Except git commit messages, those should always start at the top. Small detail that saves time every day.</p>
<h3 id="context-aware-settings">Context aware settings</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- wrap and check for spell in text filetypes</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;FileType&#34;</span>, {
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> { <span style="color:#f1fa8c">&#34;text&#34;</span>, <span style="color:#f1fa8c">&#34;markdown&#34;</span>, <span style="color:#f1fa8c">&#34;gitcommit&#34;</span> },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>    vim.opt_local.wrap <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    vim.opt_local.spell <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>Writing files get spell check and word wrap. Code files don't. Simple context awareness that makes each file type feel right.</p>
<h3 id="smart-buffer-management">Smart buffer management</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">-- close some filetypes with &lt;q&gt;</span>
</span></span><span style="display:flex;"><span>vim.api.nvim_create_autocmd(<span style="color:#f1fa8c">&#34;FileType&#34;</span>, {
</span></span><span style="display:flex;"><span>  pattern <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;help&#34;</span>, <span style="color:#f1fa8c">&#34;lspinfo&#34;</span>, <span style="color:#f1fa8c">&#34;checkhealth&#34;</span>, <span style="color:#f1fa8c">&#34;qf&#34;</span>, <span style="color:#f1fa8c">&#34;grug-far&#34;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  callback <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">function</span>(event)
</span></span><span style="display:flex;"><span>    vim.keymap.set(<span style="color:#f1fa8c">&#34;n&#34;</span>, <span style="color:#f1fa8c">&#34;q&#34;</span>, <span style="color:#ff79c6">function</span>()
</span></span><span style="display:flex;"><span>      vim.cmd(<span style="color:#f1fa8c">&#34;close&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>, { buffer <span style="color:#ff79c6">=</span> event.buf, silent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span> })
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre><p>Help windows, quickfix lists, and plugin windows can be closed with just <code>q</code>. I don't have to remember different commands for different buffer types. Notice I included &quot;grug-far&quot;, I thought about which plugin buffers should be easy to close.</p>
<p>All this setup is already more pleasant than default Neovim or many bloated configurations.</p>
<p>In the next article, we'll set up native LSP support. All the diagnostic configuration we just created will light up with real language intelligence.</p>
]]></content>
    <link href="/blog/neovim-basic-setup/"></link>
    <category>neovim</category>
    <category>vim</category>
    <category>keymaps</category>
  </entry>
  <entry>
    <title>Part 1: My Journey from IDEs to Neovim</title>
    <id>/blog/my-neovim-story/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-09-01T00:00:00Z</published>
    <summary>Just sharing my story with Neovim and why I finally made the switch</summary>
    <content type="html"><![CDATA[<h2 id="how-it-started">How it started?</h2>
<p>Back in 2019, I spent a lot of time on YouTube watching programmers. I was curious about how they worked, especially those using Vim. What I noticed was how they did everything so fast, no mouse, no menus, just pure typing. They could jump between files, make complex changes, and refactor code all in seconds. It looked almost like magic. Their hands seemed glued to the keyboard, and the workflow was so clean and focused. Watching them made me think, “Wow, this is really cool, I want to try that too. Maybe I can code faster, more efficiently, and spend less time wasting time clicking around.”</p>
<p>So, I decided to give it a shot. I downloaded Vim, opened my terminal, and started searching for guides online. I was excited, but that excitement soon turned into frustration.</p>
<h2 id="my-first-try">My first try</h2>
<p>Like many beginners, my first experience with Vim was… rough.</p>
<p>I quickly realized it wasn't as easy as just opening the editor and starting to type. There were a lot of obstacles, and I struggled a lot during those first weeks.</p>
<ul>
<li>
<p>Setting up plugins was confusing. I used Vim so I setup my configuration with Vim script. I didn't understand Vim script very well, the documentation was poor, and every guide I read looked complicated or incomplete. I tried to add autocompletion, syntax highlighting, and other features, but it took me many hours just to get simple things working. Sometimes, I would copy-paste commands, only for my setup to break later, and I had no idea why.</p>
</li>
<li>
<p>LSP and linters kept breaking. I wanted to set up language servers for Python, TypeScript, HTML, CSS, and others, but it was a constant struggle. Sometimes, I'd get strange error messages that made no sense.</p>
</li>
<li>
<p>Too many commands to remember. Unlike VSCode, where I just clicked icons or used simple shortcuts, Vim required me to memorize lots of key combinations. Moving around, copying, pasting, searching, go to definition, refactor ...etc everything needed specific shortcuts. I kept forgetting them, which slowed me down even more.</p>
</li>
<li>
<p>Basic tasks took forever. Things like opening a file, switching buffers, or refactoring code that were quick in IDEs now took much longer in Vim.</p>
</li>
</ul>
<p>After about two or three weeks of this, I gave up. I went back to VSCode and only used Vim for quick edits in the terminal. I thought &quot;Maybe I'm just not smart enough for this.&quot;</p>
<h2 id="why-i-tried-again-at-the-end-of-2024">Why I tried again at the end of 2024</h2>
<p>By 2024, several things made me reconsider Neovim. My daily development workflow was getting more and more frustrating.</p>
<h3 id="my-ides-were-getting-slow">My IDEs were getting slow</h3>
<ul>
<li>
<p><strong>WebStorm</strong> was killing my productivity. Sure, it has amazing features, but when I works on the big projects and the mono repos, on my machine it takes 8+ seconds just to start. It eats tons of RAM and completely freezes when I open large files. I'd spend more time waiting for it to respond than actually coding.</p>
</li>
<li>
<p><strong>VSCode</strong> feels great at first: it starts fast, looks clean, and has many extensions. But in big projects, it quickly slows down. Find and replace, and run prettier/eslint auto takes too long, debugging uses too much memory, and adding more plugins only makes things worse.</p>
</li>
<li>
<p><strong>Zed</strong> looked promising with its speed, but it is missing basics I need every day. There is no proper debugging, git integration is limited, language server support is weak, and it still feels too new for serious work.</p>
</li>
</ul>
<p>Meanwhile, I kept hearing that Neovim users were much faster compared to these IDEs.</p>
<h3 id="working-with-multiple-languages-got-more-complicated">Working with multiple languages got more complicated</h3>
<p>I started working with JavaScript/TypeScript, Python, Go, Rust and Zig. WebStorm didn’t suit this workflow. VSCode allows more extensions and plugins, but it felt slower.</p>
<h3 id="the-ai-problem">The AI problem</h3>
<p>Here's what really pushed me over the edge: AI integration in IDEs is a mess.</p>
<p>Everyone talks about how great AI coding assistance is, but in practice it's frustrating:</p>
<ul>
<li>AI works randomly, sometimes it's helpful, sometimes it suggests complete garbage</li>
<li>Some work projects ban AI tools, so I have to disable everything, but IDEs make this really hard to configure</li>
<li>AI autocomplete kills creativity, it interrupts my thinking with suggestions I didn't ask for</li>
<li>Can't use just AI chat, most IDEs force me to take all AI features or none</li>
</ul>
<p>Most of the time I just want AI turned off, or maybe just access to chat for questions. But try configuring that in VSCode or WebStorm. It's either everything on or a confusing mess of settings.</p>
<h3 id="terminal-tools-got-really-good">Terminal tools got really good</h3>
<p>While IDEs were getting bloated, terminal tools were getting amazing:</p>
<ul>
<li>Modern terminals like Ghostty, WezTerm, Alacritty and Kitty actually work well and look good (they also support some interesting animations)</li>
<li>Raise of Rust powered or terminal tools like ripgrep, zoxide, eza, fd, bat, lazygit, and yazi are incredibly fast</li>
</ul>
<p>Working in the terminal stopped feeling like a punishment and started feeling productive.</p>
<h3 id="my-wrists-started-hurting">My wrists started hurting</h3>
<p>I got a mechanical keyboard and realized how much damage all that mouse movement was doing. Constantly switching between keyboard and mouse for basic editing was:</p>
<ul>
<li>Straining my hands and wrists</li>
<li>Breaking my focus every few seconds</li>
<li>Slowing me down overall</li>
<li>I prefer keeping my hands on the keyboard while typing</li>
</ul>
<p>I needed a way to reduce mouse use, but GUI IDEs made that difficult without Vim-style bindings.</p>
<h2 id="what-changed-neovim-got-much-better">What changed: Neovim got much better</h2>
<p>Between my 2019 failure and 2024, the Neovim ecosystem evolved dramatically:</p>
<h3 id="lua-instead-of-vimscript">Lua instead of Vimscript</h3>
<p><strong>Before</strong>: Neovim relied on Vimscript, which was often cryptic and prone to breaking for unclear reasons.</p>
<p><strong>Now</strong>: I can configure Neovim using Lua, allowing for cleaner, more maintainable code.</p>
<h3 id="better-plugins-and-documentation">Better plugins and documentation</h3>
<p><strong>Before</strong>: Plugins were often experimental, lacked documentation, and could break unexpectedly.</p>
<p><strong>Now</strong>: The Neovim ecosystem has matured, with well-documented plugins and a wealth of examples available online.</p>
<h3 id="learning-became-approachable">Learning became approachable</h3>
<ul>
<li><code>which-key.nvim</code> shows available shortcuts as we type, no more memorizing everything</li>
<li>Tons of dotfiles and tutorials everywhere, we can learn from real configurations</li>
<li>Starter distributions like LazyVim, Kickstart, AstroVim, and LunarVim give us working setups immediately</li>
<li>AI and community (reddit) can help debug or fix configuration issues and suggest improvements</li>
</ul>
<h3 id="built-in-lsp-support">Built-in LSP support</h3>
<p><strong>Before</strong>: Complex third-party LSP setups that barely worked and broke constantly<br>
<strong>Now</strong>: Language servers work out of the box with native Neovim LSP</p>
<h2 id="my-current-setup-minimal-but-complete">My current setup: minimal but complete</h2>
<p>Before becoming truly productive with Neovim, I first tried using Vim keybindings inside VSCode. This helped me get familiar with the shortcuts and the Vim way of editing. It was actually fun, and I felt more productive even in VSCode. (I’m planning to write an article on how I made VSCode keymaps feel like Neovim later)</p>
<p>But I quickly realized there were limits. VSCode’s interface and features kept me from experiencing true Vim, it was never 100% Vim experiences. So I gradually forced myself to switch back and forth between VSCode and Neovim until I felt confident and comfortable in Neovim. That process took me a few weeks.</p>
<p>Now, I work entirely in the terminal with Neovim. I don’t miss VSCode at all.</p>
<p>After lots of experimenting, I ended up with about <strong>20 plugins</strong>. That's it. They give me everything I need for professional development.</p>
<p>Here's my actual Neovim folder structure:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>nvim/
</span></span><span style="display:flex;"><span>├── init.lua                   # Entry point
</span></span><span style="display:flex;"><span>├── lazy-lock.json             # Plugin versions (for reproducibility)
</span></span><span style="display:flex;"><span>├── lsp/                       # Individual language server configs
</span></span><span style="display:flex;"><span>│   ├── biome.lua              # Modern web linting
</span></span><span style="display:flex;"><span>│   ├── vtsls.lua              # Advanced TypeScript
</span></span><span style="display:flex;"><span>│   ├── pyright.lua            # Python intelligence
</span></span><span style="display:flex;"><span>│   ├── gopls.lua              # Go language server
</span></span><span style="display:flex;"><span>│   ├── rust_analyzer.lua      # Rust development
</span></span><span style="display:flex;"><span>│   └── ... (+ language servers)
</span></span><span style="display:flex;"><span>├── lua/
</span></span><span style="display:flex;"><span>│   ├── config/                # Core configuration
</span></span><span style="display:flex;"><span>│   │   ├── keymaps.lua        # VSCode-like shortcuts
</span></span><span style="display:flex;"><span>│   │   ├── options.lua        # Neovim behavior
</span></span><span style="display:flex;"><span>│   │   ├── statusline.lua     # Custom status bar
</span></span><span style="display:flex;"><span>│   │   └── ...
</span></span><span style="display:flex;"><span>│   ├── plugins/               # Plugin configurations
</span></span><span style="display:flex;"><span>│   │   ├── blink.lua          # Rust-powered completion
</span></span><span style="display:flex;"><span>│   │   ├── snacks.lua         # Multi-tool productivity
</span></span><span style="display:flex;"><span>│   │   ├── conform.lua        # Code formatting
</span></span><span style="display:flex;"><span>│   │   └── ...
</span></span><span style="display:flex;"><span>│   └── utils/lsp.lua          # LSP helper functions
</span></span><span style="display:flex;"><span>├── snippets/                  # Custom code snippets
</span></span><span style="display:flex;"><span>└── spell/                     # Multi-language spell check
</span></span></code></pre><br/>
<img src="img/neovim-config-folder.png" alt="Neovim config folder" loading="lazy">
<figcaption style="font-size: 0.8em; color: gray; margin-top: 4px; text-align: center;">My Neovim config folder</figcaption>
<br/>
<h2 id="the-results-so-far">The results so far</h2>
<p><strong>Daily workflow:</strong></p>
<ul>
<li>Everything happens in one place: coding, note-taking, file search, Git, and AI tools all inside Neovim. No more constant tool switching.</li>
<li>Built-in terminal integration means I can run tests, scripts, or even AI assistants (Claude CLI, Gemini CLI, Opencode) directly from the editor.</li>
<li>No mouse needed for 95% of tasks (In the browser I use the vimium extension, and on macOS I use homerow for full keyboard navigation)</li>
<li>I code faster and feel more productive. Vim’s actions and motions are really powerful (<code>ci</code>, <code>ca</code>, <code>fuzzy search</code>, <code>LSP go-to</code>, <code>registers</code>, <code>marks</code>, <code>selections</code>,<code>macros</code> ...etc).</li>
<li>Same interface for all 10+ programming languages</li>
<li>Complete control over AI - I can turn it off, use just chat, or customize exactly what I want</li>
</ul>
<p><strong>Performance:</strong></p>
<ul>
<li>Startup is almost instant (under 100 ms vs several seconds for VSCode or IntelliJ).</li>
<li>Memory usage stays light (50–150 MB, compared to 400+ MB for VSCode and ~1 GB for WebStorm/IntelliJ).</li>
<li>Large files are no problem, I can open 100 MB+ logs or 100k-line projects in under a second.</li>
<li>Even with 30+ plugins loaded, Neovim still feels faster than a fresh install of most IDEs.</li>
<li>CPU stays quiet, background LSP tasks or Treesitter parsing barely register compared to the heavy background processes of Electron-based editors.</li>
</ul>
<p>I now work fully in Neovim and haven’t looked back at VSCode. It feels faster, lighter, and more in tune with how I want to code.</p>
<h2 id="why-im-writing-this-series">Why I'm writing this series</h2>
<p>Neovim changes fast. It's still version 0.x (I'm using 0.12), not 1.0 yet. Things can break between updates.</p>
<p>I'm sharing my setup because it works very well for me, and maybe it'll help you too. I'm not claiming it's perfect, just showing what I figured out after lots of trial and error.</p>
<p>This isn't expert advice. Just one developer sharing what actually works.</p>
<h2 id="article-series-plan">Article series plan</h2>
<p>Based on my setup, here are the core topics for upcoming articles:</p>
<ul>
<li>Part 2: basics setup (init.lua, keymaps, options, autocmds, diagnostics)</li>
<li>Part 3: setup native LSP</li>
<li>Part 4: setup lazyvim, snacks.nvim (+ which-key.nvim, nvim-web-devicons)</li>
<li>Part 5: code quality tools (formatter, highlighting, theme)</li>
<li>Part 6: setup smart completion with blink.cmp, snippets</li>
<li>Part 7: setup git tools (gitsigns, diffview, lazygit)</li>
<li>Part 8: debugging (nvim-dap, nvim-dap-ui)</li>
<li>Part 9: enhanced editing experience (flash.nvim, yanky.nvim, grug-far.nvim, noice.nvim)</li>
<li>Part 10: custom lua scripts (statusline, tabline, session)</li>
</ul>
<p><strong>Bonus series</strong>: I'll also create a smaller series showing how to achieve the same setup using Neovim's native <code>vim.pack</code> in neovim 0.12+ instead of <code>lazy.nvim,</code> for those who want minimal dependencies.</p>
<h2 id="faq">FAQ</h2>
<ol>
<li>Did I used Helix?</li>
</ol>
<p>Yes, I tried Helix. It’s nice, very fast, and simple to set up. But I still prefer Neovim because of its modal editing with actions + motions. Neovim also has far more plugins and better UI/UX. So I decided to stay with Neovim.</p>
]]></content>
    <link href="/blog/my-neovim-story/"></link>
    <category>neovim</category>
    <category>vim</category>
    <category>ide</category>
    <category>vscode</category>
  </entry>
  <entry>
    <title>[Note] Different ways to batch update Nodejs dependencies</title>
    <id>/notes/update-dependencies-nodejs/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-02-23T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="different-ways-to-batch-update-nodejs-dependencies">Different ways to batch update Node.js dependencies</h1>
<p>Here are a few simple ways to batch update all the Node.js dependencies in package.json:</p>
<ul>
<li>
<p><strong>yarn v2:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>yarn upgrade-interactive
</span></span></code></pre><p>This gives you an interactive list so you can choose exactly which packages to update.</p>
</li>
<li>
<p><strong>npm:</strong><br>
Use <a href="https://www.npmjs.com/package/npm-check-updates">npm-check-updates</a>.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>npm install -g npm-check-updates
</span></span><span style="display:flex;"><span>ncu -i <span style="color:#6272a4"># interactive update</span>
</span></span></code></pre><p>This automatically updates your <code>package.json</code> with the latest versions.</p>
</li>
<li>
<p><strong>pnpm:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>pnpm update -i <span style="color:#6272a4"># interactive update</span>
</span></span><span style="display:flex;"><span>pnpm update --latest <span style="color:#6272a4"># update all to latest versions</span>
</span></span></code></pre></li>
<li>
<p><strong>bun:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bun update --latest <span style="color:#6272a4"># update all to latest versions</span>
</span></span></code></pre></li>
<li>
<p><strong>deno:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>deno outdateed --update --latest <span style="color:#6272a4"># update dependencies to latest versions, ignoring semver requirements</span>
</span></span></code></pre></li>
<li>
<p><strong>taze:</strong><br>
If you don't want to rely on a specific package management, <a href="https://www.npmjs.com/package/taze">taze</a> is another tool that smartly upgrades your dependencies.</p>
</li>
<li>
<p><strong>CI</strong></p>
<p>If you’d rather automate the whole process on CI, consider integrating tools like Renovate or Dependabot into your workflow. They’ll automatically open pull requests with updates, so you can review and merge changes without extra efforts.</p>
</li>
</ul>
]]></content>
    <link href="/notes/update-dependencies-nodejs/"></link>
  </entry>
  <entry>
    <title>[Note] The fastest way to rewrite Git history</title>
    <id>/notes/git-filter-repo/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-02-06T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="the-fastest-way-to-rewrite-git-history">The fastest way to rewrite Git history</h1>
<p>Ever pushed commits and then realized you messed up?</p>
<ul>
<li>Wrong Git user/email.</li>
<li>Bad commit messages.</li>
<li>Accidentally committed secrets (API keys, passwords).</li>
<li>A huge file is bloating the repo.</li>
<li>...and more.</li>
</ul>
<p>Many developers try <code>git rebase -i</code>, but it’s slow, manual, and limited. <strong>A better way?</strong></p>
<p>Use <a href="https://github.com/newren/git-filter-repo">git-filter-repo</a>, it’s faster, more powerful, and works across the entire repo.</p>
<h2 id="examples-of-git-problems-and-fixes">Examples of Git problems and fixes</h2>
<ul>
<li>
<p>Fix author name/email in all commits</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git filter-repo --commit-callback <span style="color:#f1fa8c">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  commit.author_name = &#34;Correct Name&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  commit.author_email = &#34;correct@example.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#39;</span>
</span></span></code></pre></li>
<li>
<p>Edit commit messages in bulk</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git filter-repo --message-callback <span style="color:#f1fa8c">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  commit.message = commit.message.replace(b&#34;fix typo&#34;, b&#34;Fix: corrected typo&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#39;</span>
</span></span></code></pre></li>
<li>
<p>Remove sensitive files from history</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git filter-repo --path secret-file.env --invert-paths
</span></span></code></pre></li>
<li>
<p>Delete large files from old commits</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git filter-repo --strip-blobs-bigger-than 100M
</span></span></code></pre></li>
<li>
<p>Erase all commits from a specific author</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git filter-repo --commit-callback <span style="color:#f1fa8c">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  if commit.author_email == b&#34;wronguser@example.com&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">      commit.skip()
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#39;</span>
</span></span></code></pre></li>
</ul>
<p>For more use cases, check out <a href="https://htmlpreview.github.io/?https://github.com/newren/git-filter-repo/blob/docs/html/git-filter-repo.html">the full docs</a>.</p>
]]></content>
    <link href="/notes/git-filter-repo/"></link>
  </entry>
  <entry>
    <title>[Note] You don&#39;t need husky</title>
    <id>/notes/husky-alternative/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-02-05T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="you-dont-need-husky">You don’t need Husky</h1>
<p>Do you use <code>husky</code> to manage Git commit hooks? Husky is a popular tool (50M+ downloads per month!), but did you know that Git already has built-in support for hooks?</p>
<p>With <a href="https://git-scm.com/docs/githooks">Githooks</a>, you don’t need to install extra dependencies. Git provides 28 different hooks that allow you to automate git hooks tasks.</p>
<h2 id="how-to-use">How to use?</h2>
<ul>
<li>
<p>Create a <code>.git/hooks</code> or <code>.githooks</code> directory (just like you’d configure <code>.husky</code>)</p>
</li>
<li>
<p>Configure Git to use your hooks scripts</p>
<p>Tell Git to use this folder for hooks by adding the following <code>postinstall</code> script in your <code>package.json</code>. This ensures that Git hooks are always active after running <code>npm</code> install (or <code>yarn</code>, <code>pnpm</code>, <code>bun</code>).</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;scripts&#34;</span>: {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&#34;postinstall&#34;</span>: <span style="color:#f1fa8c">&#34;git config core.hooksPath ./.githooks || true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></li>
<li>
<p>Hook scripts
Inside the <code>.githooks</code> folder, create scripts named according to the Git Hooks documentation (e.g., <code>pre-commit</code>, <code>prepare-commit-msg</code>).</p>
<p>Example:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># .githooks/pre-commit</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#!/bin/bash</span>
</span></span><span style="display:flex;"><span>npm run lint
</span></span></code></pre><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># .githooks/prepare-commit-msg</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#!/bin/bash</span>
</span></span><span style="display:flex;"><span>npx --no-install commitlint --edit <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$1</span><span style="color:#f1fa8c">&#34;</span>
</span></span></code></pre><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># .githooks/post-commit</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#!/bin/bash</span>
</span></span><span style="display:flex;"><span>npm <span style="color:#8be9fd;font-style:italic">test</span>
</span></span></code></pre></li>
</ul>
]]></content>
    <link href="/notes/husky-alternative/"></link>
  </entry>
  <entry>
    <title>Scripting tools - A Node.js friendly alternative to makefile</title>
    <id>/blog/scripting-tools/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-29T00:00:00Z</published>
    <summary>Using execa and commander is an alternative that can be considered for replacing makefile in a Node.js project</summary>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Using <code>execa</code> and <code>commander</code> is an alternative that can be considered for replacing makefile in a Node.js project.</p>
<h2 id="introduction">Introduction</h2>
<p>At <a href="https://ekino.fr">ekino</a>, in some projects handled by our Node.js team, we heavily use <strong>Makefile</strong> to automate tasks such as testing,
lints, Docker integration, code checking, deployment, Kubernetes management, load testing with K6, and all automating stuff.
They have been our preferred tool for many years due to their simplicity, efficiency, and adaptability to various workflows.</p>
<p>As our projects have grown, these files have become increasingly more complex and harder to maintain and understand, especially for team members who are not familiar with shell scripting.
Because of these challenges, we've started looking into using JavaScript tools for automating tasks.</p>
<p>Our goal is to simplify our processes, make them easier for everyone on the team to use, and see what advantages this new approach might bring.</p>
<h2 id="challenges-with-makefile">Challenges with makefile</h2>
<p>While <code>make</code> has been a reliable tool, they have limitations that are more noticeable in current projects. Here are some our key issues:</p>
<ul>
<li>
<p><em>Debugging with make is not easy</em></p>
<p>Make doesn't provide clear error messages. If something goes wrong, we often have to figure out confusing shell outputs. Many errors come from shell-specific issues,
like syntax problems or incorrect environment configurations, which can be difficult to resolve.</p>
<p>Debugging options are limited. For example, <code>make -d</code> provides verbose logs, but there's no way to set breakpoints or trace errors like we can in JavaScript/Typescript</p>
</li>
<li>
<p><em>Environment variables are hard to manage</em></p>
<p>Make handles all environment variables the same way, without organizing them. This makes it hard to manage settings across environments like development, staging, and production.
Unlike JavaScript, which uses modules and scoped variables for better control.</p>
</li>
<li>
<p><em>Challenges for non-UNIX developers</em></p>
<p>Make is very particular about things like tab indentation and specific shell syntax, which can be confusing for developers who are not familiar with Unix-like systems.</p>
</li>
<li>
<p><em>Limited support for parallel and asynchronous tasks</em></p>
<p>Make can handle basic parallelisms using the <code>-j</code> flag, but they don't work well with truly asynchronous tasks. For complex workflows,
especially those that need tasks to run in parallel or asynchronously, things can get very difficult to manage without advanced shell scripting.</p>
</li>
<li>
<p><em>Readability and maintenance issues</em></p>
<p>As makefiles get bigger, their straightforward, step-by-step instructions become harder to read and manage.
It's not always clear how tasks depend on each other, and without features like functions or imports, handling a large makefile can feel like trying to untangle a big mess.</p>
<p>JavaScript provides ways to organize code using functions and libraries, which helps keep the code neat and easy to maintain.</p>
</li>
</ul>
<p><strong>Other alternatives to makefile</strong></p>
<p>In addition to Node.js-based tools, there are 2 good alternatives to makefile:</p>
<ul>
<li><strong><a href="https://github.com/casey/just">Justfile</a></strong> (Rust-based)</li>
<li><strong><a href="https://github.com/go-task/task">Taskfile</a></strong> (Go-based with YAML syntax)</li>
</ul>
<p><strong>Justfile</strong> is written in Rust, which makes it very fast. Its syntax is simpler and more user-friendly than makefile, supporting environment variables from <code>.env</code> files and offering cross-platform compatibility.
It also integrates well with various languages, including JavaScript (using <code>#!/usr/bin/env node</code>) and a lot of other cool features. It's a very promising tool.</p>
<p><strong>Taskfile</strong>, built with Go, provides a YAML-based configuration that is fast and structured. It is designed to simplify task definitions and improve maintainability compared to makefile.</p>
<p>Both tools solve many problems of makefile. However, they also come with their own challenges.
Using them would require learning a new syntax and adding additional setup steps, such as installing these tools in our Node.js Docker images, which isn’t ideal for our workflow.</p>
<p>Since we're looking for a JavaScript solution that works well with our current projects, we won't explore these options further in this research.
However, they are still good choices for teams that want something different from JavaScript (especially <code>Justfile</code>)</p>
<h2 id="objectif">Objectif</h2>
<p>We need a solution that uses JavaScript/Typescript, a language our developers is already comfortable with. Our goal is to make scripting easier to write, update, and understand.</p>
<p>Here's what we're looking for:</p>
<ul>
<li>The tool should reduce complexity and make scripts easy to understand, even for those with little scripting experience.</li>
<li>It should work naturally with JavaScript and TypeScript, fitting into our existing projects without friction.</li>
<li>Combining the power of JavaScript with shell commands should be easy.</li>
<li>Clear error messages, stack traces, and debugging tools are essential for identifying and fixing problems quickly.</li>
<li>It should handle multiple tasks, background tasks effectively using Node.js's native features.</li>
<li>The tool should work as a JavaScript library or a command-line tool, giving us options depending on the use case. Commands should be easy to use, with helpful features like <code>--help</code> for quick guidance.</li>
<li>It must work consistently across different plateforme Windows, macOS, and Linux</li>
</ul>
<h2 id="tools-exploration">Tools exploration</h2>
<p>Here's an overview of some tools we've explored:</p>
<ul>
<li>
<p><strong>JS shell libraries</strong></p>
<p>These libraries allow developers to write scripts that combine JavaScript's flexibility with shell-like commands, making automation tasks intuitive and efficient:</p>
<ul>
<li><strong><a href="https://github.com/google/zx">zx</a></strong>: A Google-developed library that simplifies scripting by combining JavaScript with shell syntax.</li>
<li><strong><a href="https://github.com/sindresorhus/execa">execa</a></strong>: Built on top of the <a href="https://nodejs.org/api/child_process.html"><code>child_process</code></a> core module. This tool makes it easy to execute commands, handle errors, and integrate them directly into JavaScript code.</li>
<li><strong><a href="https://github.com/dsherret/dax">dax</a></strong>: Similar to <code>zx</code>, optimized for shell scripting within JavaScript, developed for Deno and Node.js.</li>
<li><strong><a href="https://github.com/shelljs/shelljs">shelljs</a></strong>: A Portable Unix shell commands for Node.js</li>
</ul>
</li>
<li>
<p><strong>JavaScript CLI libraries</strong></p>
<p>For building command-line interfaces (CLIs) in JavaScript, these libraries offer varying levels of complexity and features:</p>
<ul>
<li><strong><a href="https://github.com/tj/commander.js">commander</a></strong>: Simple CLI building with argument parsing, command support, and <code>--help</code> generation.</li>
<li><strong><a href="https://github.com/yargs/yargs">yargs</a></strong>: Yargs helps to build interactive command line tools, by parsing arguments and generating an elegant user interface.</li>
<li><strong><a href="https://github.com/minimistjs/minimist">minimist</a></strong>: Lightweight option parser for CLI arguments, ideal for simpler CLI tools.</li>
<li><strong><a href="https://github.com/oclif/oclif">oclif</a></strong>: CLI for generating, building, and releasing oclif CLIs. Built by Salesforce.</li>
</ul>
</li>
</ul>
<h2 id="compared-and-select-tools">Compared and select tools</h2>
<h3 id="js-shell-libraries">JS shell libraries</h3>
<table>
<thead>
<tr>
<th>Criteria</th>
<th><strong>zx</strong></th>
<th><strong>execa</strong></th>
<th><strong>dax</strong></th>
<th><strong>shelljs</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>GitHub stars</strong></td>
<td><img src="https://img.shields.io/github/stars/google/zx" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/sindresorhus/execa" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/dsherret/dax" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/shelljs/shelljs" alt="Stars"></td>
</tr>
<tr>
<td><strong>Popularity</strong></td>
<td>Gaining traction rapidly</td>
<td>Established and widely used</td>
<td>Newer tool with growing interest (Original developed for Deno)</td>
<td>The oldest tool, widely used</td>
</tr>
<tr>
<td><strong>Maintainers</strong></td>
<td>Google</td>
<td>Sindre Sorhus (A open source legend) and Mickael Hebert</td>
<td>David Sherret (Deno team)</td>
<td>Nate Fischer (Google engineer)</td>
</tr>
<tr>
<td><strong>Released</strong></td>
<td>Regularly</td>
<td>Regularly</td>
<td>Regularly</td>
<td>Not relesed since 2022</td>
</tr>
<tr>
<td><strong>Contributors</strong></td>
<td><img src="https://img.shields.io/github/contributors/google/zx" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/sindresorhus/execa" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/dsherret/dax" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/shelljs/shelljs" alt="Contributors"></td>
</tr>
<tr>
<td><strong>Issues</strong></td>
<td><img src="https://img.shields.io/github/issues/google/zx" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/sindresorhus/execa" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/dsherret/dax" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/shelljs/shelljs" alt="Open Issues"></td>
</tr>
<tr>
<td><strong>Npm</strong></td>
<td><img src="https://img.shields.io/npm/dw/zx" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/execa" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/dax-sh" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/shelljs" alt="Download"></td>
</tr>
<tr>
<td><strong>Dependencies</strong></td>
<td>0 dependency, but include a lot of external builtin utilities</td>
<td>12 dependencies</td>
<td>2 dependencies</td>
<td>3 dependencies</td>
</tr>
<tr>
<td><strong>Install size</strong></td>
<td><img src="https://packagephobia.now.sh/badge?p=zx" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=execa" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=dax-sh" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=shelljs" alt="Install Size"></td>
</tr>
<tr>
<td><strong>Cross-platform</strong></td>
<td>Limited to POSIX-compliant environments (Linux, macOS)</td>
<td>Yes</td>
<td>Yes (Deno, Node.js-compatible across platforms)</td>
<td>Yes</td>
</tr>
<tr>
<td><strong>Documentation</strong></td>
<td>Comprehensive and beginner-friendly, includes examples and guides</td>
<td>Highly detailed with structured sections, examples , debugging guides</td>
<td>Thorough, but slightly less mature than <code>zx</code> or <code>execa</code> docs</td>
<td>Clear and straightforward documentation</td>
</tr>
<tr>
<td><strong>Ease of use</strong></td>
<td>User-friendly, support syntax with <code>$</code> as shorthand for executing commands</td>
<td>User-friendly and powerful, support shorthand syntax <code>$</code></td>
<td>Easy to use, support <code>$</code> shorthand, some features still maturing</td>
<td>Familiar UNIX-like syntax, lacks <code>$</code> shorthand, suitable for cross-platform scripts</td>
</tr>
</tbody>
</table>
<br/>
<img src="img/execa-zx-dax-shelljs.png" alt="execa-zx-dax-shelljs" loading="lazy">
<figcaption style="font-size: 0.8em; color: gray; margin-top: 4px; text-align: center;">Image from npmtrends.com</figcaption>
<br/>
<p>Here are some examples demonstrating the syntax for each tool:</p>
<ul>
<li>zx</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env zx
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { $ } from <span style="color:#f1fa8c">&#39;zx&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`rm -rf project_a`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`mkdir project_a`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`touch project_a/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#34;console.log(&#39;Hello, World!&#39;);&#34; &gt; project_a/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> output <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`node project_a/index.js`</span>
</span></span><span style="display:flex;"><span>console.log(output.stdout)
</span></span></code></pre><ul>
<li>execa</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env node
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { $ } from <span style="color:#f1fa8c">&#39;execa&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`rm -rf project_b`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`mkdir project_b`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`touch project_b/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $({
</span></span><span style="display:flex;"><span>    shell<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>})<span style="color:#f1fa8c">`echo &#34;console.log(&#39;Hello, World!&#39;);&#34; &gt; project_b/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $({ stdout<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;inherit&#39;</span> })<span style="color:#f1fa8c">`node project_b/index.js`</span>
</span></span></code></pre><p>By default, <code>execa</code> does not activate the shell behavior. Here’s why, according to the creator:</p>
<blockquote>
<p>In general, <a href="https://en.wikipedia.org/wiki/Shell_(computing)">shells</a> should be avoided because they are:</p>
<ul>
<li>Not cross-platform, encouraging shell-specific syntax.</li>
<li>Slower, because of the additional shell interpretation.</li>
<li>Unsafe, potentially allowing <a href="https://en.wikipedia.org/wiki/Code_injection#Shell_injection">command injection</a> (see the <a href="https://github.com/sindresorhus/execa/blob/main/docs/escaping.md#shells">escaping section</a>).</li>
</ul>
</blockquote>
<p>If you need to use a shell or capture shell output in <code>execa</code>, you must explicitly enable it by setting <code>$({ shell: true })</code> or <code>$({stdout: 'inherit'})</code> in the options, as shown in the example</p>
<ul>
<li>dax</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env -S deno run --allow-all
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> $ from <span style="color:#f1fa8c">&#39;dax-sh&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`rm -rf project_c`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`mkdir project_c`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`touch project_c/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#34;console.log(&#39;Hello, World!&#39;);&#34; &gt; project_c/index.js`</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`node project_c/index.js`</span>
</span></span></code></pre><ul>
<li>shell.js</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env node
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> shell from <span style="color:#f1fa8c">&#39;shelljs&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>shell.rm(<span style="color:#f1fa8c">&#39;-rf&#39;</span>, <span style="color:#f1fa8c">&#39;project_d&#39;</span>)
</span></span><span style="display:flex;"><span>shell.mkdir(<span style="color:#f1fa8c">&#39;project_d&#39;</span>)
</span></span><span style="display:flex;"><span>shell.touch(<span style="color:#f1fa8c">&#39;project_d/index.js&#39;</span>)
</span></span><span style="display:flex;"><span>shell.exec(<span style="color:#f1fa8c">`echo &#34;console.log(&#39;Hello, World!&#39;);&#34; &gt; project_d/index.js`</span>)
</span></span><span style="display:flex;"><span>shell.exec(<span style="color:#f1fa8c">&#39;node project_d/index.js&#39;</span>)
</span></span></code></pre><ul>
<li>Same thing we can do with makefile</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#50fa7b">run_js</span><span style="color:#ff79c6">:</span>
</span></span><span style="display:flex;"><span> rm -rf project_e
</span></span><span style="display:flex;"><span> mkdir project_e
</span></span><span style="display:flex;"><span> touch project_e/index.run_js
</span></span><span style="display:flex;"><span> <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;console.log(&#39;Hello makefile&#39;);&#34;</span> &gt; project_e/index.js
</span></span><span style="display:flex;"><span> node project_e/index.js
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">.PHONY</span><span style="color:#ff79c6">:</span> run_js
</span></span><span style="display:flex;"><span>
</span></span></code></pre><p>These examples shows how each tool deals with simple tasks, but they are very different when it comes to more complicated tasks. When looking at these tools, we aimed to find one that is feature-rich, well-documented, and reliably maintained.</p>
<p><code>zx</code> is an interesting option developed by Google. This typically means it’s stable and well-maintained. However, zx is somewhat heavy, as it includes several built-in utilities (e.g., chalk, which, yaml) that may not always be necessary for every project. While this bundling can simplify scripting tasks, it could add unnecessary overhead, especially in lightweight use cases.</p>
<p><code>Execa</code> is an excellent option for scripting tasks. It’s lightweight, cross-platform, well-documented, and incredibly popular, (with 100M downloads per week compared to <code>zx</code>'s 720k). This level of adoption places it among the most widely used npm libraries, which is quite impressive.
But there are also some limitations. <code>execa</code> only supports Node.js versions <code>18.19.0</code> and above. While this is fine for modern projects (the current LTS version is 22.11.0), if we need to use it for a legacy project, that won't be possible. Additionally, <code>execa</code> has 12 dependencies, which is relatively high for a utility library of this type. However, these dependencies are actively maintained by the library’s creator, so I think that’s acceptable (considering the number of downloads and contributors, we likely won’t face security issues with these dependencies). Still, if they could reduce the dependencies to 3–4, it would make <code>execa</code> even more streamlined and appealing.</p>
<p><code>Dax</code> is also a quite interesting tool developed for both Deno and Node.js compatibility. It’s written in Rust and uses the <a href="https://github.com/denoland/deno_task_shell">deno_task_shell</a> parser, which ensures good performance. However, it’s still relatively young and might lack some maturity. Looking at the API of this library, it seems sufficient for handling most basic scripting needs. But I encountered an issue when managing errors. The <code>.catch</code> function does not always work as expected, which suggests that the result of the <code>await</code> function may not be a true <code>async</code> function. For example:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>await $<span style="color:#f1fa8c">`</span>kubectl delete secrets aws-ecr-secret -n <span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">namespace</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>.catch<span style="color:#ff79c6">(()</span> <span style="color:#ff79c6">=</span>&gt; <span style="color:#8be9fd;font-style:italic">true</span><span style="color:#ff79c6">)</span>; // Throws: TypeError: <span style="color:#ff79c6">$(</span>...<span style="color:#ff79c6">)</span>.catch is not a <span style="color:#ff79c6">function</span>
</span></span></code></pre><p>In most cases, this issue can be resolved using a <code>try-catch</code> block, although it does make the syntax slightly more verbose.</p>
<p><code>Shelljs</code> works well as a cross-platform tool and is reliable for basic tasks. However, it relies on older syntax and lacks the shorthand flexibility found in more modern tools like <code>zx</code> and <code>execa</code>. Additionally, its less frequent updates make it feel somewhat outdated and less suitable for current development requirements.</p>
<p>There is also an interesting comparison of the APIs of <code>execa</code> and <code>zx</code> (the two most widely used libraries in this list), which can be found <a href="https://github.com/sindresorhus/execa/blob/main/docs/bash.md">here</a>. Here’s a summary of key differences:</p>
<table>
<thead>
<tr>
<th>Criteria</th>
<th><strong>execa</strong></th>
<th><strong>zx</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Shell</strong></td>
<td>Does not require a shell; can run JavaScript directly with <code>#!/usr/bin/env node</code>.</td>
<td>Requires <code>zx</code> as the shell; uses <code>#!/usr/bin/env zx</code> for execution.</td>
</tr>
<tr>
<td><strong>Modularity</strong></td>
<td>Designed to be small and modular; does not include any built-in utilities, allowing for focused functionality.</td>
<td>Includes many built-in utilities (e.g., chalk, yaml, which), which can simplify tasks, so it can be heavy</td>
</tr>
<tr>
<td><strong>Debugging</strong></td>
<td>- Offers verbose debugging options, including timestamps, command completion, duration, and interleaved commands.<br>- Pure functional.</td>
<td>- Provides less detailed information than <code>execa</code> during debugging.<br>- Statefull, retaining options and the current directory.</td>
</tr>
<tr>
<td><strong>Syntax</strong></td>
<td>Features a simple and flexible syntax that aligns with Node.js standards for environment variables (e.g., <code>process.env.LANG</code>).<br>- Easily executes serial commands.<br>- Silent stdout by default.</td>
<td>- Less flexible with syntax; uses UNIX-style environment variables (e.g., <code>$LANG</code>).<br>- Does not silence stdout by default, which can clutter output.</td>
</tr>
<tr>
<td><strong>Piping</strong></td>
<td>Supports simple piping with an intuitive API.</td>
<td>Offers less flexible piping with a more verbose syntax.</td>
</tr>
<tr>
<td><strong>Streams</strong></td>
<td>Supports web streams and duplex streams, enhancing integration with modern APIs.</td>
<td>Does not support streams, which may limit certain use cases.</td>
</tr>
<tr>
<td><strong>Pipeline results</strong></td>
<td>Returns results from all commands in the pipeline, providing comprehensive data for further processing.</td>
<td>Only returns the result of the last command in the pipeline, which may restrict data access.</td>
</tr>
</tbody>
</table>
<p>From this comparison, it’s clear that <code>execa</code> has several advantages. Its API is closer to the Node.js syntax and ecosystem, making it feel more natural for developers familiar with Node.js.</p>
<h4 id="what-about-the-performance-of-these-tools">What about the performance of these tools?</h4>
<p>We made a simple benchmark for these tools using the examples provided. The results are shown below:</p>
<p>(Benchmark ran on Node.js 22.11.0, Bun: 1.1.37, Deno 2.1.1)</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>❯ hyperfine --warmup <span style="color:#bd93f9">3</span> <span style="color:#f1fa8c">&#34;node zx.js&#34;</span> <span style="color:#f1fa8c">&#34;node execa.js&#34;</span> <span style="color:#f1fa8c">&#34;node dax.js&#34;</span> <span style="color:#f1fa8c">&#34;node shell.js&#34;</span> <span style="color:#f1fa8c">&#34;make run_js&#34;</span>
</span></span><span style="display:flex;"><span>Benchmark 1: node zx.js
</span></span><span style="display:flex;"><span>  Time <span style="color:#ff79c6">(</span>mean ± σ<span style="color:#ff79c6">)</span>:     301.8 ms ±   9.1 ms    <span style="color:#ff79c6">[</span>User: 229.3 ms, System: 67.1 ms<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>  Range <span style="color:#ff79c6">(</span>min … max<span style="color:#ff79c6">)</span>:   295.1 ms … 326.0 ms    <span style="color:#bd93f9">10</span> runs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Benchmark 2: node execa.js
</span></span><span style="display:flex;"><span>  Time <span style="color:#ff79c6">(</span>mean ± σ<span style="color:#ff79c6">)</span>:     340.7 ms ±  68.3 ms    <span style="color:#ff79c6">[</span>User: 258.1 ms, System: 88.1 ms<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>  Range <span style="color:#ff79c6">(</span>min … max<span style="color:#ff79c6">)</span>:   298.8 ms … 532.9 ms    <span style="color:#bd93f9">10</span> runs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might <span style="color:#8be9fd;font-style:italic">help</span> to use the <span style="color:#f1fa8c">&#39;--warmup&#39;</span> or <span style="color:#f1fa8c">&#39;--prepare&#39;</span> options.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Benchmark 3: node dax.js
</span></span><span style="display:flex;"><span>  Time <span style="color:#ff79c6">(</span>mean ± σ<span style="color:#ff79c6">)</span>:     241.4 ms ±  21.6 ms    <span style="color:#ff79c6">[</span>User: 217.3 ms, System: 46.1 ms<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>  Range <span style="color:#ff79c6">(</span>min … max<span style="color:#ff79c6">)</span>:   217.2 ms … 307.1 ms    <span style="color:#bd93f9">12</span> runs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might <span style="color:#8be9fd;font-style:italic">help</span> to use the <span style="color:#f1fa8c">&#39;--warmup&#39;</span> or <span style="color:#f1fa8c">&#39;--prepare&#39;</span> options.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Benchmark 4: node shell.js
</span></span><span style="display:flex;"><span>  Time <span style="color:#ff79c6">(</span>mean ± σ<span style="color:#ff79c6">)</span>:     411.8 ms ±  12.5 ms    <span style="color:#ff79c6">[</span>User: 325.4 ms, System: 86.8 ms<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>  Range <span style="color:#ff79c6">(</span>min … max<span style="color:#ff79c6">)</span>:   396.5 ms … 435.7 ms    <span style="color:#bd93f9">10</span> runs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Benchmark 5: make run_js
</span></span><span style="display:flex;"><span>  Time <span style="color:#ff79c6">(</span>mean ± σ<span style="color:#ff79c6">)</span>:     165.8 ms ±  37.7 ms    <span style="color:#ff79c6">[</span>User: 90.5 ms, System: 47.7 ms<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>  Range <span style="color:#ff79c6">(</span>min … max<span style="color:#ff79c6">)</span>:   131.6 ms … 250.9 ms    <span style="color:#bd93f9">15</span> runs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Summary
</span></span><span style="display:flex;"><span>  make run_js ran
</span></span><span style="display:flex;"><span>    1.46 ± 0.36 <span style="color:#8be9fd;font-style:italic">times</span> faster than node dax.js
</span></span><span style="display:flex;"><span>    1.82 ± 0.42 <span style="color:#8be9fd;font-style:italic">times</span> faster than node zx.js
</span></span><span style="display:flex;"><span>    2.05 ± 0.62 <span style="color:#8be9fd;font-style:italic">times</span> faster than node execa.js
</span></span><span style="display:flex;"><span>    2.48 ± 0.57 <span style="color:#8be9fd;font-style:italic">times</span> faster than node shell.js
</span></span></code></pre><p>For benchmarking, you can see that executing code with <code>make</code> is consistently faster than using JavaScript tools for scripting. <code>dax</code> comes in second place, likely because it’s written in Rust, which ensures good performance. <code>execa</code> and <code>zx</code> are nearly the same in performance, while <code>shelljs</code> is the slowest.</p>
<p>I also tested other runtimes like <code>bun</code> and <code>deno</code>, but running scripts with <code>make</code> is still the fastest:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>Summary
</span></span><span style="display:flex;"><span>  make run_js ran
</span></span><span style="display:flex;"><span>    1.43 ± 0.15 <span style="color:#8be9fd;font-style:italic">times</span> faster than deno -A dax.js
</span></span><span style="display:flex;"><span>    1.58 ± 0.50 <span style="color:#8be9fd;font-style:italic">times</span> faster than bun dax.js
</span></span><span style="display:flex;"><span>    1.74 ± 0.17 <span style="color:#8be9fd;font-style:italic">times</span> faster than bun execa.js
</span></span><span style="display:flex;"><span>    1.85 ± 0.22 <span style="color:#8be9fd;font-style:italic">times</span> faster than node dax.js
</span></span><span style="display:flex;"><span>    1.90 ± 0.19 <span style="color:#8be9fd;font-style:italic">times</span> faster than bun zx.js
</span></span><span style="display:flex;"><span>    1.97 ± 0.24 <span style="color:#8be9fd;font-style:italic">times</span> faster than deno -A zx.js
</span></span><span style="display:flex;"><span>    2.00 ± 0.21 <span style="color:#8be9fd;font-style:italic">times</span> faster than deno -A execa.js
</span></span><span style="display:flex;"><span>    2.30 ± 0.22 <span style="color:#8be9fd;font-style:italic">times</span> faster than node execa.js
</span></span><span style="display:flex;"><span>    2.32 ± 0.47 <span style="color:#8be9fd;font-style:italic">times</span> faster than node zx.js
</span></span><span style="display:flex;"><span>    2.69 ± 0.98 <span style="color:#8be9fd;font-style:italic">times</span> faster than bun shell.js
</span></span><span style="display:flex;"><span>    2.89 ± 0.51 <span style="color:#8be9fd;font-style:italic">times</span> faster than deno -A shell.js
</span></span><span style="display:flex;"><span>    3.05 ± 0.30 <span style="color:#8be9fd;font-style:italic">times</span> faster than node shell.js
</span></span></code></pre><p>The differences in these benchmarks might be due to a small startup delay when executing JavaScript code with JS runtime. However, for typical scripting tasks, this difference is only in milliseconds, which isn’t really significant when running scripts.</p>
<p>After considering features, simplicity, documentation, support, and how well they adapt to our scripting system, the best candidates for our project are <strong>execa</strong> and <strong>dax</strong>. These two stand out as the most interesting options. Both offer plenty of useful features and are more than sufficient for our needs.</p>
<h3 id="javascript-cli-libraries">JavaScript CLI libraries</h3>
<p>After choosing the main tools for writing JavaScript code with shell scripts, there’s one crucial piece missing to create the perfect combination: a tool for creating command-line interfaces (CLI). To finish setting up our system, we looked at several options and compared what they can do to find the best one for us.</p>
<p>Here's a summary of the tools we checked out:</p>
<table>
<thead>
<tr>
<th>Criteria</th>
<th><strong>commander</strong></th>
<th><strong>yargs</strong></th>
<th><strong>minimist</strong></th>
<th><strong>oclif</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>GitHub Stars</strong></td>
<td><img src="https://img.shields.io/github/stars/tj/commander.js" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/yargs/yargs" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/minimistjs/minimist" alt="Stars"></td>
<td><img src="https://img.shields.io/github/stars/oclif/oclif" alt="Stars"></td>
</tr>
<tr>
<td><strong>Popularity</strong></td>
<td>Very popular, widely used</td>
<td>Very popular, established</td>
<td>Older but still widely used</td>
<td>Newer, gaining some traction</td>
</tr>
<tr>
<td><strong>Released</strong></td>
<td>Regularly</td>
<td>Not relesed since 2023</td>
<td>Not relesed since 2023</td>
<td>Regularly</td>
</tr>
<tr>
<td><strong>Maintainers</strong></td>
<td>Actively maintained by TJ Holowaychuk</td>
<td>Actively maintained by the yargs team</td>
<td>Maintained by Jordan Harband</td>
<td>Maintained by Salesforce</td>
</tr>
<tr>
<td><strong>Contributors</strong></td>
<td><img src="https://img.shields.io/github/contributors/tj/commander.js" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/yargs/yargs" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/minimistjs/minimist" alt="Contributors"></td>
<td><img src="https://img.shields.io/github/contributors/oclif/oclif" alt="Contributors"></td>
</tr>
<tr>
<td><strong>Issues</strong></td>
<td><img src="https://img.shields.io/github/issues/tj/commander.js" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/yargs/yargs" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/minimistjs/minimist" alt="Open Issues"></td>
<td><img src="https://img.shields.io/github/issues/oclif/oclif" alt="Open Issues"></td>
</tr>
<tr>
<td><strong>Npm</strong></td>
<td><img src="https://img.shields.io/npm/dw/commander" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/yargs" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/minimist" alt="Download"></td>
<td><img src="https://img.shields.io/npm/dw/oclif" alt="Download"></td>
</tr>
<tr>
<td><strong>Dependencies</strong></td>
<td>0 dependency</td>
<td>7 dependencies</td>
<td>0 dependency</td>
<td>24 dependencies</td>
</tr>
<tr>
<td><strong>Install size</strong></td>
<td><img src="https://packagephobia.now.sh/badge?p=commander" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=yargs" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=minimist" alt="Install Size"></td>
<td><img src="https://packagephobia.now.sh/badge?p=oclif" alt="Install Size"></td>
</tr>
</tbody>
</table>
<br/>
<img src="img/commander-yargs-minimist-oclif.png" alt="commander-yargs-minimist-oclif" loading="lazy">
<figcaption style="font-size: 0.8em; color: gray; margin-top: 4px; text-align: center;">Image from npmtrends.com</figcaption>
<br/>
<p><strong>Oclif</strong> is an interesting option for generating CLI applications, but it’s not well-suited for our needs. At 22.6 MB, it’s too heavy for what we require. It’s better suited for building standalone programs rather than being used as a lightweight library within a project.</p>
<p><strong>Minimist</strong>, on the other hand, is very small but too simple for our requirements. It lacks several features we need, such as subcommands, helpers, and similar-suggest support. Additionally, its documentation is quite poor, which makes it harder, less clearly to work with.</p>
<p>Both of <strong>yargs</strong> and <strong>commander.js</strong> are the better choice for us. Both libraries are widely used, and their documentation is good. We have used <code>yargs</code> in some projects, and while it works fine, we often run into typing issues when writing <code>yargs</code> commands in async TypeScript code. Using <code>commander.js</code> provided a better development experience overall. It offers simpler syntax, a clean and straightforward API, great TypeScript support (via <code>@commander-js/extra-typings</code>), built-in features like command suggestions, and a small footprint with zero dependencies.</p>
<p>So, this time, we chose <code>commander</code>.</p>
<h2 id="examples-of-migrations">Examples of migrations</h2>
<p>Now that we've picked the tools, let's look at some migration examples. These examples will show you how we moved from using makefile to our new system. Knowing these changes will help you understand the feedback in the next part better and make it more relevant.</p>
<ol>
<li><strong>Linting</strong></li>
</ol>
<p>In the example below, we’re migrating a linting script from <code>make</code> to <code>execa</code> in a Node.js script. The migration process consists of two parts:</p>
<ul>
<li>Writing the script with the shell scripting logic, here using <code>execa</code> for executing commands</li>
<li>Creating the CLI commands with <code>commander</code> to handle options and arguments.</li>
</ul>
<p><strong>makefile</strong>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">FORMAT_FILE_EXTENSIONS</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">(</span>ts|js|cjs|mjs|json|yaml|yml<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">FOLDER_TO_FORMAT</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">(</span>app|aws|conf|types|mocks|tests<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ALL_FORMAT_FILES</span> <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;*.${FORMAT_FILE_EXTENSIONS}&#39;</span> <span style="color:#f1fa8c">&#39;${FOLDER_TO_FORMAT}/**/*.${FORMAT_FILE_EXTENSIONS}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lint: <span style="color:#6272a4">##@lint Lint all ts, js, yaml, json and feature files</span>
</span></span><span style="display:flex;"><span>    @make eslint
</span></span><span style="display:flex;"><span>    @make prettier
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>eslint: <span style="color:#6272a4">##@lint Run eslint</span>
</span></span><span style="display:flex;"><span>    @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">YELLOW</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">Running eslint</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>    ifdef CI
</span></span><span style="display:flex;"><span>        @npx eslint <span style="color:#f1fa8c">&#34;{app,tests,scripts}/**/*.{ts,js,cjs,mjs}&#34;</span> --quiet --cache
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">else</span>
</span></span><span style="display:flex;"><span>        @npx eslint <span style="color:#f1fa8c">&#34;{app,tests,scripts}/**/*.{ts,js,cjs,mjs}&#34;</span> --quiet --cache --fix
</span></span><span style="display:flex;"><span>    endif
</span></span><span style="display:flex;"><span> @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">GREEN</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">✔ Well done!</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prettier: <span style="color:#6272a4">##@lint Run prettier on json and yaml files</span>
</span></span><span style="display:flex;"><span>    @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">YELLOW</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">Running prettier</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>    ifdef CI
</span></span><span style="display:flex;"><span>        @npx prettier <span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">ALL_FORMAT_FILES</span><span style="color:#f1fa8c">}</span> --log-level warn --check --cache --cache-location<span style="color:#ff79c6">=</span>.prettiercache --cache-strategy<span style="color:#ff79c6">=</span>metadata
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">else</span>
</span></span><span style="display:flex;"><span>        @npx prettier <span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">ALL_FORMAT_FILES</span><span style="color:#f1fa8c">}</span> --log-level warn --write --cache --cache-location<span style="color:#ff79c6">=</span>.prettiercache --cache-strategy<span style="color:#ff79c6">=</span>metadata
</span></span><span style="display:flex;"><span>    endif
</span></span><span style="display:flex;"><span>    @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">GREEN</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">✔ Well done! You can check the changed files with command git status.</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span></code></pre><p>The makefile defines tasks for running linting with <strong>eslint</strong> and <strong>prettier</strong>. It uses <code>make</code> commands to manage different environments (local/CI).</p>
<p><strong>Execa migration</strong>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env node
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { $ } from <span style="color:#f1fa8c">&#39;execa&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { Command } from <span style="color:#f1fa8c">&#39;commander&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { inherit, printExecaError } from <span style="color:#f1fa8c">&#39;./helper/execa.mjs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { colors } from <span style="color:#f1fa8c">&#39;./helper/colors.mjs&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> ESLINT_FILES <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;{app,tests,scripts}/**/*.{ts,js,cjs,mjs}&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> PRETTIER_FILES <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;{app,aws,conf,types,mocks,tests}/**/*.{ts,js,cjs,mjs,json,yml,yaml}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> runEslint <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ({ fix, files }) =&gt; {
</span></span><span style="display:flex;"><span>    console.log(colors.yellow(<span style="color:#f1fa8c">&#39;Running eslint&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $(inherit)<span style="color:#f1fa8c">`yarn eslint </span><span style="color:#f1fa8c">${</span>files<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> --quiet --cache </span><span style="color:#f1fa8c">${</span>fix <span style="color:#ff79c6">?</span> <span style="color:#f1fa8c">&#39;--fix&#39;</span> <span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;&#39;</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#ff79c6">catch</span>((error) =&gt; printExecaError(error))
</span></span><span style="display:flex;"><span>        .then(() =&gt; console.log(colors.green(<span style="color:#f1fa8c">&#39;✔ Well done!&#39;</span>)))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> runPrettier <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ({ fix, files }) =&gt; {
</span></span><span style="display:flex;"><span>    console.log(colors.yellow(<span style="color:#f1fa8c">&#39;Running prettier&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $(
</span></span><span style="display:flex;"><span>        inherit,
</span></span><span style="display:flex;"><span>    )<span style="color:#f1fa8c">`yarn prettier </span><span style="color:#f1fa8c">${</span>files<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> --log-level warn --cache --cache-location=.prettiercache --cache-strategy=metadata </span><span style="color:#f1fa8c">${</span>
</span></span><span style="display:flex;"><span>        fix <span style="color:#ff79c6">?</span> <span style="color:#f1fa8c">&#39;--write&#39;</span> <span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;--check&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#ff79c6">catch</span>((error) =&gt; printExecaError(error))
</span></span><span style="display:flex;"><span>        .then(() =&gt;
</span></span><span style="display:flex;"><span>            console.log(
</span></span><span style="display:flex;"><span>                colors.green(
</span></span><span style="display:flex;"><span>                    <span style="color:#f1fa8c">&#39;✔ Well done! You can check the changed files with command git status.&#39;</span>,
</span></span><span style="display:flex;"><span>                ),
</span></span><span style="display:flex;"><span>            ),
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> runLint <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ({ fix }) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> runEslint({ fix, files<span style="color:#ff79c6">:</span> ESLINT_FILES })
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> runPrettier({ fix, files<span style="color:#ff79c6">:</span> PRETTIER_FILES })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/********************************** CLI ******************************************/</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> program <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> Command()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program
</span></span><span style="display:flex;"><span>    .command(<span style="color:#f1fa8c">&#39;eslint&#39;</span>)
</span></span><span style="display:flex;"><span>    .description(<span style="color:#f1fa8c">&#39;Run Eslint&#39;</span>)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;-f, --files &lt;file-glob-pattern&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Eslint files&#39;</span>, ESLINT_FILES)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;--fix &lt;boolean&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Fix option&#39;</span>, <span style="color:#ff79c6">true</span>)
</span></span><span style="display:flex;"><span>    .action(runEslint)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program
</span></span><span style="display:flex;"><span>    .command(<span style="color:#f1fa8c">&#39;prettier&#39;</span>)
</span></span><span style="display:flex;"><span>    .description(<span style="color:#f1fa8c">&#39;Run Prettier&#39;</span>)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;-f, --files &lt;file-glob-pattern&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Eslint files&#39;</span>, PRETTIER_FILES)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;--fix &lt;boolean&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Fix option&#39;</span>, <span style="color:#ff79c6">true</span>)
</span></span><span style="display:flex;"><span>    .action(runPrettier)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program
</span></span><span style="display:flex;"><span>    .command(<span style="color:#f1fa8c">&#39;lint&#39;</span>)
</span></span><span style="display:flex;"><span>    .description(<span style="color:#f1fa8c">&#39;Run Eslint &amp; Prettier&#39;</span>)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;--fix &lt;boolean&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Fix option&#39;</span>, <span style="color:#ff79c6">true</span>)
</span></span><span style="display:flex;"><span>    .action(runLint)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program.parse(process.argv)
</span></span></code></pre><p>In the JavaScript version, we replicate what we did in the makefile. We write the code in ESM syntax, define the variables, and create the logic for the tasks (such as linting and formatting). These tasks are migrated into a JavaScript file that uses <code>execa</code> to run the commands. The shorthand syntax <code>$</code> of execa makes it really handy and easy to execute all the shell commands.</p>
<p>For each task, we use the <code>Command</code> API from <code>commander</code> to define a command that is equivalent to the ones in the makefile, using the <code>program.command()</code> syntax. We can also add options or required arguments for each command, just like we would define flags or variables in a makefile.</p>
<p>In that example, we created a helper function, <code>printExecaError</code>, to improve how errors are printed to the terminal. By default, when using <code>execa</code> or any JS shell tools, we get verbose JS error outputs that can be hard to read. To address this, we ensure that only the root cause of the shell error is displayed, which makes the error more understandable and readable.</p>
<p>As you can see, the JavaScript solution is much longer than the makefile version. However, there is one major advantage: the JavaScript approach provides more flexibility for handling complex conditions, custom logic, and error handling.</p>
<ol start="2">
<li><strong>Testing</strong></li>
</ol>
<p><strong>makefile</strong>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>test-unit: <span style="color:#6272a4">##@test Run unit tests</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">YELLOW</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">Running unit tests</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span> @yarn mocha <span style="color:#f1fa8c">&#39;tests/unit/**/*.[tj]s&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>test-func: <span style="color:#6272a4">##@test Run functional test. To add args to veggies, use args env var. &#39;args=&#34;--tags @tag1 --tags @tag2&#34; make test-func&#39;</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">YELLOW</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">Loading stack into test mode</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">RESET</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span> @make sync-docker-stack <span style="color:#8be9fd;font-style:italic">CONF_FILES</span><span style="color:#ff79c6">=</span>local,test
</span></span><span style="display:flex;"><span> @make make-in-app <span style="color:#8be9fd;font-style:italic">MAKE_RULE</span><span style="color:#ff79c6">=</span>wait-app-up
</span></span><span style="display:flex;"><span> @make make-in-app <span style="color:#8be9fd;font-style:italic">MAKE_RULE</span><span style="color:#ff79c6">=</span>veggies-cmd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>veggies-cmd: <span style="color:#6272a4">##@test Run veggies command</span>
</span></span><span style="display:flex;"><span> @yarn veggies --format-options <span style="color:#f1fa8c">&#39;{&#34;colorsEnabled&#34;: true}&#39;</span> --require tests/functional/support tests/functional/features <span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">args</span><span style="color:#f1fa8c">}</span>
</span></span></code></pre><p>In the <code>makefile</code>, we define 3 commands to execute unit tests (with Mocha) and functional tests (using <a href="https://github.com/ekino/veggies">@ekino/veggies</a>, a Cucumber helper). For the functional tests, we run the tests inside a Node.js container. The following methods are used to achieve this:</p>
<ul>
<li><code>sync-docker-stack</code>: This command starts or resets all services in the Docker Compose setup.</li>
<li><code>make-in-app</code>: This command runs a specific task inside the <code>app</code> container.</li>
</ul>
<p>Starting docker compose services and restarting the server usually takes a significant amount of time. Therefore, we need some logic to check if the application is ready to accept requests. We use the command <code>wait-app-up</code> to check if <code>localhost:3000</code> is up and running.</p>
<p><strong>Execa migration</strong>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env node
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">import</span> { $ } from <span style="color:#f1fa8c">&#39;execa&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { Command } from <span style="color:#f1fa8c">&#39;commander&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { execInContainer, printExecaError } from <span style="color:#f1fa8c">&#39;./helper/execa.mjs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { colors } from <span style="color:#f1fa8c">&#39;./helper/colors.mjs&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> testUnit <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ({ files }) =&gt; {
</span></span><span style="display:flex;"><span>    console.log(colors.yellow(<span style="color:#f1fa8c">&#39;Running unit tests&#39;</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $({ stdio<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;inherit&#39;</span> })<span style="color:#f1fa8c">`yarn mocha </span><span style="color:#f1fa8c">${</span>files<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>.<span style="color:#ff79c6">catch</span>((error) =&gt; printExecaError(error))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> testFunc <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ({ args }) =&gt; {
</span></span><span style="display:flex;"><span>    console.log(colors.yellow(<span style="color:#f1fa8c">&#39;Running functional tests&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> cmd <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`yarn veggies --format-options &#34;{\\&#34;colorsEnabled\\&#34;: true}&#34; --require tests/functional/support tests/functional/features </span><span style="color:#f1fa8c">${</span>args<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> execInContainer({ containerName<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;app&#39;</span>, command<span style="color:#ff79c6">:</span> cmd }).<span style="color:#ff79c6">catch</span>((error) =&gt;
</span></span><span style="display:flex;"><span>        printExecaError(error),
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/********************************** CLI ******************************************/</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> program <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> Command()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program
</span></span><span style="display:flex;"><span>    .command(<span style="color:#f1fa8c">&#39;unit&#39;</span>)
</span></span><span style="display:flex;"><span>    .description(<span style="color:#f1fa8c">&#39;Execute unit tests&#39;</span>)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;-f, --files &lt;file-glob-pattern&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Tests files&#39;</span>, <span style="color:#f1fa8c">&#39;tests/unit/**/*.{ts,js,mjs}&#39;</span>)
</span></span><span style="display:flex;"><span>    .action(testUnit)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program
</span></span><span style="display:flex;"><span>    .command(<span style="color:#f1fa8c">&#39;func&#39;</span>)
</span></span><span style="display:flex;"><span>    .description(<span style="color:#f1fa8c">&#39;Execute functional tests&#39;</span>)
</span></span><span style="display:flex;"><span>    .option(<span style="color:#f1fa8c">&#39;-a, --args &lt;args&gt;&#39;</span>, <span style="color:#f1fa8c">&#39;Veggies args&#39;</span>)
</span></span><span style="display:flex;"><span>    .action(testFunc)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>program.parse(process.argv)
</span></span></code></pre><p>In the JS version, we've simplified many of the principles. Locally, we've implemented Kubernetes to replace docker compose (using the same architecture and technologies as on the cloud with EKS). As a result, we no longer need the logic like <code>sync-docker-stack</code> to start or restart docker compose services, or the <code>wait-app-up</code> command.</p>
<p>Instead, we've adapted the Kubernetes commands to run separately. Restarting pods in Kubernetes is much faster, and the server is always up after the command reset pods finish. That's why you see simpler logic in the JS files. The only helper command we need now is <code>execInContainer</code>, which executes commands within a Kubernetes container.</p>
<h2 id="feedbacks">Feedbacks</h2>
<p>We've provided a lot of details about our research up to this point. Thanks for sticking with us!</p>
<p>Everything we've talked about might seem quite theoretical, and you can find similar information online. However, in some articles about migration, I find it really helpful to hear about real life experiences, the challenges people face when they migrate a solution from X to Y. I think many of you might feel the same way (I hope you do!)</p>
<p>After doing this research and choosing the tools for our project, we still had many things to think about:</p>
<ul>
<li>Why should we migrate?</li>
<li>How to migrate and how long will It take?</li>
<li>Do we need to migrate all the existing makefile, or not?</li>
<li>What problems will we encounter?</li>
<li>Should we keep two systems running in parallel?</li>
<li>What are the pros and cons of this migration?</li>
</ul>
<p>At the time of writing this article, we haven’t migrated everything yet. We’ve only migrated some parts and want to gather feedback from each team member to see what they think about the process.</p>
<h3 id="our-context-of-this-migration">Our context of this migration</h3>
<p>In fact, we did this research while migrating from Docker Compose to Kubernetes using Helm. Since we use makefile a lot for writing scripts for manipulating with Docker, rewriting all of that code could be a huge challenge. It would take a lot of time and effort, especially to avoid breaking changes in the existing scripts.</p>
<p>That's why we considered it a good idea to start creating scripting tools in JavaScript for managing Kubernetes scripts. As mentioned before, we selected <code>execa</code> and <code>commander</code> for our scripting needs.</p>
<p>We started writing all the Kubernetes scripts, including those for testing, performance with K6, Sonar analysis, and coverage scripts, because these scripts also run within containers. Thus, we needed to test each command to ensure it works with Kubernetes and that our local Kubernetes setup is operating correctly.</p>
<p>Having completed this process, I believe we now have some interesting experience to share a more detailed account of our migration.</p>
<h3 id="why-migrate">Why migrate?</h3>
<p>I’ve already mentioned some reasons earlier in the article, but now the question is: should you migrate as well?</p>
<p>The decision to migrate depends on your team’s needs and expertise. If you have a lot of experience with Bash scripts and makefile, you might find our approach to be more complicated than necessary, or even a bit excessive. It’s true that JavaScript syntax is much more verbose than Bash or makefile. To achieve the same results, you often need to write significantly more JavaScript code. <strong>We totally get that! It’s one of the reasons we love makefile</strong>. In the future, we might also look at other options like <code>justfile</code>.</p>
<p>However, if not everyone on your team is proficient with shell scripting, our proposed solution might be a better alternative. JavaScript can work well for bash scripting tasks, and you can even embed Bash scripts in your JavaScript if you prefer.</p>
<h3 id="how-to-migrate-and-timing">How to migrate and timing?</h3>
<p>This depends on your project. If your existing scripts are complex, it might be better to migrate them over slowly, one set of task with same logic, same utility at a time (example: linting, testing, deploy...). This approach will make it easier to control the process and better organize the code. Migrating in different steps also gives you time to test the new approach and see if it fits your project. Before starting, make sure you fully understand how your existing scripts work and what they do.</p>
<p>As for how long it will take, it really depends on your experience. The process might be fast for some or take longer for others, but you should avoid letting this migration affect production or sprint deadlines.</p>
<h3 id="should-we-migrate-everything">Should we migrate everything?</h3>
<p>Ideally, it’s best to have only one scripting system in your project for easier maintenance.</p>
<p>In our case, we have a lot of scripts, and we want to migrate all of them. But we also have deployment/release scripts that integrate with our GitLab CI. Often, it’s us (the backend engineers) writing these scripts, but sometimes our DevOps engineers will work with us, they will take some modifications or create new ones in makefile to handle cloud changes or blue/green deployments... Not everyone on that team is familiar with JavaScript. So, migrating everything to JavaScript might create some problems for them. We need to negotiate with all teams and come to an agreement about the migration.</p>
<h3 id="why-didnt-we-use-the-built-in-nodejs-module">Why didn't we use the built-in Node.js module?</h3>
<p>As we already know that Node.js also support some utils for execute shell commands and support command line as <code>child_process</code>, <code>parseArgs</code> de <code>node:util</code>. So why didn't we use these instead of adding more dependencies to our project?</p>
<p>The answer is pretty simple: their syntax and usability are not as user-friendly as we would like, making them harder to work with and requiring more effort to achieve our goals.</p>
<p>For example, <code>child_process</code> is already wrapped by the libraries like <code>zx</code>, <code>execa</code>, and <code>shelljs</code>. They provide additional features, utilities, and much cleaner syntax and much easy to use (such as the shorthand <code>$</code>). On the other hand, <code>parseArgs</code> only handles very basic tasks and lacks the flexibility needed for more complex command-line parsing. You can read more about this in <a href="https://bjornlu.com/blog/im-tired-of-node-builtin-apis">this issue discussion</a> and <a href="https://bjornlu.com/blog/im-tired-of-node-b">this article</a>.</p>
<h3 id="problems-encountered-during-the-migration">Problems encountered during the migration?</h3>
<ul>
<li>
<p><em>Run scripts are less flexible</em></p>
<p>With JavaScript, running scripts isn’t as flexible as with makefile.</p>
<p>For example, you can run a script in the following ways:</p>
<ul>
<li>
<p><code>node scripts/lint.js lint</code> (using any JS runtime like <code>bun</code>, <code>deno</code>, etc.)</p>
</li>
<li>
<p><code>./scripts/lint.js lint</code> (if you’ve added the appropriate shebang at the top of the JS file: <code>#!/usr/bin/env node</code>)</p>
</li>
<li>
<p>Or, if you add the script to <code>package.json</code>, you can use your package manager: <code>npm run lint</code>, <code>pnpm run lint</code>, etc.</p>
<pre><code>                    While this works, it’s not as flexible as using `make lint`, and adding many commands to `package.json` can make it longer and more verbose.
</code></pre>
</li>
</ul>
</li>
<li>
<p><em>JavaScript code is more verbose, bigger code base</em></p>
<p>As mentioned earlier, JavaScript code tends to be much longer than makefile code.</p>
</li>
<li>
<p><em>Manually writing global helpers</em></p>
<p>In makefile, we can create helper functions and use <code>perl</code> or other tools to automatically detect all public commands and print their descriptions (via comments added to each command). By simply typing <code>make help</code> or <code>make</code> (if the help command is set as the default), all existing commands are listed with explanations. This is incredibly practical and convenient.</p>
<p>However, in JavaScript, we use the <code>commander</code>library for handling scripts. While <code>commander</code> provides built-in support for generating helpers for each <code>program</code> (or script module), it is limited to single files or modules. It does not support generating helpers for commands spread across multiple files. Even if we attempt to group multiple <code>program</code> instances together by importing them, it doesn’t work as expected—the help function will only display commands from the first imported file.</p>
<p>To achieve the same <code>make help</code> functionality,, we would have to manually list all the commands from each script file. This is time-consuming and not as efficient. I hope we can find a better solution in the future.</p>
</li>
<li>
<p><em>Increased dependencies</em></p>
<p>One downside of migrating to JavaScript is the need for more dependencies. Each new library you install adds to the project’s dependencies, which can increase the maintenance burden over time. Since we’re using a lot of dependencies in our project, adding more in devDependencies isn’t a big deal for us, but it's something to consider.</p>
</li>
<li>
<p><em>Error handling is more complex</em></p>
<p>from <code>execa</code>. This makes error handling less intuitive and more verbose.</p>
</li>
</ul>
<h3 id="whats-good-about-this-migration">What’s good about this migration?</h3>
<p>One major benefit of this migration is that all team members now have a better understanding of how each script works and what it does.</p>
<p>For example, when we wrote our K6 performance testing scripts, which involve Grafana, InfluxDB, WireMock, and mock servers, it took us a lot of time to set up the makefile and Bash scripts with all the helpers, complex arguments, loops, and conditions. Reading and understanding that code wasn’t always easy.</p>
<p>With the same logic implemented in JavaScript, we can now write it much more clearly and maintainably. This is a big win for us, it’s a motivating factor for the team.</p>
<p>Despite its limitations, the team voted to proceed with the migration after completing a proof of concept (POC). While JavaScript requires more lines of code than <code>bash</code> or <code>make</code>, we think it can save us time when fixing issues, making updates, or trying to understand the code in the future.</p>
<p>This research also gave us the chance to rethink our whole script system. We took the time to look at every script, understand exactly what it does, and figure out if we could improve it. That helped us clean up and optimize parts of our system.</p>
<p>Now, we have more ideas and options to fit different projects and situations. This process has been a great learning experience for the whole team.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When should you use makefile?</p>
<ul>
<li>Your team loves makefile, and you have significant experience with it.</li>
<li>You're working with simple scripts that don't require much conditional logic, argument handling, or complex environments.</li>
<li>You don't need to handle asynchronous or parallel tasks.</li>
<li>Your CI/CD, Docker, and deployment systems already support makefile.</li>
<li>You need a fast solution for simple tasks.</li>
</ul>
<p>If these conditions don't apply, you might want to consider using the JavaScript approach we discussed.</p>
<p>In short, <code>make</code> is great for simple tasks, but for more complex scripts requiring helpers, conditionals, async operations, or detailed error handling, JavaScript can be a better fit.</p>
<hr>
<p>Article originally published at <a href="https://medium.com/ekino-france/scripting-tools-a-node-js-friendly-alternative-to-makefile-45efb7fe23ee">medium.com</a></p>
]]></content>
    <link href="/blog/scripting-tools/"></link>
    <category>scripting</category>
    <category>makefile</category>
    <category>nodejs</category>
    <category>typescript</category>
    <category>shell</category>
  </entry>
  <entry>
    <title>[Note] Display colors in Makefile</title>
    <id>/notes/display-colors-makefile/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-23T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="display-colors-in-makefile">Display colors in Makefile</h1>
<p>In a previous <a href="/notes/make-display-helper">note</a>, I shared how to create a <code>help</code> command in a Makefile.</p>
<p>This time, let’s make it visually appealing by adding colors to the output.</p>
<p>Here’s how to do it:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># COLORS</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">YELLOW</span> <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">\0</span>33<span style="color:#ff79c6">[</span>33m
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">GREEN</span>  <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">\0</span>33<span style="color:#ff79c6">[</span>32m
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">WHITE</span>  <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">\0</span>33<span style="color:#ff79c6">[</span>37m
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">RESET</span>  <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">\0</span>33<span style="color:#ff79c6">[</span>0m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>help: <span style="color:#6272a4">##@helper Display all commands and descriptions</span>
</span></span><span style="display:flex;"><span>	@awk <span style="color:#f1fa8c">&#39;BEGIN {FS = &#34;:.*##@&#34;; printf &#34;\n${WHITE}Usage:${RESET}\n  make &lt;target&gt;\n&#34;} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	/^[.a-zA-Z_-]+:.*?##@/ { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		split($$2, parts, &#34; &#34;); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		section = parts[1]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		description = substr($$2, length(section) + 2); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		sections[section] = sections[section] sprintf(&#34;  ${YELLOW}%-15s${RESET} ${GREEN}%s${RESET}\n&#34;, $$1, description); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	END { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		for (section in sections) { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;\n${WHITE}%s${RESET}\n&#34;, section; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;%s&#34;, sections[section]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	}&#39;</span> <span style="color:#ff79c6">$(</span>MAKEFILE_LIST<span style="color:#ff79c6">)</span>
</span></span></code></pre><ul>
<li><code>YELLOW</code>, <code>GREEN</code>, <code>WHITE</code>, and <code>RESET</code> are ANSI escape codes for terminal colors.</li>
<li><code>\033[33m</code> sets the color to yellow, <code>\033[32m</code> to green, and <code>\033[37m</code> to white.</li>
<li><code>\033[0m</code> resets the color to the terminal default.</li>
</ul>
<p>It formats the output with colors:</p>
<ul>
<li>Yellow for target names.</li>
<li>Green for descriptions.</li>
<li>White for the rest</li>
</ul>
]]></content>
    <link href="/notes/display-colors-makefile/"></link>
  </entry>
  <entry>
    <title>[Note] Display all Makefile commands</title>
    <id>/notes/make-display-helper/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-22T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="display-all-makefiles-commands">Display all Makefiles commands</h1>
<p>Makefiles can be hard to navigate, especially as they grow. Adding a help command makes it easy to see all available targets and their purposes.</p>
<h2 id="the-magic-help-target">The magic <code>help</code> target</h2>
<p>Add this <code>awk</code> snippet to your <code>Makefile</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>.DEFAULT_GOAL :<span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">help</span>
</span></span><span style="display:flex;"><span>.PHONY: <span style="color:#8be9fd;font-style:italic">help</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>help: <span style="color:#6272a4">##@helper Display all commands and descriptions</span>
</span></span><span style="display:flex;"><span>	@awk <span style="color:#f1fa8c">&#39;BEGIN {FS = &#34;:.*##@&#34;; printf &#34;\nUsage:\n  make &lt;target&gt;\n&#34;} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	/^[.a-zA-Z_-]+:.*?##@/ { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		split($$2, parts, &#34; &#34;); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		section = parts[1]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		description = substr($$2, length(section) + 2); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		sections[section] = sections[section] sprintf(&#34;  \033[36m%-15s\033[0m %s\n&#34;, $$1, description); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	END { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		for (section in sections) { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;\n\033[1m%s\033[0m\n&#34;, section; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;%s&#34;, sections[section]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	}&#39;</span> <span style="color:#ff79c6">$(</span>MAKEFILE_LIST<span style="color:#ff79c6">)</span>
</span></span></code></pre><h2 id="how-it-works">How it works</h2>
<ul>
<li>Use <code>##@</code> to group related targets</li>
<li>And place the description of each command after that group</li>
</ul>
<h2 id="example-makefile">Example Makefile</h2>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>help: <span style="color:#6272a4">##@helper Display all commands and their descriptions</span>
</span></span><span style="display:flex;"><span>	@awk <span style="color:#f1fa8c">&#39;BEGIN {FS = &#34;:.*##@&#34;; printf &#34;\nUsage:\n  make &lt;target&gt;\n&#34;} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	/^[.a-zA-Z_-]+:.*?##@/ { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		split($$2, parts, &#34; &#34;); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		section = parts[1]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		description = substr($$2, length(section) + 2); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		sections[section] = sections[section] sprintf(&#34;  \033[36m%-15s\033[0m %s\n&#34;, $$1, description); \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	END { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		for (section in sections) { \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;\n\033[1m%s\033[0m\n&#34;, section; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">			printf &#34;%s&#34;, sections[section]; \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">		} \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">	}&#39;</span> <span style="color:#ff79c6">$(</span>MAKEFILE_LIST<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># You can split this in a separated file: validate.Makefile</span>
</span></span><span style="display:flex;"><span>install: <span style="color:#6272a4">##@validate Install dependencies</span>
</span></span><span style="display:flex;"><span>	@pnpm install
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>typecheck: <span style="color:#6272a4">##@validate Check static types</span>
</span></span><span style="display:flex;"><span>	@pnpm tsc --noEmit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lint: <span style="color:#6272a4">##@validate Lint the codebase</span>
</span></span><span style="display:flex;"><span>	@pnpm run lint
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>test: <span style="color:#6272a4">##@validate Run tests</span>
</span></span><span style="display:flex;"><span>	@pnpm run <span style="color:#8be9fd;font-style:italic">test</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># You can split this in a separated file: deploy.Makefile</span>
</span></span><span style="display:flex;"><span>build: <span style="color:#6272a4">##@deploy Build for production</span>
</span></span><span style="display:flex;"><span>	@pnpm run build
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>deploy: <span style="color:#6272a4">##@deploy Deploy to production</span>
</span></span><span style="display:flex;"><span>	@pnpm run deploy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.PHONY: <span style="color:#8be9fd;font-style:italic">help</span> install typecheck lint <span style="color:#8be9fd;font-style:italic">test</span> build deploy
</span></span><span style="display:flex;"><span>.DEFAULT_GOAL :<span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">help</span>
</span></span></code></pre><p>Running <code>make</code> or <code>make help</code> shows:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>❯ make
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Usage:
</span></span><span style="display:flex;"><span>  make &lt;target&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>deploy
</span></span><span style="display:flex;"><span>  build           Build <span style="color:#ff79c6">for</span> production
</span></span><span style="display:flex;"><span>  deploy          Deploy to production
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helper
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">help</span>            Display all commands and their descriptions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>validate
</span></span><span style="display:flex;"><span>  install         Install dependencies
</span></span><span style="display:flex;"><span>  typecheck       Check static types
</span></span><span style="display:flex;"><span>  lint            Lint the codebase
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">test</span>            Run tests
</span></span></code></pre>]]></content>
    <link href="/notes/make-display-helper/"></link>
  </entry>
  <entry>
    <title>[Note] Supercharge Git with fzf</title>
    <id>/notes/combine-git-fzf/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-21T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="supercharge-git-with-fzf">Supercharge Git with fzf</h1>
<p>Working with Git branches can be annoying, especially with long names or when cleaning up old ones. Try <strong><a href="https://github.com/junegunn/fzf">fzf</a></strong>, a tool that makes managing branches easy.</p>
<h2 id="switch-branches">Switch branches</h2>
<p>Use <code>fzf</code> to select and switch branches interactively:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git branch | fzf --preview <span style="color:#f1fa8c">&#39;git log -p main..{-1} --color=always {-1}&#39;</span> | cut -c 3- | xargs git switch
</span></span></code></pre><h2 id="delete-branches">Delete branches</h2>
<p>Delete branch interactively with <code>fzf</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git branch | fzf -m --preview <span style="color:#f1fa8c">&#39;git log -p main..{-1} --color=always {-1}&#39;</span> | cut -c 3- | xargs git branch -d
</span></span></code></pre><p>I setup them in my shell config to save time:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gs</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git switch&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gsc</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git witch -c&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gsi</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git branch | fzf --preview &#39;git log -p main..{-1} --color=always {-1}&#39; | cut -c 3- | xargs git switch&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gbd</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git branch | fzf -m --preview &#39;git log -p main..{-1} --color=always {-1}&#39; | cut -c 3- | xargs git branch -d&#34;</span>
</span></span></code></pre>]]></content>
    <link href="/notes/combine-git-fzf/"></link>
  </entry>
  <entry>
    <title>[Note] Better Git log</title>
    <id>/notes/git-log-better/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-20T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="better-git-log">Better Git log</h1>
<p>The default <code>git log</code> output can be hard to read. Here’s how I make it more visual and informative using aliases.</p>
<ul>
<li>Add these aliases to the global <code>.gitconfig</code>:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">[</span>alias<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Tree-like log with relative dates</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">logs</span> <span style="color:#ff79c6">=</span> log --graph --date<span style="color:#ff79c6">=</span>relative --pretty<span style="color:#ff79c6">=</span>tformat:<span style="color:#f1fa8c">&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Limit to 20 commits</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">log</span> <span style="color:#ff79c6">=</span> logs -n <span style="color:#bd93f9">20</span>
</span></span></code></pre><ul>
<li>Alternatively, set up aliases in your shell config:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">glog</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git log --graph --date=relative --pretty=tformat:&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset&#39; -n 20&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">glogs</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git log --graph --date=relative --pretty=tformat:&#39;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset&#39;&#34;</span>
</span></span></code></pre><ul>
<li>Example output</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>* c0eb700 - <span style="color:#ff79c6">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span style="color:#ff79c6">)</span> chore<span style="color:#ff79c6">(</span>fish<span style="color:#ff79c6">)</span>: update <span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#ff79c6">(</span>woula <span style="color:#bd93f9">26</span> minutes ago<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>* 960e14f - chore<span style="color:#ff79c6">(</span>nvim<span style="color:#ff79c6">)</span>: update plugins, active flash, disable cappuchine <span style="color:#ff79c6">(</span>woula <span style="color:#bd93f9">16</span> hours ago<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>* bc1129d - feat<span style="color:#ff79c6">(</span>nvim<span style="color:#ff79c6">)</span>: add disabled plugins list <span style="color:#ff79c6">(</span>woula <span style="color:#bd93f9">3</span> days ago<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>* 6e14bad - feat<span style="color:#ff79c6">(</span>nix<span style="color:#ff79c6">)</span>: update config <span style="color:#ff79c6">for</span> homebrew <span style="color:#ff79c6">(</span>woula <span style="color:#bd93f9">5</span> days ago<span style="color:#ff79c6">)</span>
</span></span></code></pre><p>That is a little bit better than this:
<code>git log --graph --oneline --decorate --all</code></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>❯ git log --graph --oneline --decorate --all
</span></span><span style="display:flex;"><span>* c0eb700 <span style="color:#ff79c6">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span style="color:#ff79c6">)</span> chore<span style="color:#ff79c6">(</span>fish<span style="color:#ff79c6">)</span>: update <span style="color:#8be9fd;font-style:italic">alias</span>
</span></span><span style="display:flex;"><span>* 960e14f chore<span style="color:#ff79c6">(</span>nvim<span style="color:#ff79c6">)</span>: update plugins, active flash, disable cappuchine
</span></span><span style="display:flex;"><span>* bc1129d chore<span style="color:#ff79c6">(</span>nvim<span style="color:#ff79c6">)</span>: recrete list of disabled plugins
</span></span><span style="display:flex;"><span>* 6e14bad feat<span style="color:#ff79c6">(</span>nix<span style="color:#ff79c6">)</span>: update config <span style="color:#ff79c6">for</span> homebrew
</span></span><span style="display:flex;"><span>
</span></span></code></pre><p>And a lot more readable than the default: <code>git log</code></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>❯ git log
</span></span><span style="display:flex;"><span>* c0eb700 <span style="color:#ff79c6">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span style="color:#ff79c6">)</span> chore<span style="color:#ff79c6">(</span>fish<span style="color:#ff79c6">)</span>: update <span style="color:#8be9fd;font-style:italic">alias</span>
</span></span><span style="display:flex;"><span>commit c0eb700 <span style="color:#ff79c6">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>Author: woula &lt;woula@awesome.com&gt;
</span></span><span style="display:flex;"><span>Date:   Sun Jan <span style="color:#bd93f9">26</span> 10:02:37 <span style="color:#bd93f9">2025</span> +0100
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    chore<span style="color:#ff79c6">(</span>fish<span style="color:#ff79c6">)</span>: update <span style="color:#8be9fd;font-style:italic">alias</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>commit 960e14f
</span></span><span style="display:flex;"><span>Author: woula &lt;woula@awesome.com&gt;
</span></span><span style="display:flex;"><span>Date:   Sat Jan <span style="color:#bd93f9">25</span> 18:32:42 <span style="color:#bd93f9">2025</span> +0100
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    feat<span style="color:#ff79c6">(</span>nvim<span style="color:#ff79c6">)</span>: update plugins, active flash, disable cappuchine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>commit bc1129d
</span></span><span style="display:flex;"><span>Author: woula &lt;woula@awesome.com&gt;
</span></span><span style="display:flex;"><span>Date:   Thu Jan <span style="color:#bd93f9">23</span> 07:00:58 <span style="color:#bd93f9">2025</span> +0100
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    feat<span style="color:#ff79c6">(</span>nix<span style="color:#ff79c6">)</span>: update config <span style="color:#ff79c6">for</span> homebrew
</span></span></code></pre>]]></content>
    <link href="/notes/git-log-better/"></link>
  </entry>
  <entry>
    <title>[Note] Managing multiple Git accounts</title>
    <id>/notes/git-multiple-account/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-19T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="managing-multiple-git-accounts">Managing multiple Git accounts</h1>
<p>Working with multiple Git accounts (e.g., work, personal, open-source) can be tricky. Here’s how I manage them seamlessly using conditional includes in <code>.gitconfig</code>.</p>
<h2 id="global-gitconfig-setup">Global <code>.gitconfig</code> setup</h2>
<p>Add conditional includes to the global <code>.gitconfig</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">[</span>includeIf <span style="color:#f1fa8c">&#34;gitdir:~/projects/company1/&#34;</span><span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">path</span> <span style="color:#ff79c6">=</span> ~/projects/company1/.gitconfig
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>includeIf <span style="color:#f1fa8c">&#34;gitdir:~/projects/company2/&#34;</span><span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">path</span> <span style="color:#ff79c6">=</span> ~/projects/company2/.gitconfig
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>includeIf <span style="color:#f1fa8c">&#34;gitdir:~/projects/oss/&#34;</span><span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">path</span> <span style="color:#ff79c6">=</span> ~/projects/oss/.gitconfig
</span></span></code></pre><h2 id="local-gitconfig">Local <code>.gitconfig</code></h2>
<p>In each project’s <code>.gitconfig</code>, specify the user and SSH key.</p>
<p>Here is example for <code>~/projects/company1/.gitconfig</code></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">[</span>user<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">name</span> <span style="color:#ff79c6">=</span> username1
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">email</span> <span style="color:#ff79c6">=</span> name@company1.com
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>core<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">sshCommand</span> <span style="color:#ff79c6">=</span> ssh -i ~/.ssh/company1_rsa
</span></span></code></pre><p>Git will help us to automatically switch configurations based on the project directory.</p>
]]></content>
    <link href="/notes/git-multiple-account/"></link>
  </entry>
  <entry>
    <title>[Note] Git aliases</title>
    <id>/notes/git-alias/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-18T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="git-aliases">Git aliases</h1>
<p>Git aliases are a must have for every developer. They save time, reduce typing, and make your workflow more efficient.</p>
<p>You can set them up in two ways: terminal shell aliases or <code>.gitconfig</code>.</p>
<h2 id="terminal-shell-aliases">Terminal shell aliases</h2>
<p>Here’s a part how I set up my Git aliases in my shell config (e.g. <code>.zshrc</code> or <code>fish.config</code> ...etc.):</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># Git</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">g</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gc</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git commit -m&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gca</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git commit -a -m&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gp</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git push origin HEAD&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gpu</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git pull origin&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gpf</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git push --force-with-lease&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gst</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git status&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gs</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git switch&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gsc</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git switch -c&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gdiff</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git diff&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gco</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git checkout&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gcob</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git checkout -b&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gb</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git branch&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gba</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git branch -a&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gadd</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git add&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">ga</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git add -p&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">alias</span> <span style="color:#8be9fd;font-style:italic">gre</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;git reset&#34;</span>
</span></span></code></pre><h2 id="gitconfig-alias"><code>.gitconfig</code> alias</h2>
<p>Other way to manage git alias with global <code>.gitconfig</code></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">[</span>alias<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># List all aliases</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">aliases</span> <span style="color:#ff79c6">=</span> !git config --get-regexp <span style="color:#8be9fd;font-style:italic">alias</span> | sed -re <span style="color:#f1fa8c">&#39;s/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Command shortcuts</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">st</span> <span style="color:#ff79c6">=</span> status
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">cm</span> <span style="color:#ff79c6">=</span> commit -m
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">co</span> <span style="color:#ff79c6">=</span> checkout
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">stl</span> <span style="color:#ff79c6">=</span> stash list
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">stp</span> <span style="color:#ff79c6">=</span> stash pop stash@<span style="color:#ff79c6">{</span>0<span style="color:#ff79c6">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">sts</span> <span style="color:#ff79c6">=</span> stash save --include-untracked
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">sw</span> <span style="color:#ff79c6">=</span> switch
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">a</span> <span style="color:#ff79c6">=</span> !git add .
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">ca</span> <span style="color:#ff79c6">=</span> !git commit --amend -C HEAD
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">fetch</span> <span style="color:#ff79c6">=</span> !git fetch --all --prune
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Force-push safely (won’t overwrite others’ work)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">pf</span> <span style="color:#ff79c6">=</span> push --force-with-lease
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Update last commit with staged changes</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">oups</span> <span style="color:#ff79c6">=</span> !<span style="color:#ff79c6">(</span>git add . <span style="color:#ff79c6">&amp;&amp;</span> git commit --amend -C HEAD<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Edit last commit message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">reword</span> <span style="color:#ff79c6">=</span> commit --amend
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Undo last commit but keep changes staged</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">uncommit</span> <span style="color:#ff79c6">=</span> reset --soft HEAD~1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Remove file(s) from Git but keep them on disk</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">untrack</span> <span style="color:#ff79c6">=</span> rm --cached --
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Delete merged local branches</span>
</span></span><span style="display:flex;"><span>    delete-local-merged <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;!git fetch &amp;&amp; git branch --merged | egrep -v &#39;master&#39; | xargs git branch -d&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Create an empty commit (useful for CI triggers)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">empty</span> <span style="color:#ff79c6">=</span> commit --allow-empty
</span></span></code></pre>]]></content>
    <link href="/notes/git-alias/"></link>
  </entry>
  <entry>
    <title>[Note] Run a command if there are unstaged changes</title>
    <id>/notes/git-changes/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-17T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="run-a-command-if-there-are-unstaged-changes">Run a command if there are unstaged changes</h1>
<p>A quick one-liner to run a command only if there are unstaged changes: the <code>--quiet</code> flag of <a href="https://git-scm.com/docs/git-diff"><code>git diff</code></a></p>
<p>The flag does two things:</p>
<ul>
<li>Disables all output of the command</li>
<li>Exits with <code>1</code> if there are differences, and <code>0</code> if there are no differences.</li>
</ul>
<p>That means you can combine it with boolean operators to only run another command if files have (or have not) changed:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># Run `command` if there are unstaged changes</span>
</span></span><span style="display:flex;"><span>git diff --quiet <span style="color:#ff79c6">||</span> <span style="color:#8be9fd;font-style:italic">command</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># Run `command` if there are NO unstaged changes</span>
</span></span><span style="display:flex;"><span>git diff --quiet <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">command</span>
</span></span></code></pre><h2 id="other-tips">Other tips</h2>
<ul>
<li>
<p>Check for untracked files</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git ls-files --others --exclude-standard | grep -q . <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">command</span>
</span></span></code></pre></li>
<li>
<p>Include staged changes</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git diff --cached --quiet <span style="color:#ff79c6">||</span> <span style="color:#8be9fd;font-style:italic">command</span>
</span></span></code></pre></li>
<li>
<p>Combine with <code>entr</code> for file watching</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git diff --quiet <span style="color:#ff79c6">||</span> entr -r <span style="color:#8be9fd;font-style:italic">command</span>
</span></span></code></pre></li>
<li>
<p>Use in CI pipelines</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git diff --quiet <span style="color:#ff79c6">||</span> <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;Changes detected, running tests...&#34;</span> <span style="color:#ff79c6">&amp;&amp;</span> npm <span style="color:#8be9fd;font-style:italic">test</span>
</span></span></code></pre></li>
</ul>
]]></content>
    <link href="/notes/git-changes/"></link>
  </entry>
  <entry>
    <title>[Note] List all files tracked by Git</title>
    <id>/notes/git-ls-files/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-16T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="list-all-files-tracked-by-git">List all files tracked by Git</h1>
<p>Sometimes you need a list of all files tracked by Git—for example, when using tools like <a href="http://eradman.com/entrproject/"><code>entr</code></a> to watch files for changes. Instead of fiddling with <code>find</code>, Git provides a clean and concise command <a href="https://git-scm.com/docs/git-ls-files">git-ls-files</a>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git ls-files
</span></span></code></pre><p>This lists all files in the repository that are tracked by Git.</p>
<h2 id="other-tips">Other tips</h2>
<ul>
<li>
<p>Include ignored files:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git ls-files --others --ignored --exclude-standard
</span></span></code></pre></li>
<li>
<p>Filter by file type:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git ls-files <span style="color:#f1fa8c">&#39;*.js&#39;</span> <span style="color:#6272a4"># List only JavaScript files</span>
</span></span></code></pre></li>
<li>
<p>Use with <code>entr</code> to watch files:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git ls-files | entr -r your-command
</span></span></code></pre></li>
</ul>
]]></content>
    <link href="/notes/git-ls-files/"></link>
  </entry>
  <entry>
    <title>[Note] Git Checkout vs. Git Switch</title>
    <id>/notes/git-checkout-vs-switch/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-15T20:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="git-checkout-vs-git-switch">Git Checkout vs. Git Switch</h1>
<h2 id="git-checkout"><code>git checkout</code></h2>
<ul>
<li>
<p>Switch branches:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git checkout &lt;branch&gt;        <span style="color:#6272a4"># Switch to an existing branch</span>
</span></span></code></pre></li>
<li>
<p>Create and switch to a new branch:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git checkout -b &lt;new-branch&gt; <span style="color:#6272a4"># Create and switch to a new branch</span>
</span></span></code></pre></li>
<li>
<p>Restore files from a specific commit or branch:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git checkout &lt;commit&gt; -- &lt;file&gt; <span style="color:#6272a4"># Restore a file from a specific commit</span>
</span></span></code></pre></li>
</ul>
<h2 id="git-switch-modern-alternative"><code>git switch</code> (modern alternative)</h2>
<ul>
<li>
<p>Switch branches:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git switch &lt;branch&gt;          <span style="color:#6272a4"># Switch to an existing branch</span>
</span></span></code></pre></li>
<li>
<p>Create and switch to a new branch:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git switch -c &lt;new-branch&gt;   <span style="color:#6272a4"># Create and switch to a new branch</span>
</span></span></code></pre></li>
</ul>
<h2 id="key-differences">Key differences</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Purpose</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git checkout &lt;branch&gt;</code></td>
<td>Switch branches</td>
<td>Older, more versatile command.</td>
</tr>
<tr>
<td><code>git checkout -b &lt;branch&gt;</code></td>
<td>Create and switch to a new branch</td>
<td>Combines branch creation and switch.</td>
</tr>
<tr>
<td><code>git checkout &lt;commit&gt; -- &lt;file&gt;</code></td>
<td>Restore a file from a commit</td>
<td>Useful for recovering files.</td>
</tr>
<tr>
<td><code>git switch &lt;branch&gt;</code></td>
<td>Switch branches</td>
<td>Modern, focused alternative.</td>
</tr>
<tr>
<td><code>git switch -c &lt;branch&gt;</code></td>
<td>Create and switch to a new branch</td>
<td>Simpler and more intuitive.</td>
</tr>
</tbody>
</table>
<h2 id="when-to-use">When to use?</h2>
<ul>
<li>
<p><code>git checkout</code>:</p>
<ul>
<li>Use for restoring files from a specific commit or branch.</li>
<li>Still works for switching branches, but <code>git switch</code> is preferred.</li>
</ul>
</li>
<li>
<p><code>git switch</code>:</p>
<ul>
<li>Use for switching branches or creating new branches.</li>
<li>Cleaner and more focused than <code>git checkout</code>.</li>
</ul>
</li>
</ul>
<h2 id="pro-tips">Pro tips</h2>
<ul>
<li>Recover deleted branches:</li>
</ul>
<p>Use <code>git reflog</code> to find the branch’s last commit, then recreate it:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git switch -c &lt;branch&gt; &lt;hash&gt;
</span></span></code></pre><ul>
<li>Use git switch for branch operations. It’s designed specifically for branches, making it more intuitive.</li>
</ul>
]]></content>
    <link href="/notes/git-checkout-vs-switch/"></link>
  </entry>
  <entry>
    <title>[Note] Git Reset vs. Git Restore</title>
    <id>/notes/git-reset-vs-restore/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-15T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="git-reset-vs-git-restore">Git Reset vs. Git Restore</h1>
<h2 id="git-reset"><code>git reset</code></h2>
<ul>
<li>
<p>Undo commits (keep changes staged):</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git reset --soft HEAD~        <span style="color:#6272a4"># Move HEAD but keep changes staged</span>
</span></span><span style="display:flex;"><span>git reset --soft &lt;commit&gt;     <span style="color:#6272a4"># Move to specific commit, keep changes staged</span>
</span></span></code></pre></li>
<li>
<p>Unstage changes (keep changes in working directory):</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git reset HEAD~              <span style="color:#6272a4"># Reset --mixed (default), move HEAD and unstage changes</span>
</span></span><span style="display:flex;"><span>git reset &lt;commit&gt;           <span style="color:#6272a4"># Reset --mixed, move to specific commit and unstage changes</span>
</span></span><span style="display:flex;"><span>git reset HEAD &lt;file&gt;        <span style="color:#6272a4"># Unstage a specific file</span>
</span></span></code></pre></li>
<li>
<p>Discard commits and changes (destructive):</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git reset --hard HEAD~1      <span style="color:#6272a4"># Discard commits and changes permanently</span>
</span></span></code></pre></li>
</ul>
<h2 id="git-restore"><code>git restore</code></h2>
<ul>
<li>
<p>Discard working directory changes:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git restore &lt;file&gt;           <span style="color:#6272a4"># Revert file to its state in the last commit</span>
</span></span></code></pre></li>
<li>
<p>Unstage changes:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git restore --staged &lt;file&gt;  <span style="color:#6272a4"># Move changes from staging area to working directory</span>
</span></span></code></pre></li>
<li>
<p>Restore a file from a specific commit:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git restore --source<span style="color:#ff79c6">=</span>&lt;commit&gt; &lt;file&gt; <span style="color:#6272a4"># Restore file from a specific commit</span>
</span></span></code></pre></li>
</ul>
<h2 id="key-differences">Key differences</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Branch pointer</th>
<th>Staging area</th>
<th>Working directory</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git reset &lt;commit&gt;</code></td>
<td>Moves</td>
<td>Resets (unstages)</td>
<td>Unchanged</td>
</tr>
<tr>
<td><code>git reset --soft &lt;commit&gt;</code></td>
<td>Moves</td>
<td>Unchanged</td>
<td>Unchanged</td>
</tr>
<tr>
<td><code>git restore &lt;file&gt;</code></td>
<td>Unchanged</td>
<td>Unchanged</td>
<td>Resets file</td>
</tr>
<tr>
<td><code>git restore --staged &lt;file&gt;</code></td>
<td>Unchanged</td>
<td>Resets (unstages)</td>
<td>Unchanged</td>
</tr>
</tbody>
</table>
<h2 id="when-to-use">When to use?</h2>
<ul>
<li>
<p><code>git reset</code>:</p>
<ul>
<li>Move branch pointers or undo commits.</li>
<li>Unstage changes (though <code>git restore --staged</code> is more intuitive).</li>
</ul>
</li>
<li>
<p><code>git restore</code>:</p>
<ul>
<li>Discard changes in the working directory.</li>
<li>Unstage changes (modern alternative to <code>git reset HEAD &lt;file&gt;</code>).</li>
</ul>
</li>
</ul>
<h2 id="pro-tips">Pro tips</h2>
<ul>
<li>Recover from a hard reset:
Use <code>git reflog</code> to find the lost commit and reset back:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git reflog
</span></span><span style="display:flex;"><span>git reset --hard &lt;hash&gt;
</span></span></code></pre><ul>
<li>Combine <code>git reset</code> and <code>git restore</code>:
Reset to a specific commit but keep changes in the working directory:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git reset &lt;commit&gt;
</span></span><span style="display:flex;"><span>git restore .
</span></span></code></pre><ul>
<li>Avoid <code>--hard</code> unless necessary:
Use <code>--soft</code> or <code>--mixed</code> to preserve changes.</li>
</ul>
]]></content>
    <link href="/notes/git-reset-vs-restore/"></link>
  </entry>
  <entry>
    <title>[Note] Ingore all .DS_store files globally</title>
    <id>/notes/gitignore-globally/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-14T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="ignore-all-ds-store-files-globally">Ignore all <code>.DS_Store</code> files globally</h1>
<p>If you use Git on a Mac, you’ve probably accidentally committed a <code>.DS_Store</code> file to a repo at least once. I used to add <code>.DS_Store</code> to every <code>.gitignore</code> file to avoid this, but there’s a better way!</p>
<p>You can create a global <code>.gitignore</code> file that applies to all your repositories. Just run this command:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git config --global core.excludesFile <span style="color:#f1fa8c">&#39;~/.gitignore&#39;</span>
</span></span></code></pre><p>Then, add <code>.DS_Store</code> to your <code>~/.gitignore</code> file:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;.DS_Store&#34;</span> &gt;&gt; ~/.gitignore
</span></span></code></pre><p>This command adds the following to your <code>~/.gitconfig</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">[</span>core<span style="color:#ff79c6">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">excludesFile</span> <span style="color:#ff79c6">=</span> ~/.gitignore
</span></span></code></pre><p>Now, <code>.DS_Store</code> files will be ignored across all your projects, no more accidental commits!</p>
<p>You can directly edit the <code>~/.gitignore</code> file to globally ignore many other files.</p>
]]></content>
    <link href="/notes/gitignore-globally/"></link>
  </entry>
  <entry>
    <title>[Note] Update all Git submodules to latest commit</title>
    <id>/notes/update-git-submodules/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-13T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="update-all-git-submodules-to-the-latest-commit">Update all Git submodules to the latest commit</h1>
<p>If you use <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git submodules</a> often, here's the one-liner to update them to the latest commit on origin (since Git 1.8.2):</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>git submodule update --remote --rebase
</span></span></code></pre><p>Prefer merging? Swap <code>--rebase</code> for <code>--merge</code>.</p>
]]></content>
    <link href="/notes/update-git-submodules/"></link>
  </entry>
  <entry>
    <title>[Note] Run Github actions locally</title>
    <id>/notes/run-github-actions-locally/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-12T00:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="run-github-actions-locally">Run Github actions locally</h1>
<p>Run GitHub actions locally with <a href="https://github.com/nektos/act">act</a> to skip the long feedback loop! It uses Docker to pull images and run workflows right on your machine.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># Run the `push` event</span>
</span></span><span style="display:flex;"><span>act
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># Run a specific event or job</span>
</span></span><span style="display:flex;"><span>act pull_request
</span></span><span style="display:flex;"><span>act -j test_unit
</span></span></code></pre><p>Need a GitHub token? Use the <code>-s</code> flag with the GitHub CLI:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>act -s <span style="color:#8be9fd;font-style:italic">GITHUB_TOKEN</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">$(</span>gh auth token<span style="color:#ff79c6">)</span><span style="color:#f1fa8c">&#34;</span>
</span></span></code></pre><p>Quick, easy, and no more waiting for GitHub to run workflows!</p>
]]></content>
    <link href="/notes/run-github-actions-locally/"></link>
  </entry>
  <entry>
    <title>[Note] First attempt at migrating from Homebrew to Nix with Nix Home Manager</title>
    <id>/notes/nix-home-manager/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-10T20:09:30Z</published>
    <content type="html"><![CDATA[<h1 id="first-attempt-at-migrating-from-homebrew-to-nix-with-nix-home-manager">First attempt at migrating from Homebrew to Nix with Nix Home Manager</h1>
<p>It didn’t go exactly as planned. I dived into Nix scripts, flakes, and started installing packages with nixpkgs while keeping Homebrew on the side.
But... nothing seemed to work correctly. 😵</p>
<p>Tools like <code>fish</code> shell, <code>fzf</code>, and <code>ghostty</code> .etc... didn't work.
I probably need to configure each program properly, manage environments, and link the <code>~/.config</code> files with Nix...</p>
<p>During the migration, I enabled autoCleanUp Homebrew with &quot;zap&quot; without paying close attention. Big mistake! It wiped out everything I’d installed through Homebrew. 😱 Aie aie aie.</p>
<p>Thankfully, I had saved all my tools in a Brewfile in my dotfiles. A quick <code>brew bundle</code> restored everything (though it took time to install).</p>
<p>Lesson learned: I need to take it step by step with Nix, learning more about proper configurations before jumping in too deep.</p>
<p>For now, I’m sticking with Homebrew but I’ll give Nix another try someday.</p>
]]></content>
    <link href="/notes/nix-home-manager/"></link>
  </entry>
  <entry>
    <title>[Note] Tilting window management on macOS with aerospace</title>
    <id>/notes/aerospace/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-08T22:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="tiling-window-management-on-macos-with-aerospace">Tiling window management on macOS with <code>aerospace</code></h1>
<p>In the past, I was a <code>rectangle</code> user. I used it to move windows into corners or split the screen, basic functionality. Honestly, it never felt transformative. It was fine, but quite basic. I only used it during screen-sharing sessions on Teams calls. I always wanted something more controllable and better organized, with groupings of applications.</p>
<p>Recently, I explored <code>raycast</code>, and at first, it seemed like the solution I had been looking for. It offered intuitive window organization, powerful workspace controls, and a lot of cool features.<br>
But then I discovered that many of the features I wanted required the Pro version. So I knew I had to look elsewhere.</p>
<p>That’s when I came across <a href="https://github.com/nikitabobko/aerospace">aerospace</a>, thanks to all the people sharing it on YouTube. And wow! This is the tool I was looking for! (powerful, free, open-source, workspace management simple, entirely keyboard shortcuts)</p>
<p>Using aerospace has completely transformed my workflow. I now have workspaces neatly organized by task coding (C), terminal (T), browser (B), music (M)... and switching between them is really simple. I can even set apps to open in specific workspaces by default. So cool! Everything feels smoother, faster, and more focused.</p>
<p>For me, there’s only one drawback: aerospace doesn’t natively support the AZERTY keyboard layout, it might a bit inconvenient. However, I can map the QWERTY shortcuts on same location with AZERTY layout and that solution is ok for me.</p>
]]></content>
    <link href="/notes/aerospace/"></link>
  </entry>
  <entry>
    <title>[Note] Manage better for my dotfiles.</title>
    <id>/notes/stow-dotfiles/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-05T12:01:00Z</published>
    <content type="html"><![CDATA[<h1 id="manage-better-for-my-dotfiles">Manage better for my dotfiles</h1>
<p>Up until now, I’ve been handling my dotfiles manually with a Makefile and shell scripts.
I used commands like <code>rsync</code> to mirror files from my <code>~/.config</code> directory to my <code>~/dotfiles</code> folder,
and then saved everything on GitHub. While this approach worked, it was tedious and had a lot of limitations:</p>
<ul>
<li><code>rsync</code> wouldn’t handle deletions properly, so if I deleted a file in <code>~/.config</code>, it wouldn’t be removed from the dotfiles folder.</li>
<li>I had to run <code>make sync</code> every time I wanted to update my dotfiles</li>
<li>Restoring configurations wasn’t properly handled</li>
<li>I also wanted to directly manage the <code>~/.config</code> folder with Git, but my current setup didn’t make that easy.</li>
</ul>
<p>Then, I stumbled across a YouTube video about using <a href="https://www.gnu.org/software/stow/">GNU Stow</a> to manage dotfiles.
It’s such a simple yet powerful tool! Stow creates symlinks from your dotfiles folder to your <code>~/.config</code> directory,
so there’s no need for manual mirroring. Everything stays organized and up-to-date automatically.</p>
<p>Now, I manage my <code>~/dotfiles</code> easily with Stow, and my <code>~/.config</code> folder is directly synced via symlinks.</p>
<p>I love how clean and efficient this setup feels. Highly recommend giving <a href="https://github.com/aspiers/stow/">Stow</a> a try if you’re looking for a better way to manage dotfiles!</p>
]]></content>
    <link href="/notes/stow-dotfiles/"></link>
  </entry>
  <entry>
    <title>[Note] CLI tools I love using</title>
    <id>/notes/cli-tools/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-03T15:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="cli-tools-i-love-using">CLI tools I love using</h1>
<p>I’m a huge fan of Rust, and it’s no surprise that many of the tools I rely on in the terminal are written in rust.</p>
<p>Here’s a quick rundown of my favorites:</p>
<ul>
<li><code>Fzf</code>: Fuzzy finder that makes searching files or commands a breeze.</li>
<li><code>Eza</code>: A modern, colorful alternative to <code>ls</code> that adds more functionality.</li>
<li><code>Zoxide</code>: A smarter <code>cd</code> command that remembers your most-used directories.</li>
<li><code>Fish shell</code>: A user-friendly shell with auto-suggestions and syntax highlighting.</li>
<li><code>Starship prompt</code>: Fast, customizable prompt with support for all major shells.</li>
<li><code>Ripgrep</code>: Lightning-fast search tool, a must-have for large codebases.</li>
<li><code>Sd</code>: Simpler, more intuitive replacement for <code>sed</code>.</li>
<li><code>Fd</code>: Faster, friendlier alternative to <code>find</code> with colorful output.</li>
<li><code>Jq</code>: Power tool for processing JSON data in the terminal.</li>
<li><code>Lazygit</code>: Terminal-based Git interface, perfect for lazy devs.</li>
<li><code>Lazydocker</code>: Easy-to-use terminal tool for managing Docker containers.</li>
<li><code>Bat</code>: Better <code>cat</code> with syntax highlighting and line numbers.</li>
<li><code>Git-delta</code>: Enhanced git diff tool with better formatting.</li>
<li><code>Fnm</code>: Fast, Rust-based Node.js version manager.</li>
</ul>
<p><strong>UPDATED LIST:</strong></p>
<ul>
<li><code>Neovim</code>: + Lazyvim</li>
<li><code>Stow</code>: Manages dotfiles.</li>
<li><code>Ghostty</code>: Terminal emulator.</li>
<li><code>Aerospace</code>: Window manager.</li>
<li><code>Hyperfine</code>: Benchmarking tool.</li>
</ul>
]]></content>
    <link href="/notes/cli-tools/"></link>
  </entry>
  <entry>
    <title>[Note] Returning to Neovim for Coding</title>
    <id>/notes/neovim-coding/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-03T15:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="returning-to-neovim-for-coding">Returning to Neovim for coding</h1>
<p>I’ve started using Neovim for coding again.</p>
<p>Early in my career, like many others, I tried to learn Vim. At first, it was difficult to get used to, but I found it fun and rewarding. For some, Vim can feel more &quot;professional,&quot; and there's something satisfying about the cool things you can do with it.</p>
<p>I really liked Vim, but when it came to coding, I ran into many challenges. Configuring Vim with the right plugins, settings, and workflows took a lot of time. Back then, I was working with many different languages—Python, Ruby, JavaScript, TypeScript, HTML, CSS—and I could never quite get Vim to work smoothly across all of them. I faced too many issues, so eventually, I switched to VSCode and IntelliJ for most of my coding, using Vim only for occasional file edits.</p>
<p>Now, with modern terminals like <strong>Wezterm</strong> and <strong>Ghostty</strong>, I find myself enjoying the terminal environment more. I want to keep my hands on the keyboard as much as possible, so I decided to give Vim another try, but this time with <strong>Neovim</strong>. Neovim is a more modern and flexible alternative to Vim, with support for Lua-based scripting and plugins.</p>
<p>It’s taking some time to get fully comfortable with Neovim again, but I’m using <strong>LazyVim</strong> to manage my plugins, and it’s been fantastic. It supports many of the plugins I need for coding, especially the <code>which-key</code> plugin, which shows all available keybindings in Neovim—something I missed when using Vim before.</p>
<p>LazyVim makes it easy to add, remove, or configure plugins, and the documentation is top-notch, so I can quickly reference the keymaps I need.</p>
<p>I also tried <strong>Helix</strong>, a text editor built from scratch with Rust. It’s designed to provide a similar experience to Vim but with better performance. It’s still young and doesn’t support plugins yet, and it lacks features like a file explorer, which I rely on. However, I think it has potential, and in the future, it could be a solid alternative to Vim.</p>
<p>For now, I feel more comfortable with Neovim, but it's still not perfect. I continue using VSCode for larger projects, but I’ve enabled the Neovim extension in VSCode, which lets me use Vim keybindings and workflows within VSCode. It’s not the full Vim experience, but it’s been a great way to continue learning Vim while working in a modern IDE. At least now, I don’t need to use the mouse when coding in VSCode.</p>
<p>For smaller projects, I stick to using Neovim in the terminal.</p>
<p>For browsing, I now use Vim as well. With the Vimium extension, I can use Vim-like keybindings and perform almost everything without touching the mouse. It’s really fun and efficient to use.</p>
]]></content>
    <link href="/notes/neovim-coding/"></link>
  </entry>
  <entry>
    <title>[Note] Ghostty?</title>
    <id>/notes/ghostty/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2025-01-01T21:00:00Z</published>
    <content type="html"><![CDATA[<h1 id="ghostty">Ghostty?</h1>
<p>Ghostty has just released its official production-ready version: 1.0, and it’s causing quite a hype among developers across all platforms. I’m really curious to try it out!</p>
<p>Ghostty is a terminal emulator built with Zig. Most terminal emulators I’ve used, like WezTerm, Warp, Alacritty, and Zellij, are written in Rust. So it’s exciting to see a terminal tool developed in Zig instead.
(I really like both of 2 this languages: rust and zig)</p>
<p>I decided to give it a shot, even though I’ve been happily using WezTerm. And I have to say, I’m impressed.</p>
<p>It’s fast—faster than WezTerm in terms of startup time and when opening new tabs. It integrates smoothly with Fish shell, which I love.</p>
<p>The keybindings are easy to access, and the setup process is a really simple. Plus, it supports a variety of themes.</p>
<p>Some standout features include <strong>Quick Terminal</strong> and the ability to use <strong>Cmd + Triple-click</strong> for selection—simple yet powerful.</p>
<p>So, I’ve made the switch. My terminal is now Ghostty.</p>
]]></content>
    <link href="/notes/ghostty/"></link>
  </entry>
  <entry>
    <title>[Note] I’ve started implementing short notes on my website</title>
    <id>/notes/init-notes/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-12-26T08:09:00Z</published>
    <content type="html"><![CDATA[<h1 id="ive-started-implementing-notes-on-my-website">I’ve started implementing notes on my website</h1>
<p>The goal is to create a space for sharing shorter updates, thoughts, and progress on ongoing projects. I plan to update this space regularly with useful insights and updates.</p>
<p>Stay tuned for more posts soon.</p>
]]></content>
    <link href="/notes/init-notes/"></link>
  </entry>
  <entry>
    <title>How to build dual package npm from Typescript - the easiest way</title>
    <id>/blog/dual-package-typescript/</id>
    <updated>2024-11-19T00:00:00Z</updated>
    <published>2024-11-13T00:00:00Z</published>
    <summary>Explore an easy way to support dual package TypeScript NPM libraries for both CommonJS and ESM</summary>
    <content type="html"><![CDATA[<p>JavaScript is evolving rapidly. <a href="https://medium.com/ekino-france/de-commonjs-%C3%A0-esm-les-cl%C3%A9s-dune-migration-r%C3%A9ussie-10507304bc01">Now, it’s really important for libraries to work with both CommonJS (CJS) and ECMAScript Modules (ESM)</a>.</p>
<p>In this article, we’ll guide you through an easy and practical approach to handle dual-package support. That means more people can use your library, and it’s easier for them to do so.</p>
<h2 id="tldr">TL;DR</h2>
<p><strong>Create a dual-package TypeScript library supporting both ESM and CommonJS</strong>:</p>
<ul>
<li><a href="#understanding-javascript-file-extensions">Understand the different of Javascript file extensions: <code>.js</code>, <code>.mjs</code>, <code>.cjs</code></a></li>
<li><a href="#selected-solution-using-js-for-simplifying">Use only the <code>.js</code> extension for both esm and cjs outputs after compilation</a></li>
<li>Write source code Typescript in ESM</li>
<li>Avoid external build tools</li>
<li><a href="#practical-part">Define the <code>exports</code> field in <code>package.json</code></a></li>
<li><a href="#compiling-with-typescript">Compile source files into <code>lib/esm</code> and <code>lib/cjs</code> directories.</a></li>
<li><a href="#build-scripts">Add <code>package.json</code> files with the correct type field in <code>lib/esm</code> and <code>lib/cjs</code></a>
<ul>
<li>Place a <code>package.json</code> file in <code>lib/esm</code> with <code>{&quot;type&quot;: &quot;module&quot;}</code></li>
<li>Place another in <code>lib/cjs</code> with <code>{&quot;type&quot;: &quot;commonjs&quot;}</code></li>
</ul>
</li>
</ul>
<h2 id="understanding-javascript-file-extensions">Understanding Javascript file extensions</h2>
<p>Firstly, we need clarify the different extensions in JavaScript:</p>
<ul>
<li><code>.cjs</code>: files are for modules used with the <code>require()</code> function.</li>
<li><code>.mjs</code> files are for ESM modules, used with import statements.</li>
<li><code>.js</code> files can be used for both CJS and ESM modules if you specify <code>“type: “module”</code> in <code>package.json</code>.</li>
</ul>
<p><strong>Challenges and solutions</strong></p>
<p>Understanding which file extension corresponds to which type of module is essential but can be confusing.</p>
<p>When you use a specific file extension in the <code>import path</code>, you must ensure that the corresponding extension is present in the compiled JavaScript files.</p>
<p>Here’s how Javascript extensions work:</p>
<ul>
<li><code>.cjs</code> and <code>.mjs</code>: If you use <code>.cjs</code> in the import path, the compiled JavaScript files should also have the <code>.cjs</code> extension. Similarly, if you use <code>.mjs</code> in the import path, the compiled files should have the <code>.mjs</code> extension. This ensures that the JavaScript engine knows which module system to use.</li>
<li><code>.js</code> : Alternatively, you can choose to use the <code>.js</code> extension for both CJS and ESM. However, when you do this, you need to be aware of how your code is compiled with the configuration in <code>package.json</code>.</li>
</ul>
<p>Based on my experiences, developers often choose to use <code>.js</code> for writing both ESM and CJS, picking <code>.cjs</code> for CJS and <code>.mjs</code> for ESM. In other words, if they use <code>.js</code> for ESM, they use <code>.cjs</code> for CJS, and vice versa.</p>
<p><strong>Here are some examples of how different libraries handle this:</strong></p>
<ul>
<li><a href="https://github.com/axios/axios">axios</a>: A tool for making HTTP requests in Node.js and the browser. They use <code>.js</code> for ESM and <code>.cjs</code> for CJS. They don’t have a build step because they write code in JS with the `.d.ts_** files included.</li>
<li><a href="https://github.com/helmetjs/helmet">helmet</a>: A tool for securing HTTP headers in Node.js. They use <a href="https://github.com/rollup/rollup">rollup</a> to manage the build process, picking <code>.cjs</code> for CJS and <code>.mjs</code> for ESM.</li>
<li><a href="https://github.com/colinhacks/zod">zod</a>: A validation library for TypeScript. They write code in TypeScript CJS, also using <code>rollup</code> to build ESM with <code>.mjs</code> extension. They use TSC to build CJS with <code>.js</code> extension.</li>
<li><a href="https://github.com/cucumber/cucumber-js">cucumber</a>: A tool for writing tests with Gherkin syntax, we used it a lot for integration tests in our projects. They write code in TypeScript in CJS and use <code>.mjs</code> for ESM. They use TSC and have their own rules for building both CJS and ESM.</li>
</ul>
<p>Let’s look at the following example to understand this better:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// example.ts
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// Importing with .cjs extension
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">import</span> { stringify } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./output_utils.cjs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { LogColor, Log, LogLevel, Output } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./index.cjs&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Importing with .mjs extension
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">import</span> { stringify } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./output_utils.mjs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { LogColor, Log, LogLevel, Output } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./index.mjs&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Importing with .js extension
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">import</span> { stringify } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./output_utils.js&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { LogColor, Log, LogLevel, Output } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./index.js&#39;</span>
</span></span></code></pre><p>This code is written in TypeScript. We used <code>“type”: “module”</code> in <code>package.json</code> to enable ESM, which means we must specify the extension in each import path. After compilation, these extensions become crucial.</p>
<p>Now, let’s say you want to use different extensions like <code>.cjs</code> or <code>.mjs</code> for your imports and compilation. If the extension you specify in your import statement doesn’t match the one in the compiled JavaScript files, it can cause issues like: <code>[ERR_MODULE_NOT_FOUND]: Cannot find module…</code></p>
<p>Choosing different extensions for imports and compilation, such as <code>.cjs</code> or <code>.mjs</code>, requires careful attention. Tools like <code>esbuild</code>, <code>swc</code>, <code>tsc</code>, <code>rollup</code>, or <code>tsup</code>…etc.. can help you compile TypeScript to JavaScript with these extensions. However, it often involves adding more scripts to modify the import paths during the build process. While this method can work, it can also be risky and challenging to maintain consistency, especially in complex projects.</p>
<h2 id="selected-solution-using-js-for-simplifying">Selected solution: using <code>.js</code> for simplifying</h2>
<p>We decided to keep it simple by using <code>.js</code> for both importing and compiling. With the <code>“type”</code> field in <code>package.json</code>, we can we can easily distinguish between CJS and ESM.</p>
<ul>
<li>It doesn’t require additional compilation tools, except for a quick build tool like <code>esbuild</code>, if needed. For simpler projects, you can stick directly with TypeScript’s built-in <code>TSC</code>.</li>
<li>By using <code>.js</code> for everything, we make our code easier to handle and avoid any issues with file extensions.</li>
</ul>
<p><strong>So how this solution works?</strong></p>
<p>As mentioned earlier, the important part of making this method work is the <code>“type”</code> field in your <code>package.json</code> file.</p>
<p>By default, if you don’t specify <code>type: “commonjs”</code> in your <code>package.json</code>, your project is considered to be in CJS mode. In this mode, all <code>.js</code> files are treated as CJS modules. However, if you specify <code>type: “module”</code>, all <code>.js</code> files are treated as ESM.</p>
<p>Additionally, placing another <code>package.json</code> file in a child folder allows you to control the scope of that folder, similar to how  <code>.eslintrc</code> works. For example, if you have a <code>package.json</code> file with <code>type: “module&quot;</code> in the <code>lib/esm</code> folder, all <code>.js</code> files in that folder must follow the syntax of ESM.</p>
<h2 id="practical-part">Practical part</h2>
<p>Now, let’s explore a practical example of how to configure your project for dual-package support using scripts.</p>
<h3 id="modifying-packagejson">Modifying package.json</h3>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;type&#34;</span>: <span style="color:#f1fa8c">&#34;module&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;files&#34;</span>: [<span style="color:#f1fa8c">&#34;/lib&#34;</span>],
</span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;exports&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;.&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;require&#34;</span>: {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;default&#34;</span>: <span style="color:#f1fa8c">&#34;./lib/cjs/index.js&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;types&#34;</span>: <span style="color:#f1fa8c">&#34;./lib/cjs/index.d.ts&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;import&#34;</span>: {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;default&#34;</span>: <span style="color:#f1fa8c">&#34;./lib/esm/index.js&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;types&#34;</span>: <span style="color:#f1fa8c">&#34;./lib/esm/index.d.ts&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>This configuration ensures proper support for both CJS and ESM. When using the import syntax, the library points to the ESM folder and executes code with ESM. On the other hand, when using the require syntax, the library directs to the CJS folder.</p>
<h3 id="compiling-with-typescript">Compiling with TypeScript</h3>
<p>To set up this configuration, ensure that both the ESM and CJS folders (<code>lib/esm</code> and <code>lib/cjs</code>) contain the necessary library exports. We’ll achieve this using <code>tsc</code>.
First, adjust your <code>tsconfig.json</code> file by setting the <code>module</code> option to <code>“nodenext”</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;incremental&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noImplicitAny&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;allowJs&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;target&#34;</span>: <span style="color:#f1fa8c">&#34;esnext&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;lib&#34;</span>: [<span style="color:#f1fa8c">&#34;esnext&#34;</span>, <span style="color:#f1fa8c">&#34;dom&#34;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;module&#34;</span>: <span style="color:#f1fa8c">&#34;nodenext&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;alwaysStrict&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;skipLibCheck&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noUnusedParameters&#34;</span>: <span style="color:#ff79c6">false</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noUnusedLocals&#34;</span>: <span style="color:#ff79c6">false</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;strictNullChecks&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noUncheckedIndexedAccess&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;esModuleInterop&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;allowSyntheticDefaultImports&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;forceConsistentCasingInFileNames&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;typeRoots&#34;</span>: [<span style="color:#f1fa8c">&#34;./node_modules/@types&#34;</span>, <span style="color:#f1fa8c">&#34;./@types&#34;</span>]
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;include&#34;</span>: [<span style="color:#f1fa8c">&#34;src/**/*&#34;</span>, <span style="color:#f1fa8c">&#34;test/**/*.ts&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>This configuration is well-suited for managing TypeScript code within your project, including test files. To handle compilation specifically for npm packages, create a separate <code>tsconfig.lib.json</code> file that extends the original configuration:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;extends&#34;</span>: <span style="color:#f1fa8c">&#34;./tsconfig.json&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;include&#34;</span>: [<span style="color:#f1fa8c">&#34;src/**/*.ts&#34;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;sourceMap&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;declaration&#34;</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><h3 id="build-scripts">Build scripts</h3>
<p>There are various methods and tools available for scripting compilation tasks. Below are some examples using JavaScript with the zx tool, native Node.js, or Bash scripts. You can also consider other tools like bun $shell or execa...</p>
<ul>
<li><strong>zx solution</strong></li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// build.mjs
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>#<span style="color:#ff79c6">!</span>/usr/bin/env zx
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { $, chalk } from <span style="color:#f1fa8c">&#39;zx&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> <span style="color:#f1fa8c">`rm -rf lib`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`npx tsc -p tsconfig.lib.json --module NodeNext --outDir lib/esm`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#39;{&#34;type&#34;: &#34;module&#34;}&#39; &gt; lib/esm/package.json`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`npx tsc -p tsconfig.lib.json --module CommonJS --moduleResolution Node --outDir lib/cjs`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#39;{&#34;type&#34;: &#34;commonjs&#34;}&#39; &gt; lib/cjs/package.json`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    console.log(chalk.green(<span style="color:#f1fa8c">&#39;Compilation successful&#39;</span>))
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>    console.error(chalk.red(<span style="color:#f1fa8c">&#39;Compilation failed:&#39;</span>), chalk.red(error.message))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><ul>
<li><strong>Native Node.js solution</strong></li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// build.mjs
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>#<span style="color:#ff79c6">!</span>/usr/bin/env node
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { exec } from <span style="color:#f1fa8c">&#39;node:child_process&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { writeFile } from <span style="color:#f1fa8c">&#39;node:fs/promises&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { promisify } from <span style="color:#f1fa8c">&#39;node:util&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> execAsync <span style="color:#ff79c6">=</span> promisify(exec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">async</span> <span style="color:#8be9fd;font-style:italic">function</span> run() {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> <span style="color:#8be9fd;font-style:italic">Promise</span>.all([
</span></span><span style="display:flex;"><span>            execAsync(<span style="color:#f1fa8c">&#39;npx tsc -p tsconfig.lib.json --module NodeNext --outDir lib/esm&#39;</span>),
</span></span><span style="display:flex;"><span>            execAsync(
</span></span><span style="display:flex;"><span>                <span style="color:#f1fa8c">&#39;npx tsc -p tsconfig.lib.json --module CommonJS --moduleResolution Node --outDir lib/cjs&#39;</span>
</span></span><span style="display:flex;"><span>            ),
</span></span><span style="display:flex;"><span>        ])
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> <span style="color:#8be9fd;font-style:italic">Promise</span>.all([
</span></span><span style="display:flex;"><span>            writeFile(<span style="color:#f1fa8c">&#39;lib/esm/package.json&#39;</span>, <span style="color:#f1fa8c">&#39;{&#34;type&#34;: &#34;module&#34;}&#39;</span>),
</span></span><span style="display:flex;"><span>            writeFile(<span style="color:#f1fa8c">&#39;lib/cjs/package.json&#39;</span>, <span style="color:#f1fa8c">&#39;{&#34;type&#34;: &#34;commonjs&#34;}&#39;</span>),
</span></span><span style="display:flex;"><span>        ])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        console.log(<span style="color:#f1fa8c">&#39;Compilation successful&#39;</span>)
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>        console.error(<span style="color:#f1fa8c">&#39;Compilation failed:&#39;</span>, error)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">await</span> run()
</span></span><span style="display:flex;"><span>
</span></span></code></pre><ul>
<li><strong>Bash script</strong></li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># build.sh</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#!/bin/bash</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">set</span> -e <span style="color:#6272a4"># exit immediately if error</span>
</span></span><span style="display:flex;"><span>rm -rf lib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>npx tsc -p tsconfig.lib.json --module NodeNext --outDir lib/esm
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#39;{&#34;type&#34;: &#34;module&#34;}&#39;</span> &gt; lib/esm/package.json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>npx tsc -p tsconfig.lib.json --module CommonJS --moduleResolution Node --outDir lib/cjs
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#39;{&#34;type&#34;: &#34;commonjs&#34;}&#39;</span> &gt; lib/cjs/package.json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#39;Compilation successful&#39;</span>
</span></span></code></pre><p>This script efficiently handles compilation tasks. It use TypeScript’s compiler (<code>tsc</code>) with the appropriate configuration options to ensure compatibility with different module types.</p>
<h3 id="key-points-in-this-script">Key points in this script</h3>
<ul>
<li>Ensure to specify output folders for both ESM and CJS builds:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>Use - module nodenext - outDir lib/esm for ESM.  
</span></span><span style="display:flex;"><span>Use - module commonjs - outDir lib/cjs for CommonJS.
</span></span></code></pre><ul>
<li>Create nested package.json files for each build type:</li>
</ul>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>Use $echo &#39;{&#34;type&#34;: &#34;module&#34;}&#39; &gt; lib/esm/package.json for ESM.  
</span></span><span style="display:flex;"><span>Use $echo &#39;{&#34;type&#34;: &#34;commonjs&#34;}&#39; &gt; lib/cjs/package.json for CommonJS.
</span></span></code></pre><p>These nested files allow the use of <code>.js</code> extensions for both CJS and ESM, preventing errors like <code>“ReferenceError: require is not defined”</code>.</p>
<p>By following these steps and adapting the example to your specific project structure, you can establish effective dual-package support for your TypeScript library.</p>
<p>For a detailed implementation, you can find the migration code from CJS to ESM and the compilation example in <a href="https://github.com/ekino/node-logger/pull/46">this GitHub PR</a>. We made a similar transition for our library <a href="https://github.com/ekino/node-logger">@ekino/node-logger</a> which is a lightweight yet efficient logger that combines debug namespacing capabilities with winston levels and multi-output. Exploring this library might provide valuable insights for your projects.</p>
<h2 id="bonus-part-yal--yet-another-library">Bonus part (YAL — Yet another library)</h2>
<p>If you like using a quick build tool like <code>esbuild</code> (I really do!).</p>
<p>For now, <code>esbuild</code> doesn’t support glob pattern, so we need to use the library like <a href="https://github.com/mrmlnc/fast-glob">fast-glob</a> to handle that part. This makes the code a bit more complex compared to using <code>TSC</code>, but the speed boost you get from esbuild is totally worth it. Here are the scripts.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env zx
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">import</span> { $, chalk } from <span style="color:#f1fa8c">&#39;zx&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> esbuild from <span style="color:#f1fa8c">&#39;esbuild&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> fg from <span style="color:#f1fa8c">&#39;fast-glob&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> entryPoints <span style="color:#ff79c6">=</span> fg.sync([<span style="color:#f1fa8c">&#39;src/**/*.[tj]s&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> buildESM <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> esbuild.build({
</span></span><span style="display:flex;"><span>            entryPoints,
</span></span><span style="display:flex;"><span>            outdir<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;lib/esm&#39;</span>,
</span></span><span style="display:flex;"><span>            platform<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;node&#39;</span>,
</span></span><span style="display:flex;"><span>            sourcemap<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>            target<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;esnext&#39;</span>,
</span></span><span style="display:flex;"><span>            format<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;esm&#39;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#39;{&#34;type&#34;: &#34;module&#34;}&#39; &gt; lib/esm/package.json`</span>
</span></span><span style="display:flex;"><span>        console.log(chalk.green(<span style="color:#f1fa8c">&#39;ESM compilation successful&#39;</span>))
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>        console.error(chalk.red(<span style="color:#f1fa8c">&#39;ESM compilation failed:&#39;</span>), chalk.red(error.message))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> buildCJS <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> esbuild.build({
</span></span><span style="display:flex;"><span>            entryPoints,
</span></span><span style="display:flex;"><span>            outdir<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;lib/cjs&#39;</span>,
</span></span><span style="display:flex;"><span>            platform<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;node&#39;</span>,
</span></span><span style="display:flex;"><span>            sourcemap<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>            target<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;esnext&#39;</span>,
</span></span><span style="display:flex;"><span>            format<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;cjs&#39;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`echo &#39;{&#34;type&#34;: &#34;commonjs&#34;}&#39; &gt; lib/cjs/package.json`</span>
</span></span><span style="display:flex;"><span>        console.log(chalk.green(<span style="color:#f1fa8c">&#39;CJS compilation successful&#39;</span>))
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>        console.error(chalk.red(<span style="color:#f1fa8c">&#39;CJS compilation failed:&#39;</span>), chalk.red(error.message))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`rm -rf lib`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`npx tsc --declaration --emitDeclarationOnly --outDir lib/esm`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> buildESM()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> $<span style="color:#f1fa8c">`npx tsc --declaration --emitDeclarationOnly --outDir lib/cjs`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">await</span> buildCJS()
</span></span><span style="display:flex;"><span>    console.log(chalk.green(<span style="color:#f1fa8c">&#39;Overall compilation successful&#39;</span>))
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>    console.error(chalk.red(<span style="color:#f1fa8c">&#39;Overall compilation failed:&#39;</span>), chalk.red(error.message))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><ul>
<li>Other more simple way:
For a minimal setup without separate script files, you can add these commands directly to your <code>package.json</code>:</li>
</ul>
<p>Example with <code>pnpm</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;scripts&#34;</span>: {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&#34;build&#34;</span>: <span style="color:#f1fa8c">&#34;pnpm run build:esm &amp;&amp; pnpm run build:cjs&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&#34;build:esm&#34;</span>: <span style="color:#f1fa8c">&#34;tsc -p tsconfig.lib.json --outDir lib/esm&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&#34;build:cjs&#34;</span>: <span style="color:#f1fa8c">&#34;tsc -p tsconfig.lib.json --module CommonJS --moduleResolution Node --verbatimModuleSyntax false --outDir lib/cjs&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&#34;postbuild:cjs&#34;</span>: <span style="color:#f1fa8c">&#34;echo &#39;{\&#34;type\&#34;: \&#34;commonjs\&#34;}&#39; &gt; lib/cjs/package.json&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><hr>
<p>Article originally published at <a href="https://medium.com/p/b5feabac1357">medium.com/tduyng</a> on 14 June, 2024</p>
]]></content>
    <link href="/blog/dual-package-typescript/"></link>
    <category>esm</category>
    <category>dual-package</category>
    <category>typescript</category>
    <category>commonjs</category>
  </entry>
  <entry>
    <title>Essential tsconfig.json options you should use</title>
    <id>/blog/tsconfig-options-you-should-use/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-11-11T00:00:00Z</published>
    <summary>A guide to essential tsconfig.json options for boosting TypeScript code safety, performance, and reliability.</summary>
    <content type="html"><![CDATA[<p>The <code>tsconfig.json</code> file in TypeScript is more than just a list of settings. It's a tool to manage how your code behaves, how secure it is, and how well it works with other systems. Whether you're an experienced TypeScript user or new to the language, understanding these configuration options will help you build a strong, efficient, and easy-to-maintain codebase.</p>
<h2 id="tldr">TL;DR</h2>
<p>Here’s a quick look at recommended best-practice settings for your <code>tsconfig.json</code>. These options will help improve build speed, enforce code safety, enhance debugging, and ensure compatibility:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;incremental&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Enables incremental compilation, build only the changed code
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;strict&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Enables all strict type-checking options (best practice)
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;rootDir&#34;</span>: <span style="color:#f1fa8c">&#34;src&#34;</span>, <span style="color:#6272a4">// Root directory of input files
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;outDir&#34;</span>: <span style="color:#f1fa8c">&#34;./build&#34;</span>, <span style="color:#6272a4">// Output directory for compiled files
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;allowJs&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Allows JavaScript files to be compiled alongside TypeScript files.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;target&#34;</span>: <span style="color:#f1fa8c">&#34;es6&#34;</span>, <span style="color:#6272a4">// Specifies the ECMAScript target version
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;module&#34;</span>: <span style="color:#f1fa8c">&#34;NodeNext&#34;</span>, <span style="color:#6272a4">// Sets the module system to use (commonjs, nodenext, esnext)
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;lib&#34;</span>: [<span style="color:#f1fa8c">&#34;es2024&#34;</span>], <span style="color:#6272a4">// Specifies the library files to be included in the compilation.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;sourceMap&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Generates source maps for debugging
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;skipLibCheck&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Skips type checking of declaration files
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noUnusedParameters&#34;</span>: <span style="color:#ff79c6">false</span>, <span style="color:#6272a4">// Do not allow unused parameters in functions.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noUnusedLocals&#34;</span>: <span style="color:#ff79c6">false</span>, <span style="color:#6272a4">// Similar to noUnusedParameters, but for local variables.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noUncheckedIndexedAccess&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// it ensures that indexed access types are checked for undefined values,
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;esModuleInterop&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Enables compatibility with CommonJS modules, allowing default imports from modules with no default export.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;resolveJsonModule&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Allows importing JSON files as modules
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;forceConsistentCasingInFileNames&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// Ensures that file names are treated with consistent casing, which is important for cross-platform compatibility.,
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noImplicitOverride&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// This option requires that any method in a subclass that overrides a method in a superclass must explicitly use the override keyword.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noPropertyAccessFromIndexSignature&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// This setting enforces that properties accessed via dot notation must be explicitly defined in the type.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;allowUnreachableCode&#34;</span>: <span style="color:#ff79c6">false</span>, <span style="color:#6272a4">// When set to false, this option raises errors for code that is unreachable, meaning it cannot be executed.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noFallthroughCasesInSwitch&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// This option reports errors for switch statement cases that fall through without a break, return, or throw statement.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;noErrorTruncation&#34;</span>: <span style="color:#ff79c6">true</span>, <span style="color:#6272a4">// When enabled, this option prevents TypeScript from truncating error messages, providing full details about the error.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">&#34;declaration&#34;</span>: <span style="color:#ff79c6">true</span> <span style="color:#6272a4">// Generates corresponding .d.ts file
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;include&#34;</span>: [<span style="color:#f1fa8c">&#34;src/**/*.ts&#34;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;exclude&#34;</span>: []
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><h2 id="what-is-tsconfigjson-and-why-it-matters">What Is <code>tsconfig.json</code> and why it matters?</h2>
<p>The <code>tsconfig.json</code> file is a key part of any TypeScript project. It tells the compiler how to turn your TypeScript code into JavaScript. By setting up this file, you can control things like how strict the error checks are and what format the output should be in. This is important for managing real-world production issues effectively.</p>
<h3 id="1-performance-boosters-options-for-faster-compilation">1. Performance boosters: options for faster compilation</h3>
<p><strong><code>incremental: true</code></strong></p>
<blockquote>
<p><em>“Only recompile what has changed.”</em></p>
</blockquote>
<p>The <code>incremental</code> option is ideal for large codebases or iterative projects where only a portion of code changes between builds. When enabled, TypeScript caches the previous build, allowing it to skip recompilation for unchanged files, saving time.</p>
<p><strong>Example:</strong> Suppose you have a large project and make a minor update in one file. With <code>incremental</code> enabled, only that file will be recompiled, significantly reducing the build time.</p>
<h3 id="2-strictness-first-options-for-code-safety">2. Strictness first: options for code safety</h3>
<p><strong><code>strict: true</code></strong></p>
<blockquote>
<p><em>“Enable all strict type-checking options for enhanced code reliability. A TypeScript best practice.”</em></p>
</blockquote>
<p>Setting <code>&quot;strict&quot;: true</code> enables TypeScript’s full range of type-checking features, designed to catch potential bugs and edge cases early. This comprehensive flag is essentially a shortcut that enables several other critical options:</p>
<ul>
<li><strong><code>noImplicitAny</code></strong>: Disallows variables and parameters from being implicitly assigned the <code>any</code> type. This setting forces you to explicitly define types, reducing the risk of unexpected behaviors.</li>
<li><strong><code>strictNullChecks</code></strong>: Ensures <code>null</code> and <code>undefined</code> are treated as distinct types, which makes code more predictable by preventing accidental operations on possibly <code>null</code> or <code>undefined</code> values.</li>
<li><strong><code>strictFunctionTypes</code></strong>: Enforces stricter checking of function types, particularly useful for function assignments and compatibility across different scopes.</li>
<li><strong><code>strictBindCallApply</code></strong>: Adds type checks for the <code>bind</code>, <code>call</code>, and <code>apply</code> methods to ensure arguments are compatible with the function’s parameter types.</li>
<li><strong><code>strictPropertyInitialization</code></strong>: Ensures that class properties are initialized before use, typically by setting them in the constructor, preventing potential runtime errors.</li>
<li><strong><code>noImplicitThis</code></strong>: Triggers an error if the <code>this</code> keyword implicitly has an <code>any</code> type, requiring explicit typing and promoting safer <code>this</code> usage.</li>
<li><strong><code>alwaysStrict</code></strong>: Ensures all files are parsed in ECMAScript’s strict mode (<code>&quot;use strict&quot;;</code> is added to each file), catching more errors at runtime.</li>
<li><strong><code>useUnknownInCatchVariables</code></strong>: Changes the type of the error variable in <code>catch</code> blocks from <code>any</code> to <code>unknown</code>, promoting better error handling by requiring explicit error type checks.</li>
</ul>
<p><strong><code>noUncheckedIndexedAccess: true</code></strong></p>
<blockquote>
<p><em>“Protect against undefined values in object lookups.”</em></p>
</blockquote>
<p>This option is great for when you want an extra layer of safety when accessing object properties dynamically. When enabled, it checks that any indexed access types are not undefined, helping avoid runtime errors.</p>
<h3 id="3-output-management-options-for-organizing-build-files">3. Output management: options for organizing build files</h3>
<p><strong><code>rootDir: &quot;src&quot;</code></strong></p>
<blockquote>
<p><em>“Specifies the directory of input files.”</em></p>
</blockquote>
<p>This option points to the source files directory, which can help keep your project clean by organizing files logically. By setting <code>rootDir</code>, you ensure that the compiler knows where to find the source files it needs to build.</p>
<p><strong><code>outDir: &quot;./build&quot;</code></strong></p>
<blockquote>
<p><em>“Defines the output directory for compiled JavaScript files.”</em></p>
</blockquote>
<p>This is where TypeScript will output compiled files. Specifying an <code>outDir</code> is crucial for keeping your source files (<code>src/</code>) separate from generated JavaScript, making it easier to manage and clean up builds.</p>
<p><strong>Tip:</strong> For a clean project structure, it’s a best practice to specify both <code>rootDir</code> and <code>outDir</code>.</p>
<h3 id="4-compatibility-controls-options-for-cross-platform-and-module-compatibility">4. Compatibility controls: options for cross-platform and module compatibility</h3>
<p><strong><code>target: &quot;es6&quot;</code></strong></p>
<blockquote>
<p><em>“Sets the ECMAScript version for the output.”</em></p>
</blockquote>
<p>TypeScript compiles code to various JavaScript versions, but which version depends on your environment. Setting <code>target</code> to <code>es6</code> is typically ideal for modern applications since it supports async/await and many new JavaScript features while still being compatible with most browsers and Node.js environments.</p>
<p><strong><code>module: &quot;NodeNext&quot;</code></strong></p>
<blockquote>
<p><em>“Defines the module system, such as CommonJS, ESNext, or NodeNext.”</em></p>
</blockquote>
<p>With NodeNext, you can use ES modules alongside TypeScript. This is especially useful if you’re working with libraries or Node.js modules in the latest format. For projects targeting other environments, consider <code>commonjs</code> or <code>esnext</code> depending on the requirements.</p>
<h3 id="5-debugging-and-testing-options-for-a-better-development-experience">5. Debugging and testing: options for a better development experience</h3>
<p><strong><code>sourceMap: true</code></strong></p>
<blockquote>
<p><em>“Generates source maps to assist with debugging.”</em></p>
</blockquote>
<p>Source maps map your TypeScript to the output JavaScript, making debugging in tools like Vscode debug, Chrome DevTools much easier. Without source maps, debugging is cumbersome since errors trace back to the generated JavaScript, not the original TypeScript code.</p>
<p><strong><code>skipLibCheck: true</code></strong></p>
<blockquote>
<p><em>“Skip type-checking for third-party libraries.”</em></p>
</blockquote>
<p>If you use many third-party libraries, setting <code>skipLibCheck</code> to true can reduce the type-checking workload. This can speed up your build process without compromising your code’s safety since it’s assumed libraries are already well-tested.</p>
<h3 id="6-code-quality-enforcements-options-for-cleaner-more-predictable-code">6. Code quality enforcements: options for cleaner, more predictable code</h3>
<p><strong><code>noUnusedParameters</code> and <code>noUnusedLocals: false</code></strong></p>
<blockquote>
<p><em>“Checks for unused parameters and variables.”</em></p>
</blockquote>
<p>These options raise warnings for unused variables and parameters. It’s good practice to enable these for cleaner code, though occasionally setting them to false is helpful during refactoring or experimentation phases.</p>
<p><strong><code>noImplicitOverride: true</code></strong></p>
<blockquote>
<p><em>“Ensures that methods overriding superclass methods explicitly use the <code>override</code> keyword.”</em></p>
</blockquote>
<p>With <code>noImplicitOverride</code>, any overridden method must use the <code>override</code> keyword, making your code more readable and easier to debug, especially in large projects.</p>
<h3 id="7-module-and-json-compatibility-options-for-better-interoperability">7. Module and JSON compatibility: options for better Interoperability</h3>
<p><strong><code>esModuleInterop: true</code></strong></p>
<blockquote>
<p><em>“Allows default imports from CommonJS modules.”</em></p>
</blockquote>
<p>In TypeScript, some modules need interop handling between ES modules and CommonJS. With <code>esModuleInterop</code>, you can cleanly import default exports from CommonJS modules, making it easier to integrate libraries.</p>
<p><strong><code>resolveJsonModule: true</code></strong></p>
<blockquote>
<p><em>“Enables importing JSON files as modules.”</em></p>
</blockquote>
<p>Importing JSON files is often needed for configuration, localization, or mock data. By enabling <code>resolveJsonModule</code>, you can import JSON directly, with TypeScript automatically typing it as <code>any</code>.</p>
<h3 id="8-case-sensitivity-and-cross-platform-stability">8. Case sensitivity and cross-platform stability</h3>
<p><strong><code>forceConsistentCasingInFileNames: true</code></strong></p>
<blockquote>
<p><em>“Prevents issues from inconsistent file naming, which can break cross-platform compatibility.”</em></p>
</blockquote>
<p>This option ensures case-sensitive file paths across platforms, preventing subtle bugs and cross-platform issues, especially between Unix and Windows.</p>
<h3 id="9-preventing-common-mistakes-safety-checks-and-fallthrough-cases">9. Preventing common mistakes: safety checks and fallthrough cases</h3>
<p><strong><code>allowUnreachableCode: false</code></strong></p>
<blockquote>
<p><em>“Raises errors for unreachable code.”</em></p>
</blockquote>
<p>Set <code>allowUnreachableCode</code> to false to prevent unreachable code from sneaking into production, ensuring cleaner and more intentional code paths.</p>
<p><strong><code>noFallthroughCasesInSwitch: true</code></strong></p>
<blockquote>
<p><em>“Raises errors for fall-through cases in switch statements.”</em></p>
</blockquote>
<p>This option prevents unexpected behavior in <code>switch</code> statements by enforcing an error if a <code>case</code> falls through without an explicit <code>break</code>, <code>return</code>, or <code>throw</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Understanding the options in <code>tsconfig.json</code> can greatly enhance your TypeScript development by speeding up builds, organizing output, improving code quality, and making debugging easier. Master these settings to customize your TypeScript projects effectively, producing code that is efficient, easy to maintain, and secure.</p>
<hr>
<p>Article also published at <a href="https://medium.com/p/3187af924221">medium.com/tduyng</a>.</p>
]]></content>
    <link href="/blog/tsconfig-options-you-should-use/"></link>
    <category>typescript</category>
    <category>tsconfig</category>
    <category>best-practices</category>
  </entry>
  <entry>
    <title>Migrate to ESLint 9.x</title>
    <id>/blog/migrating-to-eslint9x/</id>
    <updated>2025-03-11T00:00:00Z</updated>
    <published>2024-07-16T00:00:00Z</published>
    <summary>In this article, I share some experiences of migrating to ESLint 9.x, which includes significant breaking changes. We&#39;ll use the flat config, integrate ESLint plugins, and specify custom rules for various file types: .js, .cjs, .mjs and .ts</summary>
    <content type="html"><![CDATA[<p>Have you updated your ESLint setup to version 9.x? This version includes <a href="https://eslint.org/blog/2024/04/eslint-v9.0.0-released/">many breaking changes</a>. Two major changes you need to consider are:</p>
<ul>
<li>Node.js &lt; v18.18.0 and v19 are no longer supported.</li>
<li>Flat config is now the default and has some changes.</li>
</ul>
<h2 id="flat-config">Flat config</h2>
<p>ESLint's new flat config system makes setting up easier by using just one JavaScript file (named <code>eslint.config.js, eslint.config.mjs, or eslint.config.cjs</code>). This is different from the old way, which used several different files like <code>.eslintrc*</code> and the <code>package.json</code>.</p>
<p>Here is a simple comparison between legacy config and flat config:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Aspect</th>
<th style="text-align:center">Legacy Config</th>
<th style="text-align:center">Flat Config</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Sources</td>
<td style="text-align:center"><code>.eslintrc</code> <code>.js, .json, .yml</code>, <code>package.json</code>, etc.</td>
<td style="text-align:center"><code>eslint.config.js</code> <code>.cjs, .mjs</code></td>
</tr>
<tr>
<td style="text-align:center">Configuration style</td>
<td style="text-align:center">Convention-based <code>extends</code></td>
<td style="text-align:center">Explicit native imports</td>
</tr>
<tr>
<td style="text-align:center">Plugin definition</td>
<td style="text-align:center">Package-named <code>plugins</code></td>
<td style="text-align:center">Plugins are objects</td>
</tr>
<tr>
<td style="text-align:center">Inheritance tree</td>
<td style="text-align:center">Potentially complex</td>
<td style="text-align:center">Composable and traceable</td>
</tr>
</tbody>
</table>
<p><strong>Benefits of the flat config</strong></p>
<ul>
<li>Performance: Reduced overhead due to a single configuration source.</li>
<li>Maintainability: Easier to manage and update.</li>
<li>Flexibility: More straightforward to compose and understand.</li>
</ul>
<p>You can learn more about the reason for the flat config by visiting these links: <a href="https://eslint.org/blog/2023/10/flat-config-rollout-plans/">here</a> and <a href="https://eslint.org/docs/latest/use/configure/configuration-files">here</a>. For more information on the syntax and concepts, check out the <a href="https://eslint.org/docs/latest/use/configure/">ESLint configuration page</a>.</p>
<p>Now, in ESLint 9.x, the flat config is enabled by default, which means the old <code>eslintrc*</code> configuration files won't work properly.</p>
<p>Here is the flat config rollout timeline:
<img src="img/flat-config.webp" alt="flat config rollout timeline" loading="lazy">
<small>Image by Antony Fu (<a href="https://portal.gitnation.org/contents/eslint-one-for-all-made-easy">https://portal.gitnation.org/contents/eslint-one-for-all-made-easy</a>)</small></p>
<p>If you want to continue to use the legacy way, you can turn off the new system by setting an environment variable called <code>ESLINT_USE_FLAT_CONFIG</code> to <code>false</code>, but you'll see a warning message in your terminal. So the recommended way is to migrate to the flat config file. This might pose some challenges if you aren't familiar with this new system.</p>
<h2 id="example-of-migrating-eslint-9x-in-a-typescript-project">Example of migrating ESLint 9.x in a Typescript project</h2>
<p>We'll dive directly into an example to better understand how the flat config works. We will migrate a legacy ESLint config from ESLint 8.x to ESLint 9.x.</p>
<h3 id="preparing-for-migration">Preparing for migration</h3>
<p>Here are some steps to consider for the migration:</p>
<ul>
<li><strong>Verify plugin support</strong>: Ensure that all the plugins you use support ESLint 9.x and the flat config. You can track <a href="https://github.com/eslint/eslint/issues/18391">ESLint v9 support</a> and <a href="https://github.com/eslint/eslint/issues/18093">flat config support</a>. Most popular plugins already support these changes.</li>
<li><strong>Update NodeJS and dependencies</strong></li>
<li><strong>Separate Prettier and ESLint</strong>: (If you use the <code>plugin:prettier</code> plugin) ESLint has <a href="https://eslint.org/blog/2023/10/deprecating-formatting-rules/">deprecated formatter rules</a>, meaning there is no format syntax with ESLint. This reduces conflicts between ESLint and Prettier. To simplify the ESLint config, I recommend separating ESLint and Prettier, and no longer using <code>plugin:prettier</code>. This also allows flexibility in choosing other formatter tools like Biome.</li>
</ul>
<h3 id="use-the-migrator-tool">Use the migrator tool</h3>
<p>The ESLint team has developed a <a href="https://eslint.org/blog/2024/05/eslint-configuration-migrator/">migrator tool</a> to help convert legacy config files (e.g., <code>.eslintrc*</code>) to the flat config.</p>
<p>Here's how to use it:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>npx @eslint/migrate-config .eslintrc.yml
</span></span></code></pre><p>Here is a simple example of a legacy config file <code>.eslintrc.yml</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">parser</span>: <span style="color:#f1fa8c">&#39;@typescript-eslint/parser&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">parserOptions</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">project</span>: ./tsconfig.json
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">sourceType</span>: module
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">env</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">node</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">jest</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">plugins</span>:
</span></span><span style="display:flex;"><span>    - import
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">extends</span>:
</span></span><span style="display:flex;"><span>    - eslint:recommended
</span></span><span style="display:flex;"><span>    - plugin:@typescript-eslint/recommended
</span></span><span style="display:flex;"><span>    - plugin:prettier/recommended
</span></span><span style="display:flex;"><span>    - plugin:import/recommended
</span></span><span style="display:flex;"><span>    - plugin:import/typescript
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">settings</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">import/resolver</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">typescript</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">node</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">rules</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;@typescript-eslint/no-use-before-define&#39;</span>: <span style="color:#f1fa8c">&#39;off&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;require-await&#39;</span>: <span style="color:#f1fa8c">&#39;off&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;no-duplicate-imports&#39;</span>: <span style="color:#f1fa8c">&#39;error&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;no-unneeded-ternary&#39;</span>: <span style="color:#f1fa8c">&#39;error&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;prefer-object-spread&#39;</span>: <span style="color:#f1fa8c">&#39;error&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#39;@typescript-eslint/no-unused-vars&#39;</span>: [<span style="color:#f1fa8c">&#39;error&#39;</span>, { <span style="color:#ff79c6">ignoreRestSiblings: true, args</span>: <span style="color:#f1fa8c">&#39;none&#39;</span> }]
</span></span></code></pre><p>This simple ESLint config is for a TypeScript NodeJS project with Jest for testing and includes various plugins for different rules. Your project might contain more plugins, more rules, or use different config file types (<code>.eslintrc.{js, cjs, mjs}</code> or <code>.eslintrc</code>), but the process for updating your setup will be similar</p>
<p>Here is the generated config by migrator tool:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { fixupConfigRules, fixupPluginRules } from <span style="color:#f1fa8c">&#39;@eslint/compat&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> _import from <span style="color:#f1fa8c">&#39;eslint-plugin-import&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> globals from <span style="color:#f1fa8c">&#39;globals&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> tsParser from <span style="color:#f1fa8c">&#39;@typescript-eslint/parser&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> path from <span style="color:#f1fa8c">&#39;node:path&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { fileURLToPath } from <span style="color:#f1fa8c">&#39;node:url&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> js from <span style="color:#f1fa8c">&#39;@eslint/js&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { FlatCompat } from <span style="color:#f1fa8c">&#39;@eslint/eslintrc&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> __filename <span style="color:#ff79c6">=</span> fileURLToPath(<span style="color:#ff79c6">import</span>.meta.url)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> __dirname <span style="color:#ff79c6">=</span> path.dirname(__filename)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> compat <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> FlatCompat({
</span></span><span style="display:flex;"><span>    baseDirectory<span style="color:#ff79c6">:</span> __dirname,
</span></span><span style="display:flex;"><span>    recommendedConfig<span style="color:#ff79c6">:</span> js.configs.recommended,
</span></span><span style="display:flex;"><span>    allConfig<span style="color:#ff79c6">:</span> js.configs.all,
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">default</span> [
</span></span><span style="display:flex;"><span>    ...fixupConfigRules(
</span></span><span style="display:flex;"><span>        compat.<span style="color:#ff79c6">extends</span>(
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;eslint:recommended&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;plugin:@typescript-eslint/recommended&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;plugin:prettier/recommended&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;plugin:import/recommended&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;plugin:import/typescript&#39;</span>,
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        plugins<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">import</span><span style="color:#ff79c6">:</span> fixupPluginRules(_import),
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        languageOptions<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            globals<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>                ...globals.node,
</span></span><span style="display:flex;"><span>                ...globals.jest,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            parser<span style="color:#ff79c6">:</span> tsParser,
</span></span><span style="display:flex;"><span>            ecmaVersion<span style="color:#ff79c6">:</span> <span style="color:#bd93f9">5</span>,
</span></span><span style="display:flex;"><span>            sourceType<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;module&#39;</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            parserOptions<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>                project<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;./tsconfig.json&#39;</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        settings<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;import/resolver&#39;</span><span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>                typescript<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>                node<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        rules<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;@typescript-eslint/no-use-before-define&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;off&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;require-await&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;off&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;no-duplicate-imports&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;no-unneeded-ternary&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;prefer-object-spread&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;@typescript-eslint/no-unused-vars&#39;</span><span style="color:#ff79c6">:</span> [
</span></span><span style="display:flex;"><span>                <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    ignoreRestSiblings<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>                    args<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;none&#39;</span>,
</span></span><span style="display:flex;"><span>                },
</span></span><span style="display:flex;"><span>            ],
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>]
</span></span></code></pre><p>The migrator will prompt you to install additional packages:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>Wrote new config to ./eslint.config.mjs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You will need to install the following packages to use the new config:
</span></span><span style="display:flex;"><span>- @eslint/compat
</span></span><span style="display:flex;"><span>- globals
</span></span><span style="display:flex;"><span>- @eslint/js
</span></span><span style="display:flex;"><span>- @eslint/eslintrc
</span></span></code></pre><ul>
<li><a href="https://www.npmjs.com/package/@eslint/js">@eslint/js</a>: ESLint team start to <a href="https://eslint.org/blog/2024/07/whats-coming-next-for-eslint/">make a core rewrite the ESLint</a>, all the rules, documentations will move to the new package. This is a ESLint Javascript package rules. We will also have <code>@eslint/json</code> for json linter, <code>@eslint/markdown</code> for markdown linter.</li>
<li><a href="https://www.npmjs.com/package/@eslint/eslintrc">@eslint/eslintrc</a>: This package contains the legacy <code>eslintrc</code> configuration file format for ESLint. You will not need it if you start to write a new flat config files</li>
<li><a href="https://www.npmjs.com/package/@eslint/compat">@eslint/compat</a>: This package allow you to wrap existing previous ESLint rules, plugins and configurations.</li>
</ul>
<p>After using the migrator, we can identify additional dependencies we need to install: <code>@eslint/js</code> and <code>globals</code>.
We no longer need the package <code>@eslint/eslintrc</code> since we are now using the flat config file. Additionally, <code>@eslint/compat</code> is not necessary unless certain plugins in your project do not support the flat config.</p>
<p>This tool might not produce a perfect result, but it provides a good starting point. That help us understand better how the syntax of the flat config look like. But in all cases, it will not work directly, we need to require a lot of manual adjustments. We will see the next part to know how better writting the flat config.</p>
<h3 id="writing-the-new-config">Writing the new config</h3>
<p>Considering our project contains different file extensions such as <code>js, mjs, ts</code>, the new config should be written like this:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> importPlugin from <span style="color:#f1fa8c">&#39;eslint-plugin-import&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> globals from <span style="color:#f1fa8c">&#39;globals&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> tsParser from <span style="color:#f1fa8c">&#39;@typescript-eslint/parser&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> eslintJs from <span style="color:#f1fa8c">&#39;@eslint/js&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> eslintTs from <span style="color:#f1fa8c">&#39;typescript-eslint&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> tsFiles <span style="color:#ff79c6">=</span> [<span style="color:#f1fa8c">&#39;{app,tests}/**/*.ts&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> languageOptions <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    globals<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        ...globals.node,
</span></span><span style="display:flex;"><span>        ...globals.jest,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    ecmaVersion<span style="color:#ff79c6">:</span> <span style="color:#bd93f9">2023</span>,
</span></span><span style="display:flex;"><span>    sourceType<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;module&#39;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> customTypescriptConfig <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    files<span style="color:#ff79c6">:</span> tsFiles,
</span></span><span style="display:flex;"><span>    plugins<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">import</span><span style="color:#ff79c6">:</span> importPlugin,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;import/parsers&#39;</span><span style="color:#ff79c6">:</span> tsParser,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    languageOptions<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        ...languageOptions,
</span></span><span style="display:flex;"><span>        parser<span style="color:#ff79c6">:</span> tsParser,
</span></span><span style="display:flex;"><span>        parserOptions<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            project<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;./tsconfig.json&#39;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    settings<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;import/parsers&#39;</span><span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;@typescript-eslint/parser&#39;</span><span style="color:#ff79c6">:</span> [<span style="color:#f1fa8c">&#39;.ts&#39;</span>],
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    rules<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;import/export&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;import/no-duplicates&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;warn&#39;</span>,
</span></span><span style="display:flex;"><span>        ...importPlugin.configs.typescript.rules,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;@typescript-eslint/no-use-before-define&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;off&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;require-await&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;off&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;no-duplicate-imports&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;no-unneeded-ternary&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;prefer-object-spread&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f1fa8c">&#39;@typescript-eslint/no-unused-vars&#39;</span><span style="color:#ff79c6">:</span> [
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;error&#39;</span>,
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                ignoreRestSiblings<span style="color:#ff79c6">:</span> <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>                args<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;none&#39;</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Add the files for applying the recommended TypeScript configs
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// only for the Typescript files.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// This is necessary when we have the multiple extensions files
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// (e.g. .ts, .tsx, .js, .cjs, .mjs, etc.).
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">const</span> recommendedTypeScriptConfigs <span style="color:#ff79c6">=</span> [
</span></span><span style="display:flex;"><span>    ...eslintTs.configs.recommended.map((config) =&gt; ({
</span></span><span style="display:flex;"><span>        ...config,
</span></span><span style="display:flex;"><span>        files<span style="color:#ff79c6">:</span> tsFiles,
</span></span><span style="display:flex;"><span>    })),
</span></span><span style="display:flex;"><span>    ...eslintTs.configs.stylistic.map((config) =&gt; ({
</span></span><span style="display:flex;"><span>        ...config,
</span></span><span style="display:flex;"><span>        files<span style="color:#ff79c6">:</span> tsFiles,
</span></span><span style="display:flex;"><span>    })),
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">default</span> [
</span></span><span style="display:flex;"><span>    { ignores<span style="color:#ff79c6">:</span> [<span style="color:#f1fa8c">&#39;docs/*&#39;</span>, <span style="color:#f1fa8c">&#39;build/*&#39;</span>, <span style="color:#f1fa8c">&#39;lib/*&#39;</span>, <span style="color:#f1fa8c">&#39;dist/*&#39;</span>] }, <span style="color:#6272a4">// global ignores
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    eslintJs.configs.recommended,
</span></span><span style="display:flex;"><span>    ...recommendedTypeScriptConfigs,
</span></span><span style="display:flex;"><span>    customTypescriptConfig,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre><p>You might notice that we don’t need to use tools like <code>@eslint/compat</code> or <code>@eslint/eslintrc</code>, which keeps the config cleaner and easier to maintain.</p>
<p>If some plugins in your project do not yet support the flat config, you will need to use <code>@eslint/compat</code>. For example, the package <code>eslint-plugin-import</code> <a href="https://github.com/import-js/eslint-plugin-import/issues/2556">does not fully support the flat config yet</a>, so some rules might not work correctly. In my case, I use <code>importPlugin.configs.typescript.rules</code> which works without using <code>@eslint/compat</code>.</p>
<p>For specific rules and file extensions, such as <code>common.js</code> files, we provide separate configurations to ensure they are correctly linted according to their specific requirements:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">const</span> customCommonJSConfig <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    files<span style="color:#ff79c6">:</span> [<span style="color:#f1fa8c">&#39;{app,tests}/**/*.cjs&#39;</span>],
</span></span><span style="display:flex;"><span>    languageOptions<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>        ...languageOptions,
</span></span><span style="display:flex;"><span>        sourceType<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;commonjs&#39;</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    rules<span style="color:#ff79c6">:</span> customCommonJSRules,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> customESMConfig <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    files<span style="color:#ff79c6">:</span> [<span style="color:#f1fa8c">&#39;{app,tests}/**/*.{.js,mjs}&#39;</span>],
</span></span><span style="display:flex;"><span>    languageOptions,
</span></span><span style="display:flex;"><span>    rules<span style="color:#ff79c6">:</span> customESMRules,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// And add it to the export config
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">default</span> [
</span></span><span style="display:flex;"><span>    { ignores<span style="color:#ff79c6">:</span> [<span style="color:#f1fa8c">&#39;docs/*&#39;</span>, <span style="color:#f1fa8c">&#39;build/*&#39;</span>, <span style="color:#f1fa8c">&#39;lib/*&#39;</span>, <span style="color:#f1fa8c">&#39;dist/*&#39;</span>] }, <span style="color:#6272a4">// global ignores,
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    eslintJs.configs.recommended,
</span></span><span style="display:flex;"><span>    customESMConfig,
</span></span><span style="display:flex;"><span>    customCommonJSConfig,
</span></span><span style="display:flex;"><span>    ...recommendedTypeScriptConfigs,
</span></span><span style="display:flex;"><span>    customTypescriptConfig,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre><p>By using the <code>files</code> field, you can ensure that the defined rules apply only to the specified files, providing more granular control over your linting process. This is especially useful in projects with multiple file types, such as JavaScript, TypeScript, and CommonJS files, etc..., where each type may require different linting rules.</p>
<p>That's all!</p>
<p><strong>Bonus: ESLint Inspector</strong></p>
<p>Once you have finished writing your ESLint config file, you can use the tool <a href="https://eslint.org/blog/2024/04/eslint-config-inspector/">eslint-config-inspector</a>. It's a visual tool for inspecting and understanding your ESLint flat configs. Give it a try to better understand your config.</p>
<hr>
<h2 id="updated-march-11-2025">UPDATED: March 11, 2025</h2>
<p>ESLint recently has made significant improvements for the way to define the configuration files.
You can now use <code>defineConfig</code> from <code>eslint/config</code> to extend your configuration.
This brings back the <code>extends</code> functionality, adds support for global ignores, and maintains compatibility with older plugins…etc. (and a lot of good new features for us)</p>
<p>These changes make migrating to ESLint 9.x much easier than before. Many thanks to the ESLint team for their development efforts!</p>
<p>For more details, check the official ESLint blog post: <a href="https://eslint.org/blog/2025/03/flat-config-extends-define-config-global-ignores/">Evolving flat config with extends</a></p>
]]></content>
    <link href="/blog/migrating-to-eslint9x/"></link>
    <category>eslint</category>
    <category>typescript</category>
    <category>migration</category>
    <category>nodejs</category>
  </entry>
  <entry>
    <title>Why you might be using Enums in TypeScript wrong</title>
    <id>/blog/enum-typescript/</id>
    <updated>2024-06-24T00:00:00Z</updated>
    <published>2024-06-21T00:00:00Z</published>
    <summary>Discover the pitfalls of using Enums in TypeScript and explore a more type-safe alternative with `as const`</summary>
    <content type="html"><![CDATA[<p>The topic of using enums in TypeScript has been discussed a lot, but many developers still remain unaware of their drawbacks. Even though enums are popular and commonly used, they might not always be the best choice. In this article, I'll share my thoughts on why enums can be a problem and show you a better way to do things.</p>
<h2 id="tldr">TL;DR</h2>
<ul>
<li><code>enum</code> is a TypeScript-only feature and doesn't exist in JavaScript.</li>
<li><code>enum</code> has several problems:
<ul>
<li>The compiled output can be hard to read and understand, leading to potential bugs.</li>
<li>Performance impacts due to runtime creation and initialization.</li>
<li>Compatibility issues with type declarations, especially in projects using <code>isolatedModules</code>.</li>
</ul>
</li>
<li>Use <code>as const</code> with a generic type helper: <code>export type TypeFrom&lt;T&gt; = T[keyof T]</code> for a simpler, more efficient alternative.</li>
</ul>
<p>If you are a TypeScript developer, you’re likely familiar with using <code>enums</code>. However, have you ever considered what <code>enums</code> in TypeScript actually represent? It's worth noting that JavaScript doesn't have the <code>enum</code> feature.</p>
<blockquote>
<p>It's important to remember that TypeScript is essentially JavaScript with type, and the resulting code executed in the browser or backend environment is JavaScript.</p>
</blockquote>
<p>So, how exactly do <code>enums</code> when transitioning between TypeScript and JavaScript?</p>
<p>Here is a simple example of an <code>enum</code> in TypeScript:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// constant.ts
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">enum</span> HttpStatusCode {
</span></span><span style="display:flex;"><span>    Ok <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">200</span>,
</span></span><span style="display:flex;"><span>    BadRequest <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">400</span>,
</span></span><span style="display:flex;"><span>    Authorized <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">401</span>,
</span></span><span style="display:flex;"><span>    Forbidden <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">403</span>,
</span></span><span style="display:flex;"><span>    NotFound <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">404</span>,
</span></span><span style="display:flex;"><span>    InternalServerError <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">500</span>,
</span></span><span style="display:flex;"><span>    GatewayTimeout <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">503</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">enum</span> Color {
</span></span><span style="display:flex;"><span>    Red,
</span></span><span style="display:flex;"><span>    Green,
</span></span><span style="display:flex;"><span>    Blue,
</span></span><span style="display:flex;"><span>    Yellow <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span>,
</span></span><span style="display:flex;"><span>    Purple,
</span></span><span style="display:flex;"><span>    Orange,
</span></span><span style="display:flex;"><span>    Pink,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">enum</span> E2 {
</span></span><span style="display:flex;"><span>    A <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span>,
</span></span><span style="display:flex;"><span>    B <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">20</span>,
</span></span><span style="display:flex;"><span>    C,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">enum</span> FileAccess {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// constant members
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    None,
</span></span><span style="display:flex;"><span>    Read <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">1</span>,
</span></span><span style="display:flex;"><span>    Write <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">2</span>,
</span></span><span style="display:flex;"><span>    ReadWrite <span style="color:#ff79c6">=</span> Read <span style="color:#ff79c6">|</span> Write,
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// computed member
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    G <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;123&#39;</span>.length,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>And here is the JavaScript code after compilation:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// constant.js
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#8be9fd;font-style:italic">var</span> HttpStatusCode
</span></span><span style="display:flex;"><span>;(<span style="color:#8be9fd;font-style:italic">function</span> (HttpStatusCode) {
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;Ok&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">200</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Ok&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;BadRequest&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">400</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;BadRequest&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;Authorized&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">401</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Authorized&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;Forbidden&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">403</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Forbidden&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;NotFound&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">404</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;NotFound&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;InternalServerError&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">500</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;InternalServerError&#39;</span>
</span></span><span style="display:flex;"><span>    HttpStatusCode[(HttpStatusCode[<span style="color:#f1fa8c">&#39;GatewayTimeout&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">503</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;GatewayTimeout&#39;</span>
</span></span><span style="display:flex;"><span>})(HttpStatusCode <span style="color:#ff79c6">||</span> (HttpStatusCode <span style="color:#ff79c6">=</span> {}))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">var</span> Color
</span></span><span style="display:flex;"><span>;(<span style="color:#8be9fd;font-style:italic">function</span> (Color) {
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Red&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Red&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Green&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Green&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Blue&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Blue&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Yellow&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">10</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Yellow&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Purple&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">11</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Purple&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Orange&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">12</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Orange&#39;</span>
</span></span><span style="display:flex;"><span>    Color[(Color[<span style="color:#f1fa8c">&#39;Pink&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">13</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Pink&#39;</span>
</span></span><span style="display:flex;"><span>})(Color <span style="color:#ff79c6">||</span> (Color <span style="color:#ff79c6">=</span> {}))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#8be9fd;font-style:italic">var</span> E2
</span></span><span style="display:flex;"><span>;(<span style="color:#8be9fd;font-style:italic">function</span> (E2) {
</span></span><span style="display:flex;"><span>    E2[(E2[<span style="color:#f1fa8c">&#39;A&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">1</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>    E2[(E2[<span style="color:#f1fa8c">&#39;B&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">20</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;B&#39;</span>
</span></span><span style="display:flex;"><span>    E2[(E2[<span style="color:#f1fa8c">&#39;C&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">21</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;C&#39;</span>
</span></span><span style="display:flex;"><span>})(E2 <span style="color:#ff79c6">||</span> (E2 <span style="color:#ff79c6">=</span> {}))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#8be9fd;font-style:italic">var</span> FileAccess
</span></span><span style="display:flex;"><span>;(<span style="color:#8be9fd;font-style:italic">function</span> (FileAccess) {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// constant members
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    FileAccess[(FileAccess[<span style="color:#f1fa8c">&#39;None&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;None&#39;</span>
</span></span><span style="display:flex;"><span>    FileAccess[(FileAccess[<span style="color:#f1fa8c">&#39;Read&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">2</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Read&#39;</span>
</span></span><span style="display:flex;"><span>    FileAccess[(FileAccess[<span style="color:#f1fa8c">&#39;Write&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">4</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;Write&#39;</span>
</span></span><span style="display:flex;"><span>    FileAccess[(FileAccess[<span style="color:#f1fa8c">&#39;ReadWrite&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">6</span>)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;ReadWrite&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// computed member
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    FileAccess[(FileAccess[<span style="color:#f1fa8c">&#39;G&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;123&#39;</span>.length)] <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;G&#39;</span>
</span></span><span style="display:flex;"><span>})(FileAccess <span style="color:#ff79c6">||</span> (FileAccess <span style="color:#ff79c6">=</span> {}))
</span></span></code></pre><p>Do you see the difference between the TypeScript code and the JavaScript code? That's quite difficult to read, right?</p>
<p>When compiled to JavaScript, <code>enums</code> are created as functions with the same name as our <code>enum</code> and the key-values are added to that function.</p>
<h2 id="so-what-is-the-problem-with-enum">So what is the problem with enum?</h2>
<ol>
<li>
<p><strong>Understanding output code</strong></p>
<p>Because the code and the output do not look the same, it makes it harder to read and understand the code. This can lead to unexpected bugs at runtime.</p>
<p>As seen in the example above, if we specify an index base, the index base of all the subsequent keys changes. Sometimes, it can be very difficult to understand what's going on with the output of an <code>enum</code>.</p>
</li>
</ol>
<p>For example:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>console.log(Color.Purple) <span style="color:#6272a4">// ???
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// The output is 11.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// If we read only the TypeScript code for this case,
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// we might not be sure about the result
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// without understanding the underlying enum value assignments.
</span></span></span></code></pre><ol start="2">
<li>
<p><strong>Compatibility issues with type declarations</strong></p>
<p>When building projects or libraries that consume types with <code>.d.ts</code> files, using <code>enum</code> types can cause issues. Specifically, if a project uses <a href="https://www.typescriptlang.org/tsconfig/#references-to-const-enum-members">isolatedModules</a>, it may not be able to use <code>enum</code> types effectively. This problem has been encountered in our projects as well.</p>
</li>
<li>
<p><del>Performance impact</del></p>
<p><del>The <code>enum</code> object is compiled to a function in JavaScript, which needs to be created and initialised at runtime each time the <code>enum</code> is called. This can affect performance, especially in large applications.</del></p>
<p>When compiled to JavaScript, enums use an Immediately Invoked Function Expression (IIFE). This IIFE runs once to initialise an object representing the enum. After initialisation, accessing enum values is efficient as it involves simple property lookups, with no additional function calls. Therefore, there is not a significant performance difference between using enums and const objects.</p>
<blockquote>
<p>Thanks to <a href="https://github.com/dios-david">David Dios</a> for <a href="https://github.com/tduyng/tduyng.github.io/discussions/15">the correction</a></p>
</blockquote>
</li>
</ol>
<p>For more detailed discussions on the drawbacks to using <code>enum</code> in TypeScript, you can refer to these resources:</p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/enums.html">The official TypeScript documentation</a></li>
<li><a href="https://www.reddit.com/r/typescript/comments/yr4vv5/typescript_enums_are_terrible_heres_why/">TypeScript Enums are TERRIBLE. Here's Why</a></li>
<li><a href="https://www.crocoder.dev/blog/typescript-enums-good-bad-and-ugly/">TypeScript Enums: The Good, The Bad, and The Ugly</a></li>
</ul>
<h2 id="what-is-the-solution-instead">What is the solution instead?</h2>
<p>The Typescript team provides a simple alternative solution for <code>enum</code>:</p>
<blockquote>
<p>In modern TypeScript, you may not need an enum when an object with <code>as const</code> could suffice.</p>
</blockquote>
<p>So, you might not use enum at all and use <code>as const</code> instead.</p>
<p>Here is an example of the output in JavaScript if we use <code>as const</code> to see how it works:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// constant.ts
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// Alternative enums solutions
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> HttpStatusCodes <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Ok: <span style="color:#8be9fd">200</span>,
</span></span><span style="display:flex;"><span>    BadRequest: <span style="color:#8be9fd">400</span>,
</span></span><span style="display:flex;"><span>    Authorized: <span style="color:#8be9fd">401</span>,
</span></span><span style="display:flex;"><span>    Forbidden: <span style="color:#8be9fd">403</span>,
</span></span><span style="display:flex;"><span>    NotFound: <span style="color:#8be9fd">404</span>,
</span></span><span style="display:flex;"><span>    InternalServerError: <span style="color:#8be9fd">500</span>,
</span></span><span style="display:flex;"><span>    GatewayTimeout: <span style="color:#8be9fd">503</span>,
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">as</span> <span style="color:#ff79c6">const</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> Colors <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Red: <span style="color:#8be9fd">0</span>,
</span></span><span style="display:flex;"><span>    Green: <span style="color:#8be9fd">1</span>,
</span></span><span style="display:flex;"><span>    Blue: <span style="color:#8be9fd">2</span>,
</span></span><span style="display:flex;"><span>    Yellow: <span style="color:#8be9fd">3</span>,
</span></span><span style="display:flex;"><span>    Purple: <span style="color:#8be9fd">11</span>,
</span></span><span style="display:flex;"><span>    Orange: <span style="color:#8be9fd">5</span>,
</span></span><span style="display:flex;"><span>    Pink: <span style="color:#8be9fd">6</span>,
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">as</span> <span style="color:#ff79c6">const</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Or
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> Colors2 <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Red<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Red&#39;</span>,
</span></span><span style="display:flex;"><span>    Green<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Green&#39;</span>,
</span></span><span style="display:flex;"><span>    Blue<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Blue&#39;</span>,
</span></span><span style="display:flex;"><span>    Yellow<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Yellow&#39;</span>,
</span></span><span style="display:flex;"><span>    Purple<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Purple&#39;</span>,
</span></span><span style="display:flex;"><span>    Orange<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Orange&#39;</span>,
</span></span><span style="display:flex;"><span>    Pink<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Pink&#39;</span>,
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">as</span> <span style="color:#ff79c6">const</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> FileAccesses <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    None: <span style="color:#8be9fd">0</span>,
</span></span><span style="display:flex;"><span>    Read: <span style="color:#8be9fd">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">1</span>,
</span></span><span style="display:flex;"><span>    Write: <span style="color:#8be9fd">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">2</span>,
</span></span><span style="display:flex;"><span>    ReadWrite: <span style="color:#8be9fd">3</span>,
</span></span><span style="display:flex;"><span>    G<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;123&#39;</span>.length,
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">as</span> <span style="color:#ff79c6">const</span>
</span></span></code></pre><p>And you will have the same code when compiled to JavaScript (without <code>as const</code>)</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// constant.js
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> HttpStatusCodes <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Ok: <span style="color:#8be9fd">200</span>,
</span></span><span style="display:flex;"><span>    BadRequest: <span style="color:#8be9fd">400</span>,
</span></span><span style="display:flex;"><span>    Authorized: <span style="color:#8be9fd">401</span>,
</span></span><span style="display:flex;"><span>    Forbidden: <span style="color:#8be9fd">403</span>,
</span></span><span style="display:flex;"><span>    NotFound: <span style="color:#8be9fd">404</span>,
</span></span><span style="display:flex;"><span>    InternalServerError: <span style="color:#8be9fd">500</span>,
</span></span><span style="display:flex;"><span>    GatewayTimeout: <span style="color:#8be9fd">503</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> Colors <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Red: <span style="color:#8be9fd">0</span>,
</span></span><span style="display:flex;"><span>    Green: <span style="color:#8be9fd">1</span>,
</span></span><span style="display:flex;"><span>    Blue: <span style="color:#8be9fd">2</span>,
</span></span><span style="display:flex;"><span>    Yellow: <span style="color:#8be9fd">3</span>,
</span></span><span style="display:flex;"><span>    Purple: <span style="color:#8be9fd">11</span>,
</span></span><span style="display:flex;"><span>    Orange: <span style="color:#8be9fd">5</span>,
</span></span><span style="display:flex;"><span>    Pink: <span style="color:#8be9fd">6</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> Colors2 <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Red<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Red&#39;</span>,
</span></span><span style="display:flex;"><span>    Green<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Green&#39;</span>,
</span></span><span style="display:flex;"><span>    Blue<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Blue&#39;</span>,
</span></span><span style="display:flex;"><span>    Yellow<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Yellow&#39;</span>,
</span></span><span style="display:flex;"><span>    Purple<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Purple&#39;</span>,
</span></span><span style="display:flex;"><span>    Orange<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Orange&#39;</span>,
</span></span><span style="display:flex;"><span>    Pink<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;Pink&#39;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> FileAccesses <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    None: <span style="color:#8be9fd">0</span>,
</span></span><span style="display:flex;"><span>    Read: <span style="color:#8be9fd">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">1</span>,
</span></span><span style="display:flex;"><span>    Write: <span style="color:#8be9fd">1</span> <span style="color:#ff79c6">&lt;&lt;</span> <span style="color:#bd93f9">2</span>,
</span></span><span style="display:flex;"><span>    ReadWrite: <span style="color:#8be9fd">3</span>,
</span></span><span style="display:flex;"><span>    G<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;123&#39;</span>.length,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>The <code>as const</code> object will compile to JavaScript code that looks exactly like your TypeScript code. You can use these objects just as you would use enums. This approach resolves all the issues with enums that I mentioned above.</p>
<h2 id="what-about-the-type-for-as-const">What about the Type for 'as const'?</h2>
<p>Using <code>as const</code> provides the constant values, but how can we define the enum type when needed? Fortunately, this is not complicated.</p>
<p>Here is the solution for typing:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// Helper types
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> TypeFrom&lt;<span style="color:#ff79c6">T</span>&gt; <span style="color:#ff79c6">=</span> T[<span style="color:#ff79c6">keyof</span> T]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Const types
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> HttpStatusCode <span style="color:#ff79c6">=</span> TypeFrom&lt;<span style="color:#ff79c6">typeof</span> <span style="color:#50fa7b">HttpStatusCodes</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> Color <span style="color:#ff79c6">=</span> TypeFrom&lt;<span style="color:#ff79c6">typeof</span> <span style="color:#50fa7b">Colors</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> Color2 <span style="color:#ff79c6">=</span> TypeFrom&lt;<span style="color:#ff79c6">typeof</span> <span style="color:#50fa7b">Colors2</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> FileAccess <span style="color:#ff79c6">=</span> TypeFrom&lt;<span style="color:#ff79c6">typeof</span> <span style="color:#50fa7b">FileAccesses</span>&gt;
</span></span></code></pre><p>In this approach:</p>
<ul>
<li><strong>Helper type</strong>: Define a generic helper type <code>TypeFrom</code> to extract the type from an object.</li>
<li><strong>Const types</strong>: Use the <code>TypeFrom</code> helper to create each equivalent type for the constants.</li>
</ul>
<p>However, there is a potential issue when importing constants and types:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { Color } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./constant.js&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { Color } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./definitions.js&#39;</span>
</span></span></code></pre><p>TypeScript does not allow the same name for different entities in the same file. A workaround is to use namespace imports:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { Color } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./constant.js&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> <span style="color:#ff79c6">*</span> <span style="color:#ff79c6">as</span> definitions <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;./definitions.js&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// And use definitions.Color when needed
</span></span></span></code></pre><p>But I don't recommend that approach, it's not flexible and it makes auto-import in IDEs harder.
A better approach is to name constants and types differently, typically using plurals for <code>as const</code> objects and singular forms for types:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">// constant.ts
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">const</span> HttpStatusCodes <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    Ok: <span style="color:#8be9fd">200</span>,
</span></span><span style="display:flex;"><span>    BadRequest: <span style="color:#8be9fd">400</span>,
</span></span><span style="display:flex;"><span>} <span style="color:#ff79c6">as</span> <span style="color:#ff79c6">const</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// definitions.ts
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> TypeFrom&lt;<span style="color:#ff79c6">T</span>&gt; <span style="color:#ff79c6">=</span> T[<span style="color:#ff79c6">keyof</span> T]
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">export</span> <span style="color:#ff79c6">type</span> HttpStatusCode <span style="color:#ff79c6">=</span> TypeFrom&lt;<span style="color:#ff79c6">typeof</span> <span style="color:#50fa7b">HttpStatusCodes</span>&gt;
</span></span></code></pre><p>This way, you can easily import and export constants and types without naming conflicts. Additionally, this approach has the advantage of clearly separating TypeScript <code>type</code> definitions from TypeScript constants/functions</p>
<p>I hope this article reaches many people, helps you optimize your use of TypeScript in your project. Feel free to read the comments or provide feedback on <a href="https://tduyng.medium.com/why-you-might-be-using-enums-in-typescript-wrong-6d9c5742db5a">my medium post</a>.
Happy coding!</p>
]]></content>
    <link href="/blog/enum-typescript/"></link>
    <category>typescript</category>
    <category>enum</category>
    <category>best-practices</category>
  </entry>
  <entry>
    <title>Should you switch to Deno?</title>
    <id>/blog/switch-to-deno/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-06-15T00:00:00Z</published>
    <summary>This article highlights key reasons for the change, explores Deno’s features, and helps you decide if it’s the right choice for your projects</summary>
    <content type="html"><![CDATA[<p>Hi there!</p>
<p>Deno, created by Ryan Dahl, the original mind behind Node.js, is a modern runtime for JavaScript and TypeScript. It addresses various limitations and issues found in Node.js.</p>
<p>Since its initial stable release with version 1.0, Deno has continued to evolve, with the latest version currently at 1.44. Are you ever curious about Deno's suitability for production projects today? Wondering if developers are actively using it in production?</p>
<p>You can read my full article for a detailed analysis here: <a href="https://medium.com/ekino-france/should-you-switch-to-deno-c0e7c9ca6e41">Should You Switch to Deno?</a>.</p>
<p>I hope this helps you make an informed decision. Happy coding!</p>
]]></content>
    <link href="/blog/switch-to-deno/"></link>
    <category>deno</category>
    <category>nodejs</category>
    <category>production</category>
  </entry>
  <entry>
    <title>My blog now offers full-text RSS feeds</title>
    <id>/blog/full-text-rss-feeds/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-06-10T00:00:00Z</published>
    <summary>Explore the reasons behind this decision</summary>
    <content type="html"><![CDATA[<p>Guess what? My blog now offers full-text RSS feeds!</p>
<p>Not long ago, I discovered a new way to get updates <a href="https://aboutfeeds.com/">RSS feeds</a> from websites using a reader app. It might seem strange, right? Most people probably already know about this method since it has existed for a long time, but I had no idea about it before. I only knew how to subscribe to newsletters via email.</p>
<p>For the past two years, I've been reading a lot more, especially on <a href="https://daily.dev">daily.dev</a>, a platform where people share interesting articles. I've found many new blogs that I want to follow and subscribe to. I don’t remember exactly where I learned about subscribing to RSS feeds, but it was probably from a &quot;subscribe&quot; or &quot;newsletter&quot; tab on a blog, maybe <a href="https://tonsky.me">tonsky.me</a>. They explained how to use a reader app to subscribe to RSS feeds. It's totally free and really cool! So, I started using that method to subscribe to other blogs. It's much easier than using email. My blog also supports RSS feeds via <a href="https://tduyng.github.io/atom.xml">atom.xml</a>.</p>
<p>However, there's one important thing to mention about sharing RSS feeds. Recently, I came across an article called <a href="https://hamatti.org/posts/full-text-rss-feed-is-offline-friendly-act/">Full-text RSS feed is an offline-friendly act</a> by Juhis. He explained the benefits of full-text RSS feeds, especially for offline reading. I agree with him. While we mostly have internet access, there are times when we travel or are in places with poor connectivity. With full-text RSS feeds, we can read anywhere, anytime, without needing internet.</p>
<p>In his article, Juhis mentioned:</p>
<blockquote>
<p>There are two schools of thought in RSS world: one to offer the full post in the feed so it can be directly read in the feed reader and another to only offer an excerpt (or even just title) so the reader needs to navigate to your blog and read it there.</p>
</blockquote>
<blockquote>
<p><strong>Please, make your posts fully available through RSS ❤️</strong></p>
</blockquote>
<p>He is right. If we write a blog for profit, advertisement, or SEO...etc, it might be necessary to show just a short preview and have readers visit the original website for the full content.. But if we write for free, to share thoughts, knowledge, and experiences, why not provide full-text RSS feeds? It can help people in many situations.</p>
<p>I checked my website and saw it didn’t show full text by default. So, I changed it. I hope this helps people. If you find my blog interesting, feel free to subscribe using your reader app.</p>
<p>If you don't have a reader app yet, you can find more information on <a href="https://tduyng.github.io/subscribe">my subscribe page</a>.</p>
<p>I use <a href="https://github.com/Ranchero-Software/NetNewsWire">NetNewsWire</a> on MacOS and iOS because it’s open source, free, and the UI suits my needs. Other people recommend <a href="https://feedly.com/i/discover">Feedly</a> or <a href="https://www.lireapp.com/">lire</a> too.</p>
<p>Here's how my blog looks on NetNewsWire will full text RSS feed:
<img src="/img/feed.webp" alt="My blog on NetNewswire" loading="lazy"></p>
]]></content>
    <link href="/blog/full-text-rss-feeds/"></link>
    <category>blog</category>
    <category>full-text</category>
    <category>rss</category>
  </entry>
  <entry>
    <title>Transforming website images into WebP with Rust for faster loading times</title>
    <id>/blog/rust-webp-transform/</id>
    <updated>2024-05-23T00:00:00Z</updated>
    <published>2024-05-23T00:00:00Z</published>
    <summary>Explore the process of enhancing website speed through image conversion to WebP using Rust</summary>
    <content type="html"><![CDATA[<p>Hi everyone 👋,</p>
<p>Recently, I attended <a href="https://www.ekino.fr/">Ekinoday</a>, our company’s annual conference, where my colleagues share knowledge on various topics, from technology to life tips. This event is always very interesting for me.</p>
<p>I had a chance to talk with my colleague <a href="https://github.com/thovo">Raphaël Tho Vo</a>, who gave a presentation on optimising web performance. <a href="https://github.com/thovo">Raphaël</a> mentioned that many people don’t realise how much image size and format can effect the web performance. Large image files can slow down a website significantly, affecting user experience.</p>
<p>Raphaël explained that we can improve performance by using better image formats. He mentioned several modern formats like <a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/">AVIF, WebP, JPEG 2000</a>. Among these, AVIF and WebP are the most supported by web browsers today.</p>
<p>Inspired by Raphaël’s advice, I decided to take a closer look at my website's performance. I host my site on GitHub, using <a href="https://www.getzola.org/">Zola</a>, a static site engine, along with the <a href="https://github.com/welpo/tabi">Tabi</a> theme. This theme is beautifully designed and well-coded.</p>
<p>I tested my website with <a href="https://pagespeed.web.dev/">PageSpeed Insights</a> and got a perfect score of 100/100 in everything: Performance, Accessibility, Best Practices, and SEO.</p>
<p><img src="img/page_speed.webp" alt="page speed" loading="lazy"><br/></p>
<p>However, I noticed that I still use a lot of PNG and JPEG images. Switching to WebP could significantly decrease image sizes and improve more load times.</p>
<h3 id="converting-images-to-webp-with-rust">Converting images to WebP with Rust</h3>
<p>How can we accomplish this?</p>
<p>To optimise images, I had to convert them to WebP format. I chose this format because it's effective and widely supported across different web browsers. But I needed a quick way to convert multiple images to WebP and reuse it multiple times.</p>
<p>There are online tools available to help, but that's not the solution I'm looking for at the moment. Instead, I've chosen to create my own solution using Rust. Rust is great for this because it's fast and easy to use for simple programs. Making this program will help me learn more about Rust.</p>
<p>The objectif is to convert all kinds of images into WebP with just one command, making it fast and easy.</p>
<p>Now, let's coding!</p>
<p>For this program, I used the <a href="https://github.com/image-rs/image">image</a> crate for decoding and encoding images. This crate supports many different image formats:</p>
<table>
<thead>
<tr>
<th>Format</th>
<th>Decoding</th>
<th>Encoding</th>
</tr>
</thead>
<tbody>
<tr>
<td>AVIF</td>
<td>Yes (8-bit only) *</td>
<td>Yes (lossy only)</td>
</tr>
<tr>
<td>BMP</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Farbfeld</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>GIF</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>HDR</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>ICO</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>JPEG</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>EXR</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>PNG</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>PNM</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>QOI</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>TGA</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>TIFF</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>WebP</td>
<td>Yes</td>
<td>Yes (lossless only)</td>
</tr>
</tbody>
</table>
<p>**To encode an image to WebP, I created a function <code>encode_webp</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">use</span> image::{DynamicImage, WebPEncoder, ExtendedColorType};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">pub</span> <span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">encode_webp</span>(image: <span style="color:#ff79c6">&amp;</span><span style="color:#50fa7b">DynamicImage</span>) -&gt; <span style="color:#8be9fd;font-style:italic">Result</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd;font-style:italic">Vec</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd">u8</span><span style="color:#ff79c6">&gt;</span>, <span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Convert the image to RGBA format
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#8be9fd;font-style:italic">let</span> rgba_image <span style="color:#ff79c6">=</span> image.to_rgba8();
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> <span style="color:#ff79c6">mut</span> webp_data <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">Vec</span>::new();
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Create a WebP encoder (support only lossless feature for now)
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#8be9fd;font-style:italic">let</span> encoder <span style="color:#ff79c6">=</span> WebPEncoder::new_lossless(<span style="color:#ff79c6">&amp;</span><span style="color:#ff79c6">mut</span> webp_data);
</span></span><span style="display:flex;"><span>    encoder
</span></span><span style="display:flex;"><span>        .encode(
</span></span><span style="display:flex;"><span>            rgba_image.as_raw(),
</span></span><span style="display:flex;"><span>            rgba_image.width(),
</span></span><span style="display:flex;"><span>            rgba_image.height(),
</span></span><span style="display:flex;"><span>            ExtendedColorType::Rgba8, <span style="color:#6272a4">// Image crate support only Rgb8 or Rgba8 data
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        )
</span></span><span style="display:flex;"><span>        .map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;{e}&#34;</span>))<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">Ok</span>(webp_data)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>The <code>DynamicImage</code> type from <a href="https://github.com/image-rs/image">image</a> crate allows us to handle different image formats. I convert the image to RGBA format and use the WebPEncoder to encode it.</p>
<p><strong>Next, I wrote a function to convert a single image</strong>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">use</span> image::io::Reader;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> std::{fs, path::Path};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">convert_image</span>(input_path: <span style="color:#ff79c6">&amp;</span><span style="color:#50fa7b">Path</span>, output_dir: <span style="color:#ff79c6">&amp;</span><span style="color:#8be9fd;font-style:italic">Option</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span>) -&gt; <span style="color:#8be9fd;font-style:italic">Result</span><span style="color:#ff79c6">&lt;</span>(), <span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Open and decode the image
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#8be9fd;font-style:italic">let</span> image_render <span style="color:#ff79c6">=</span>
</span></span><span style="display:flex;"><span>        Reader::open(input_path).map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;Failed to open image: {}&#34;</span>, e))<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> image <span style="color:#ff79c6">=</span> image_render
</span></span><span style="display:flex;"><span>        .decode()
</span></span><span style="display:flex;"><span>        .map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;Failed to decode image: {}\n&#34;</span>, e))<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Encode the image to WebP
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#8be9fd;font-style:italic">let</span> webp_data <span style="color:#ff79c6">=</span> encode_webp(<span style="color:#ff79c6">&amp;</span>image)<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Determine the output path
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#8be9fd;font-style:italic">let</span> output_path <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">let</span> <span style="color:#8be9fd;font-style:italic">Some</span>(output_dir) <span style="color:#ff79c6">=</span> output_dir {
</span></span><span style="display:flex;"><span>        Path::new(output_dir)
</span></span><span style="display:flex;"><span>            .join(input_path.file_stem().unwrap())
</span></span><span style="display:flex;"><span>            .with_extension(<span style="color:#f1fa8c">&#34;webp&#34;</span>)
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">else</span> {
</span></span><span style="display:flex;"><span>        input_path.with_extension(<span style="color:#f1fa8c">&#34;webp&#34;</span>)
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// Write the WebP image to the output path
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    fs::write(output_path.clone(), webp_data.to_vec())
</span></span><span style="display:flex;"><span>        .map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;Failed to write WebP file: {}&#34;</span>, e))<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    println!(<span style="color:#f1fa8c">&#34;Generated: {}&#34;</span>, output_path.display());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">Ok</span>(())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span></code></pre><p>This function first opens and decodes the image, then encodes it to WebP format using the previously defined <code>encode_webp</code> function. Finally, it writes the resulting WebP image to either the specified output directory or the same location as the original image.</p>
<p><strong>To convert all images in a directory, I created a function <code>convert_images</code>:</strong></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">use</span> image::{io::Reader, DynamicImage};
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> rayon::prelude::<span style="color:#ff79c6">*</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> std::{
</span></span><span style="display:flex;"><span>    fs,
</span></span><span style="display:flex;"><span>    path::Path,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">convert_images</span>(path: <span style="color:#ff79c6">&amp;</span><span style="color:#50fa7b">Path</span>, output_dir: <span style="color:#ff79c6">&amp;</span><span style="color:#8be9fd;font-style:italic">Option</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span>) -&gt; <span style="color:#8be9fd;font-style:italic">Result</span><span style="color:#ff79c6">&lt;</span>(), <span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> path.is_dir() {
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">let</span> entries: <span style="color:#8be9fd;font-style:italic">Vec</span><span style="color:#ff79c6">&lt;</span>PathBuf<span style="color:#ff79c6">&gt;</span> <span style="color:#ff79c6">=</span> fs::read_dir(path)
</span></span><span style="display:flex;"><span>            .map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;Read directory failed: {e}&#34;</span>))<span style="color:#ff79c6">?</span>
</span></span><span style="display:flex;"><span>            .filter_map(<span style="color:#ff79c6">|</span>entry<span style="color:#ff79c6">|</span> entry.ok().map(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> e.path()))
</span></span><span style="display:flex;"><span>            .collect();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        entries.par_iter().try_for_each(<span style="color:#ff79c6">|</span>path<span style="color:#ff79c6">|</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> path.is_dir() {
</span></span><span style="display:flex;"><span>                convert_images(path, output_dir)
</span></span><span style="display:flex;"><span>            } <span style="color:#ff79c6">else</span> <span style="color:#ff79c6">if</span> is_supported(path) {
</span></span><span style="display:flex;"><span>                convert_image(path, output_dir)
</span></span><span style="display:flex;"><span>            } <span style="color:#ff79c6">else</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#8be9fd;font-style:italic">Ok</span>(())
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        })<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">Ok</span>(())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">is_supported</span>(path: <span style="color:#ff79c6">&amp;</span><span style="color:#50fa7b">Path</span>) -&gt; <span style="color:#8be9fd">bool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">match</span> fs::read(path) {
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">Ok</span>(data) <span style="color:#ff79c6">=&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> path.extension().unwrap_or_default() <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;webp&#34;</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">false</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            image::guess_format(<span style="color:#ff79c6">&amp;</span>data).is_ok()
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">Err</span>(_) <span style="color:#ff79c6">=&gt;</span> <span style="color:#ff79c6">false</span>,
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span></code></pre><p>This function checks if the path is a directory. If it is, it reads all entries and recursively processes each one. If the path is an image, it converts it to WebP. The <code>par_iter()</code> method from the <a href="https://github.com/rayon-rs/rayon">rayon</a> crate enables parallel processing for better performance.</p>
<p>Finally, the <code>main</code> function serves as the entry point of the application:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">use</span> clap::Parser;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> image::{io::Reader, DynamicImage};
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> rayon::prelude::<span style="color:#ff79c6">*</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> std::{
</span></span><span style="display:flex;"><span>    fs,
</span></span><span style="display:flex;"><span>    path::{Path, PathBuf},
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">#[derive(Parser, Debug)]</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">struct</span> <span style="color:#50fa7b">CliArgs</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">#[clap(short, long)]</span>
</span></span><span style="display:flex;"><span>    dir: <span style="color:#8be9fd;font-style:italic">Option</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">#[clap(short, long)]</span>
</span></span><span style="display:flex;"><span>    output: <span style="color:#8be9fd;font-style:italic">Option</span><span style="color:#ff79c6">&lt;</span><span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> args <span style="color:#ff79c6">=</span> CliArgs::parse();
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> dir <span style="color:#ff79c6">=</span> args.dir.unwrap_or_else(<span style="color:#ff79c6">||</span> <span style="color:#f1fa8c">&#34;.&#34;</span>.to_string());
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> output_dir <span style="color:#ff79c6">=</span> args.output;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> path <span style="color:#ff79c6">=</span> Path::new(<span style="color:#ff79c6">&amp;</span>dir);
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">let</span> <span style="color:#8be9fd;font-style:italic">Err</span>(e) <span style="color:#ff79c6">=</span> convert_images(path, <span style="color:#ff79c6">&amp;</span>output_dir) {
</span></span><span style="display:flex;"><span>        eprint!(<span style="color:#f1fa8c">&#34;Error {}&#34;</span>, e)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>I use the <a href="https://github.com/clap-rs/clap">clap</a> crate to create the CLI. The program accepts a directory containing images to convert and an optional output directory (see more at convert_image function)</p>
<h3 id="addressing-generated-image-size-issues">Addressing generated image size issues</h3>
<p>While working on converting images to WebP format, I encountered a problem: some of the converted images turned out to be larger in size than the originals. This was concerning because my goal was to reduce image size to improve website performance.</p>
<p>I realized that this happened because the image crate in this moment is only supported a <code>new_lossless</code> feature for WebP conversion. This feature maintains the same quality as the original image, sometimes resulting in larger file sizes.</p>
<p>To address this issue, I explored other options and came across the <a href="https://github.com/jaredforth/webp">webp</a> crate.</p>
<p>This crate, built on the <code>libwebp-sys</code> and <code>image</code> crate, allows us to better encode images to WebP format with <code>quality</code> control.</p>
<p>I found that by setting the <code>quality</code> parameter to the maximum value of <code>100</code>, we could consistently generate WebP images with smaller sizes than the originals. In fact, I could reduce the image size by up to 45%.</p>
<p>To apply the <code>webp</code> crate into my code, I only needed to make a slight modification to the <code>encode_webp</code> function. Here's the updated code snippet:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">use</span> image::DynamicImage;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> webp::{Encoder,WebPMemory};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">pub</span> <span style="color:#ff79c6">fn</span> <span style="color:#50fa7b">encode_webp</span>(image: <span style="color:#ff79c6">&amp;</span><span style="color:#50fa7b">DynamicImage</span>) -&gt; <span style="color:#8be9fd;font-style:italic">Result</span><span style="color:#ff79c6">&lt;</span>WebPMemory, <span style="color:#8be9fd;font-style:italic">String</span><span style="color:#ff79c6">&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> encoder <span style="color:#ff79c6">=</span> Encoder::from_image(image)
</span></span><span style="display:flex;"><span>        .map_err(<span style="color:#ff79c6">|</span>e<span style="color:#ff79c6">|</span> format!(<span style="color:#f1fa8c">&#34;Failed to create a webp encoder: {}&#34;</span>, e))<span style="color:#ff79c6">?</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">let</span> webp_data <span style="color:#ff79c6">=</span> encoder.encode(<span style="color:#bd93f9">100.0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">Ok</span>(webp_data)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>Now, with this program, I can quickly convert all images from my website to WebP format.</p>
<p>Here's an example of a command-line <code>webp</code> in this tool:
<img src="img/webp_cmd.webp" alt="webp cmd" loading="lazy"></p>
<p>You can check out the full code on my GitHub repo: <a href="https://github.com/tduyng/imgc-rs">imgc-rs</a>.</p>
<p>I think this project has a lot of potential. We can add a lot more features like batch processing, additional image format conversions, and more. All suggestions and contributions are welcome to make it even better.</p>
<p>Thank you for reading so far! I hope you found this article helpful and gained some new ideas. If you have any questions or suggestions, feel free to reach out.</p>
]]></content>
    <link href="/blog/rust-webp-transform/"></link>
    <category>performance</category>
    <category>rust</category>
    <category>webp</category>
    <category>image-conversion</category>
    <category>cli</category>
  </entry>
  <entry>
    <title>Dynamic Github profile with Bun and Typescript</title>
    <id>/blog/dynamic-github-profile-with-bun-typescript/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-05-15T00:00:00Z</published>
    <summary>Learn how to make your GitHub profile dynamic using Bun and TypeScript as an alternative to Python in my previous article.</summary>
    <content type="html"><![CDATA[<p><a href="https://tduyng.github.io/blog/dynamic-github-profile-readme/">In a recent article</a>, I discussed transforming a GitHub profile into an interactive space with icons, badges, and dynamically updated blog posts using Python scripts and GitHub actions.</p>
<p>After sharing my work in the &quot;r/javascript&quot; community on Reddit, I received serveral positive feedback and upvotes. I chose to post in this community due to my familiarity with JavaScript and TypeScript. After several hours, moderators removed my post because it wasn't directly related to JavaScript. They made the right decision, and I appreciate their careful moderation of the community. This made me rethink my approach and think about using a language that would better connect with the audience, given the simplicity of the script's principle: fetching feed URL, parsing it, and writing the response to the README.md file, along with automatic updates using a cron job on GitHub action.</p>
<p>I decided to explore using JavaScript or TypeScript for this idea. While JavaScript would have been sufficient, I opted for TypeScript because of its enhanced safety and the overall enjoyment it offers during development—for me, it's more fun to work with than JavaScript.</p>
<p>Choosing a runtime was the next consideration. With options like <a href="https://nodejs.org/en">Node.js</a>, <a href="https://deno.com/">Deno</a>, and <a href="https://bun.sh/">Bun</a> available, I choose on Bun. Because the runtime mainly executes the script, Bun seemed like the perfect choice. It's fast, simple, and allows running JavaScript or TypeScript without needing compilation steps.</p>
<p><strong>Let's set up and implement the code to see how it works.</strong></p>
<p>Firstly, ensure that Bun is installed on your machine. There are several ways to install it, all of which are outlined on the Bun website's <a href="https://bun.sh/docs/installation">Installation</a> page.</p>
<p>Bun undergoes improvements regularly and changes rapidly. You can ensure you're using the latest version of Bun by executing the command: <code>bun upgrade</code>.</p>
<p>In the project, you can initialize Bun by using the command: <code>bun init</code>, which will generate some files for you. Here is an example of the folder structure after running <code>bun init</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>❯ tree
</span></span><span style="display:flex;"><span>├── bun.lockb
</span></span><span style="display:flex;"><span>├── node_modules
</span></span><span style="display:flex;"><span>├── package.json
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── src
</span></span><span style="display:flex;"><span>│  └── index.ts
</span></span><span style="display:flex;"><span>└── tsconfig.json
</span></span></code></pre><p>In my case, I prefer to add it manually for more control.</p>
<p>As I'm using TypeScript, I need to add <code>@types/bun</code> to work with TypeScript typings. Run the command:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bun add -d @types/bun
</span></span></code></pre><p>The <code>tsconfig.json</code> file is also necessary for TypeScript. You can either use the recommended <code>tsconfig.json</code> provided by Bun or generate one. It's minimal enough and follows best practices. Here is my <code>tsconfig.json</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;lib&#34;</span>: [<span style="color:#f1fa8c">&#34;ESNext&#34;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;target&#34;</span>: <span style="color:#f1fa8c">&#34;ESNext&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;module&#34;</span>: <span style="color:#f1fa8c">&#34;ESNext&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;moduleDetection&#34;</span>: <span style="color:#f1fa8c">&#34;force&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;allowJs&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;moduleResolution&#34;</span>: <span style="color:#f1fa8c">&#34;bundler&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;allowImportingTsExtensions&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;verbatimModuleSyntax&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noEmit&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;strict&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;skipLibCheck&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noFallthroughCasesInSwitch&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noUnusedLocals&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noUnusedParameters&#34;</span>: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;noPropertyAccessFromIndexSignature&#34;</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;include&#34;</span>: [<span style="color:#f1fa8c">&#34;src/**/*.ts&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>I specify <code>&quot;include&quot;: [&quot;src/**/*.ts&quot;]</code> to tell TypeScript to compile all <code>.ts</code> files within the <code>src</code> folder, simplifying TypeScript's server checking and compilation processes.</p>
<p>Next, I'll use the <strong><a href="https://www.npmjs.com/package/rss-parser">rss-parser</a></strong> library from npm to parse the feed <code>atom.xml</code> from my blog. The principle of this library is similar to the one I used in Python, called <a href="https://pypi.org/project/feedparser/">feedparser</a>.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bun add rss-parser
</span></span></code></pre><p>Here's how my <code>package.json</code> looks:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;type&#34;</span>: <span style="color:#f1fa8c">&#34;module&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;scripts&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;readme&#34;</span>: <span style="color:#f1fa8c">&#34;bun src/feed.ts&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;dependencies&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;rss-parser&#34;</span>: <span style="color:#f1fa8c">&#34;^3.13.0&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;devDependencies&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;@types/bun&#34;</span>: <span style="color:#f1fa8c">&#34;^1.1.2&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>I use <code>&quot;type&quot;: &quot;module&quot;</code> to write the code in <a href="https://developer.mozilla.org/en-US/docs/Glossary/ECMAScript">ESM</a>.</p>
<p>The script <code>&quot;readme&quot;: &quot;bun src/feed.ts&quot;</code> runs the TypeScript script I will write later.</p>
<p>Don’t forget to add <code>node_modules</code> to <code>.gitignore</code>.&quot;</p>
<p><strong>Now it's time to write the script <code>feed.ts</code>.</strong></p>
<p>I'll use <code>rss-parser</code> to fetch the feeds from <code>atom.xml.</code></p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> { promises <span style="color:#ff79c6">as</span> fs } <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;fs&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> rssParser <span style="color:#ff79c6">from</span> <span style="color:#f1fa8c">&#39;rss-parser&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> DEFAULT_N <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">5</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">type</span> Entry <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    title?: <span style="color:#8be9fd">string</span>
</span></span><span style="display:flex;"><span>    link?: <span style="color:#8be9fd">string</span>
</span></span><span style="display:flex;"><span>    isoDate?: <span style="color:#8be9fd">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/**
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * Fetches and parses the feed from the provided URL.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * @param {string} url - The URL of the feed.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * @returns {Promise&lt;string[]&gt;} An array of formatted feed entries.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> fetchFeed <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> (url: <span style="color:#8be9fd">string</span>)<span style="color:#ff79c6">:</span> Promise&lt;<span style="color:#ff79c6">string</span>[]&gt; <span style="color:#ff79c6">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> parser <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> rssParser()
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> response <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">await</span> parser.parseURL(url)
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">let</span> feeds <span style="color:#ff79c6">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> (<span style="color:#ff79c6">const</span> item <span style="color:#ff79c6">of</span> response.items) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> (item.title <span style="color:#ff79c6">&amp;&amp;</span> item.link) feeds.push(formatFeedEntry(item))
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> (feeds.length <span style="color:#ff79c6">===</span> DEFAULT_N) <span style="color:#ff79c6">break</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> feeds
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>        console.error(<span style="color:#f1fa8c">&#39;Error fetching or parsing the feed:&#39;</span>, error)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> []
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/**
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * Formats a feed entry into a string.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * @param {Entry} entry - The feed entry to format.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> * @returns {string} The formatted feed entry.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> formatFeedEntry <span style="color:#ff79c6">=</span> ({ title, link, isoDate }<span style="color:#ff79c6">:</span> Entry)<span style="color:#ff79c6">:</span> <span style="color:#8be9fd">string</span> <span style="color:#ff79c6">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> date <span style="color:#ff79c6">=</span> isoDate <span style="color:#ff79c6">?</span> <span style="color:#ff79c6">new</span> <span style="color:#8be9fd;font-style:italic">Date</span>(isoDate).toISOString().slice(<span style="color:#bd93f9">0</span>, <span style="color:#bd93f9">10</span>) <span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> date <span style="color:#ff79c6">?</span> <span style="color:#f1fa8c">`[</span><span style="color:#f1fa8c">${</span>title<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">](</span><span style="color:#f1fa8c">${</span>link<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">) - </span><span style="color:#f1fa8c">${</span>date<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span> <span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`[</span><span style="color:#f1fa8c">${</span>title<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">](</span><span style="color:#f1fa8c">${</span>link<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">)`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>Parsing the URL with <code>rss-parser</code> is quite simple:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">const</span> parser <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> rssParser()
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> response <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">await</span> parser.parseURL(url)
</span></span></code></pre><p>It returns a response in JSON format. Here's an example of the response:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;items&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;title&#34;</span>: <span style="color:#f1fa8c">&#34;How I made my GitHub profile README dynamic&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;link&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/dynamic-github-profile-readme/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;pubDate&#34;</span>: <span style="color:#f1fa8c">&#34;2024-05-13T00:00:00.000Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;author&#34;</span>: <span style="color:#f1fa8c">&#34;Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;summary&#34;</span>: <span style="color:#f1fa8c">&#34;Explore the process of making your GitHub profile README dynamic with automated updates of your latest blog posts using GitHub Actions and Python scripting&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;id&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/dynamic-github-profile-readme/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;isoDate&#34;</span>: <span style="color:#f1fa8c">&#34;2024-05-13T00:00:00.000Z&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;title&#34;</span>: <span style="color:#f1fa8c">&#34;New home for my website&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;link&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/new-home-for-my-website/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;pubDate&#34;</span>: <span style="color:#f1fa8c">&#34;2024-05-11T00:00:00.000Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;author&#34;</span>: <span style="color:#f1fa8c">&#34;Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;summary&#34;</span>: <span style="color:#f1fa8c">&#34;Discover why I switched my website and blog from Jekyll to Zola.&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;id&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/new-home-for-my-website/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;isoDate&#34;</span>: <span style="color:#f1fa8c">&#34;2024-05-11T00:00:00.000Z&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;title&#34;</span>: <span style="color:#f1fa8c">&#34;Start a new journey&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;link&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/start-a-new-journey/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;pubDate&#34;</span>: <span style="color:#f1fa8c">&#34;2021-05-01T00:00:00.000Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;author&#34;</span>: <span style="color:#f1fa8c">&#34;Z&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;summary&#34;</span>: <span style="color:#f1fa8c">&#34;I share my journey from being a BIM engineer to becoming a full-time backend developer&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;id&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/blog/start-a-new-journey/&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">&#34;isoDate&#34;</span>: <span style="color:#f1fa8c">&#34;2021-05-01T00:00:00.000Z&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;link&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/atom.xml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;feedUrl&#34;</span>: <span style="color:#f1fa8c">&#34;https://tduyng.github.io/atom.xml&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;title&#34;</span>: <span style="color:#f1fa8c">&#34;~/Z&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;lastBuildDate&#34;</span>: <span style="color:#f1fa8c">&#34;2024-05-14T00:00:00+00:00&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre><p>This response is already sorted by the date of the post. With this response, I can easily filter and format it according to our requirements.</p>
<p>The remaining code reads the current <a href="http://readme.md/">README.md</a> file, writes the feeds found above, and inserts them into comments in the README file.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">&lt;!-- blog start --&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">&lt;!-- blog end --&gt;</span>
</span></span></code></pre><p>Here is the code:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">const</span> replaceChunk <span style="color:#ff79c6">=</span> (
</span></span><span style="display:flex;"><span>    content: <span style="color:#8be9fd">string</span>,
</span></span><span style="display:flex;"><span>    marker: <span style="color:#8be9fd">string</span>,
</span></span><span style="display:flex;"><span>    chunk: <span style="color:#8be9fd">string</span>,
</span></span><span style="display:flex;"><span>    inline: <span style="color:#8be9fd">boolean</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>,
</span></span><span style="display:flex;"><span>)<span style="color:#ff79c6">:</span> <span style="color:#8be9fd">string</span> <span style="color:#ff79c6">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> startMarker <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`&lt;!-- </span><span style="color:#f1fa8c">${</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> start --&gt;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> endMarker <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`&lt;!-- </span><span style="color:#f1fa8c">${</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> end --&gt;`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> pattern <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> <span style="color:#8be9fd;font-style:italic">RegExp</span>(<span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>startMarker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">[\\s\\S]*</span><span style="color:#f1fa8c">${</span>endMarker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>, <span style="color:#f1fa8c">&#39;g&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> (<span style="color:#ff79c6">!</span>inline) {
</span></span><span style="display:flex;"><span>        chunk <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`</span>\<span style="color:#f1fa8c">n</span><span style="color:#f1fa8c">${</span>chunk<span style="color:#f1fa8c">}</span>\<span style="color:#f1fa8c">n`</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> content.replace(pattern, <span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>startMarker<span style="color:#f1fa8c">}${</span>chunk<span style="color:#f1fa8c">}${</span>endMarker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> updateReadme <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">async</span> ()<span style="color:#ff79c6">:</span> Promise&lt;<span style="color:#ff79c6">void</span>&gt; <span style="color:#ff79c6">=&gt;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;https://tduyng.github.io/atom.xml&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">const</span> feeds <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">await</span> fetchFeed(url)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> readmePath <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>process.cwd()<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/README.md`</span>
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">let</span> readmeContent <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">await</span> fs.readFile(readmePath, <span style="color:#f1fa8c">&#39;utf-8&#39;</span>)
</span></span><span style="display:flex;"><span>        readmeContent <span style="color:#ff79c6">=</span> replaceChunk(readmeContent, <span style="color:#f1fa8c">&#39;blog&#39;</span>, feeds.join(<span style="color:#f1fa8c">&#39;\n\n&#39;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">await</span> fs.writeFile(readmePath, readmeContent, <span style="color:#f1fa8c">&#39;utf-8&#39;</span>)
</span></span><span style="display:flex;"><span>        console.log(<span style="color:#f1fa8c">&#39;README.md updated successfully!&#39;</span>)
</span></span><span style="display:flex;"><span>    } <span style="color:#ff79c6">catch</span> (error) {
</span></span><span style="display:flex;"><span>        console.error(<span style="color:#f1fa8c">&#39;Error updating README.md:&#39;</span>, error)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// Since I&#39;m using ESM syntax, I can use the top-level &#34;await&#34; here.
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">await</span> updateReadme()
</span></span></code></pre><p>Alright, the script is complete. You can find the full code <a href="https://github.com/tduyng/tduyng/blob/bun/src/feed.ts">here</a>.</p>
<p><strong>Next, let's move on to the final step: Configuring the GitHub action.</strong></p>
<p>It's essentially the same process as I did in <a href="https://tduyng.github.io/blog/dynamic-github-profile-readme/">the previous article with Python</a>. The only difference is replacing the Python implementation with Bun. Here's the code:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">name</span>: Fetch latest posts from blog for README
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">on</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">schedule</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ff79c6">cron</span>: <span style="color:#f1fa8c">&#39;0 0 * * *&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">jobs</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">build</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">runs-on</span>: ubuntu-latest
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">steps</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: actions/checkout@v4
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: oven-sh/setup-bun@v1
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: actions/cache@v4
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">name</span>: Configure bun caching
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">path</span>: ~/.bun/install/cache
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">key</span>: ${{ runner.os }}-${{ matrix.bun }}-bun-${{ hashFiles(&#39;**/bun.lockb&#39;) }}
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">restore-keys</span>: |<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      </span>                      ${{ runner.os }}-${{ matrix.bun }}-bun-
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">run</span>: bun install
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">run</span>: bun run readme
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">name</span>: Commit and push if changed
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">run</span>: |-<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git diff
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git config --global user.email &#34;${{ vars.USER_EMAIL }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git config --global user.name &#34;${{ vars.USER_NAME }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git add -A
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git commit -m &#34;chore: update blog posts&#34; || exit 0
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git push</span>                  
</span></span></code></pre><p>In this scenario, I might not require the caching step for Bun.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>- <span style="color:#ff79c6">uses</span>: actions/cache@v4
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">name</span>: Configure bun caching
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">path</span>: ~/.bun/install/cache
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">key</span>: ${{ runner.os }}-${{ matrix.bun }}-bun-${{ hashFiles(&#39;**/bun.lockb&#39;) }}
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">restore-keys</span>: |<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">            </span>            ${{ runner.os }}-${{ matrix.bun }}-bun-
</span></span></code></pre><p><code>bun install</code> is already sufficiently fast. I'm including this for best practice.</p>
<p>The GitHub Action will execute the command <code>bun run readme</code> to update the README and create a new commit to reflect the changes.</p>
<p>In summary, I've demonstrated how to enhance your GitHub profile using Bun and TypeScript. This straightforward <a href="https://tduyng.github.io/blog/dynamic-github-profile-readme/">alternative to Python</a> provides a simple method for adding dynamism to your profile. You can find all the code from this article in <a href="https://github.com/tduyng/tduyng/tree/bun">this branch</a></p>
<p>For now, I've decided to keep the Python version on my main branch because it's easier to set up.</p>
<p>I hope it helps. Feel free to read the comments or provide feedback on <a href="https://tduyng.medium.com/dynamic-github-profile-with-bun-and-typescript-fe61127acabb">my medium post</a>.</p>
<p>Happy coding!</p>
]]></content>
    <link href="/blog/dynamic-github-profile-with-bun-typescript/"></link>
    <category>github</category>
    <category>readme</category>
    <category>typescript</category>
  </entry>
  <entry>
    <title>How I made my GitHub profile README dynamic</title>
    <id>/blog/dynamic-github-profile-readme/</id>
    <updated>2024-05-21T00:00:00Z</updated>
    <published>2024-05-13T00:00:00Z</published>
    <summary>Explore the process of making your GitHub profile README dynamic with automated updates of your latest blog posts using GitHub Actions and Python scripting</summary>
    <content type="html"><![CDATA[<p><strong>Have you heard about GitHub profile READMEs?</strong></p>
<p><strong>Did you know you can add a README to your GitHub profile to tell others about yourself and create a really cool profile?</strong></p>
<p>To do that, you simply create a repository with the same name as your GitHub username. For more details on how to do this and how it works, check out <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme">GitHub's guide on managing your profile README</a>.</p>
<p><strong>Now, how can you customize it to make a cool GitHub profile?</strong></p>
<p>There are numerous ways to do this. Some people design their profiles using HTML and CSS because README.md files are written in markdown, which supports them. Many individuals add more <a href="https://github.com/tandpfun/skill-icons">icons</a> and <a href="https://github.com/alexandresanlim/Badges4-README.md-Profile">badges</a> to enhance the appearance. You can find various ideas and tools in the repository <a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">awesome-github-profile-readme</a>.</p>
<p>Here are a couple of examples of cool profiles:</p>
<p><a href="https://github.com/JessicaLim8">JessicaLim8</a>
<img src="img/profile1.webp" alt="JessicaLim8 profile" loading="lazy"></p>
<p><a href="https://github.com/WaylonWalker">WaylonWalker</a>
<img src="img/profile2.webp" alt="WaylonWalker profile" loading="lazy"></p>
<p>However, for me, making something dynamic in the README is even cooler. This means displaying information about repositories, stars, languages written, followers, and more. To achieve this, we often use GitHub Actions to fetch the data and rewrite them to the README.</p>
<p>Luckily, some folks have already done this for us. Open source is awesome!</p>
<p>Two popular repositories for this purpose are:</p>
<ul>
<li><a href="https://github.com/anuraghazra/github-readme-stats">github-readme-stats</a>: Dynamically generated stats for your GitHub READMEs.</li>
<li><a href="https://github.com/lowlighter/metrics">metrics</a>: An infographics generator with 30+ plugins and 300+ options to display stats about your GitHub account and render them as SVG, Markdown, PDF, or JSON.</li>
</ul>
<p>Both projects are fantastic, but I prefer to use metrics because it offers a wide range of cool features and plugins. You can explore these repositories for more details and examples.</p>
<p>Here's an example of <a href="https://github.com/anuraghazra/github-readme-stats">github-readme-stats</a>
<img src="img/github_stats.webp" alt="Github stats example" loading="lazy"></p>
<p>and example of my profile using <a href="https://github.com/lowlighter/metrics">metrics</a>
<img src="img/metrics.svg" alt="My github profile using metrics" loading="lazy"></p>
<p>Additionally if you write a blog, it would be cool to include your latest post on your GitHub profile. I was inspired by how <a href="https://github.com/simonw">Simon Willison</a> made the content of <a href="https://github.com/simonw/simonw">his README profile</a> dynamic. He wrote a <a href="https://github.com/simonw/simonw/blob/main/build_readme.py">Python script</a> and a <a href="https://github.com/simonw/simonw/blob/main/.github/workflows/build.yml">GitHub action</a> for this job and explained the process in his article <a href="https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/">Building a self-updating profile README for GitHub</a>.</p>
<p>Here's how his profile looks like:
<img src="img/simonw.webp" alt="Simonw profile" loading="lazy"></p>
<p>Additionally, <a href="https://osc.garden/">Óscar</a> - the creator of <a href="https://github.com/welpo/tabi">Tabi theme</a>, that <a href="https://tduyng.github.io/blog/new-home-for-my-website/">I use on this website</a>, also created a tool called <a href="https://github.com/welpo/doteki">dōteki</a>. <a href="https://osc.garden/blog/doteki-building-a-dynamic-github-profile/">dōteki builds on Simon’s idea</a> but is more complete and flexible, supporting various plugins: <a href="https://doteki.org/docs/category/plugins">Feed, current date, FIGlet, Last.fm and Random choice plugin</a>.</p>
<p>dōteki supports these features via a GitHub action, making it easier to implement. For anyone looking for a quick and easy solution, I think dōteki is a great choice. Check out the tool and give it a star if you find it useful.</p>
<p>Thanks so much to Simon and Óscar for your contributions and for sharing your knowledge with the community.</p>
<p>Personally, I prefer to follow Simon’s original idea and write something from scratch. It helps me understand the different tools better and is more fun. Plus, it allows for more customization.</p>
<p>Now, it’s time for some coding. Here is the Python script I use to fetch posts from my blog:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">import</span> logging
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> typing <span style="color:#ff79c6">import</span> Any
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> pathlib
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> feedparser
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> datetime <span style="color:#ff79c6">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DEFAULT_N <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">5</span>
</span></span><span style="display:flex;"><span>DEFAULT_DATE_FORMAT <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;%Y-%m-</span><span style="color:#f1fa8c">%d</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root <span style="color:#ff79c6">=</span> pathlib<span style="color:#ff79c6">.</span>Path(__file__)<span style="color:#ff79c6">.</span>parent<span style="color:#ff79c6">.</span>resolve()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">fetch_feed</span>(url: <span style="color:#8be9fd;font-style:italic">str</span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">list</span>[<span style="color:#8be9fd;font-style:italic">dict</span>[<span style="color:#8be9fd;font-style:italic">str</span>, <span style="color:#8be9fd;font-style:italic">str</span>]]:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        response <span style="color:#ff79c6">=</span> requests<span style="color:#ff79c6">.</span>get(url)
</span></span><span style="display:flex;"><span>        response<span style="color:#ff79c6">.</span>raise_for_status()
</span></span><span style="display:flex;"><span>        feed <span style="color:#ff79c6">=</span> feedparser<span style="color:#ff79c6">.</span>parse(response<span style="color:#ff79c6">.</span>content)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> feed<span style="color:#ff79c6">.</span>entries:
</span></span><span style="display:flex;"><span>            logging<span style="color:#ff79c6">.</span>error(<span style="color:#f1fa8c">&#34;Malformed feed: no entries found&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">return</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> requests<span style="color:#ff79c6">.</span>exceptions<span style="color:#ff79c6">.</span>RequestException <span style="color:#ff79c6">as</span> e:
</span></span><span style="display:flex;"><span>        logging<span style="color:#ff79c6">.</span>error(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;Error fetching the feed: </span><span style="color:#f1fa8c">{</span>e<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> Exception <span style="color:#ff79c6">as</span> e:
</span></span><span style="display:flex;"><span>        logging<span style="color:#ff79c6">.</span>error(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;Error processing the feed: </span><span style="color:#f1fa8c">{</span>e<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#34;title&#34;</span>: entry<span style="color:#ff79c6">.</span>title,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#34;url&#34;</span>: entry<span style="color:#ff79c6">.</span>link,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#34;date&#34;</span>: format_entry_date(entry),
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> entry <span style="color:#ff79c6">in</span> feed<span style="color:#ff79c6">.</span>entries[:DEFAULT_N]
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">format_feed_entry</span>(entry: <span style="color:#8be9fd;font-style:italic">dict</span>[<span style="color:#8be9fd;font-style:italic">str</span>, <span style="color:#8be9fd;font-style:italic">str</span>]) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">str</span>:
</span></span><span style="display:flex;"><span>    title <span style="color:#ff79c6">=</span> entry<span style="color:#ff79c6">.</span>get(<span style="color:#f1fa8c">&#34;title&#34;</span>, <span style="color:#f1fa8c">&#34;No Title&#34;</span>)
</span></span><span style="display:flex;"><span>    link <span style="color:#ff79c6">=</span> entry<span style="color:#ff79c6">.</span>get(<span style="color:#f1fa8c">&#34;url&#34;</span>, <span style="color:#f1fa8c">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    date <span style="color:#ff79c6">=</span> entry<span style="color:#ff79c6">.</span>get(<span style="color:#f1fa8c">&#34;date&#34;</span>, <span style="color:#f1fa8c">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;[</span><span style="color:#f1fa8c">{</span>title<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">](</span><span style="color:#f1fa8c">{</span>link<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">) - </span><span style="color:#f1fa8c">{</span>date<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">format_entry_date</span>(entry: Any, date_format: <span style="color:#8be9fd;font-style:italic">str</span> <span style="color:#ff79c6">=</span> DEFAULT_DATE_FORMAT) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">str</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">hasattr</span>(entry, <span style="color:#f1fa8c">&#34;published_parsed&#34;</span>):
</span></span><span style="display:flex;"><span>        published_time <span style="color:#ff79c6">=</span> datetime(<span style="color:#ff79c6">*</span>entry<span style="color:#ff79c6">.</span>published_parsed[:<span style="color:#bd93f9">6</span>])
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> published_time<span style="color:#ff79c6">.</span>strftime(date_format)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#f1fa8c">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">replace_chunk</span>(content, marker, chunk, inline<span style="color:#ff79c6">=</span><span style="color:#ff79c6">False</span>):
</span></span><span style="display:flex;"><span>    pattern <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;&lt;!-- </span><span style="color:#f1fa8c">{</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> start --&gt;.*&lt;!-- </span><span style="color:#f1fa8c">{</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> end --&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    r <span style="color:#ff79c6">=</span> re<span style="color:#ff79c6">.</span>compile(pattern, re<span style="color:#ff79c6">.</span>DOTALL)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> inline:
</span></span><span style="display:flex;"><span>        chunk <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">{</span>chunk<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> r<span style="color:#ff79c6">.</span>sub(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#34;&lt;!-- </span><span style="color:#f1fa8c">{</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> start --&gt;</span><span style="color:#f1fa8c">{</span>chunk<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&lt;!-- </span><span style="color:#f1fa8c">{</span>marker<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> end --&gt;&#34;</span>, content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> __name__ <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    readme <span style="color:#ff79c6">=</span> root <span style="color:#ff79c6">/</span> <span style="color:#f1fa8c">&#34;README.md&#34;</span>
</span></span><span style="display:flex;"><span>    url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;https://tduyng.github.io/atom.xml&#34;</span>
</span></span><span style="display:flex;"><span>    feeds <span style="color:#ff79c6">=</span> fetch_feed(url)
</span></span><span style="display:flex;"><span>    feeds_md <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">\n\n</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">.</span>join([format_feed_entry(feed) <span style="color:#ff79c6">for</span> feed <span style="color:#ff79c6">in</span> feeds])
</span></span><span style="display:flex;"><span>    readme_contents <span style="color:#ff79c6">=</span> readme<span style="color:#ff79c6">.</span>read_text()
</span></span><span style="display:flex;"><span>    rewritten <span style="color:#ff79c6">=</span> replace_chunk(readme_contents, <span style="color:#f1fa8c">&#34;blog&#34;</span>, feeds_md)
</span></span><span style="display:flex;"><span>    readme<span style="color:#ff79c6">.</span>write_text(rewritten)
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">print</span>(feeds_md)
</span></span></code></pre><p>The script fetches data from the <code>atom.xml</code> feed on my blog and retrieves the five latest posts.</p>
<p>Here is an example of the result of the python script:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>[<span style="color:#ff79c6">How I made my GitHub profile README dynamic</span>](<span style="color:#50fa7b">https://tduyng.github.io/blog/dynamic-github-profile-readme/</span>) - 2024-05-13
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#ff79c6">New home for my website</span>](<span style="color:#50fa7b">https://tduyng.github.io/blog/new-home-for-my-website/</span>) - 2024-05-11
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#ff79c6">Start a new journey</span>](<span style="color:#50fa7b">https://tduyng.github.io/blog/start-a-new-journey/</span>) - 2021-05-01
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#ff79c6">Why use Docker compose</span>](<span style="color:#50fa7b">https://tduyng.github.io/blog/why-use-dockercompose/</span>) - 2021-01-25
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#ff79c6">Create simple web app Nodejs with Docker</span>](<span style="color:#50fa7b">https://tduyng.github.io/blog/create-simple-project-nodejs-with-docker/</span>) - 2020-12-22
</span></span></code></pre><p>Then the result will be inserted between the following sections in my README:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4">&lt;!-- blog start --&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">&lt;!-- blog end --&gt;</span>
</span></span></code></pre><p>To ensure the script functions properly, we should include that comment in our README.md file (before running the script).</p>
<p>You can find the complete source code for <a href="https://github.com/tduyng/tduyng/blob/master/feed.py">this script</a> in my profile repository.</p>
<p>Integrating it with GitHub Actions is quite simple:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">name</span>: Fetch latest posts from blog for README
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">on</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">schedule</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ff79c6">cron</span>: <span style="color:#f1fa8c">&#39;0 0 * * *&#39;</span> <span style="color:#6272a4"># 00:00 AM every day</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">jobs</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">build</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">runs-on</span>: ubuntu-latest
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">steps</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: actions/checkout@v4
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: actions/setup-python@v5
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">python-version</span>: <span style="color:#f1fa8c">&#39;3.12&#39;</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">uses</span>: actions/cache@v4
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">name</span>: Configure pip caching
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">path</span>: ~/.cache/pip
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">key</span>: ${{ runner.os }}-pip-${{ hashFiles(&#39;**/requirements.txt&#39;) }}
</span></span><span style="display:flex;"><span>                  <span style="color:#ff79c6">restore-keys</span>: |<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      </span>                      ${{ runner.os }}-pip-
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">name</span>: Install Python dependencies
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">run</span>: |<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  </span>                  python -m pip install -r requirements.txt
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">name</span>: Update README
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">run</span>: |-<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  </span>                  python feed.py
</span></span><span style="display:flex;"><span>            - <span style="color:#ff79c6">name</span>: Commit and push if changed
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">run</span>: |-<span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git diff
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git config --global user.email &#34;${{ vars.USER_EMAIL }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git config --global user.name &#34;${{ vars.USER_NAME }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git add -A
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git commit -m &#34;chore: update blog posts&#34; || exit 0
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                  git push</span>                  
</span></span></code></pre><p>To ensure your information remains secure, you can set <code>USER_EMAIL</code> and <code>USER_NAME</code> in the repository environment. After checking the differences for the latest posts, if there are any, GitHub Actions will then create a new commit and update your GitHub account's main/master branch.</p>
<p>And that's it! With the script and GitHub actions, all the information will update automatically.</p>
<p>Here's how my profile looks now:
<img src="img/tduyng.webp" alt="Simonw profile" loading="lazy"></p>
<p>Thank you for reading this far. I hope this method proves helpful to you. Feel free to read the comments or provide feedback on <a href="https://tduyng.medium.com/how-i-made-my-github-profile-readme-dynamic-933967d268ea">my medium post</a>.</p>
<p>Happy coding!</p>
]]></content>
    <link href="/blog/dynamic-github-profile-readme/"></link>
    <category>github-action</category>
    <category>profile</category>
    <category>readme</category>
    <category>dynamic</category>
    <category>python</category>
  </entry>
  <entry>
    <title>New home for my website</title>
    <id>/blog/new-home-for-my-website/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2024-05-11T00:00:00Z</published>
    <summary>Discover why I switched my website and blog from Jekyll to Zola.</summary>
    <content type="html"><![CDATA[<p>Hey there, it's been quite a while since my last article—almost 3 years. I'm not sure if anyone is still reading my posts because I've stopped using analytics for my website. Now, I've moved it to GitHub and use the free domain of GitHub Pages. It might not be great for SEO, but I'm happy with it. After all, the main reason I write is for myself. Each time I write, I learn something new and improve my skills on various topics.</p>
<p>So, I've decided to get back into the habit of writing regularly. It's a good practice for developers to improve day by day.</p>
<p>But first things first: I need to update my website. In the past, I usually used Jekyll to create my site. It runs on Ruby and used to fit my needs perfectly because it's free, powerful, and offers many themes for customization.</p>
<p>For my main website where I display my work, projects, and some information about me, I used Jekyll but did a lot of customization using SCSS. And for the blog, I used a customized theme named &quot;Ghost.&quot; It looks really nice, so I'm quite happy with it.</p>
<p>However, these days, some of the tools I use are outdated. If I want to update them, it means updating Jekyll, Ruby, and tweaking gemfile configurations because there have been some major changes.</p>
<p>Here's how my two websites looked before the migration:</p>
<p>The main site:
<img src="img/old_home.webp" alt="old home" loading="lazy">
<img src="img/old_home2.webp" alt="old home" loading="lazy"></p>
<p>my blog:
<img src="img/old_blog.webp" alt="old blog" loading="lazy" width="670"></p>
<p>Nowadays, I mostly work with <a href="https://nodejs.org/en">Node.js</a>, <a href="https://deno.com/">Deno</a> and <a href="https://www.rust-lang.org/">Rust</a>, and I don't want to clutter my laptop with unnecessary tools.</p>
<p>Another reason is that I have two separate sites for my main site and my blog, which makes maintenance a bit complicated. So, I've decided to combine them into one site.</p>
<p>I've decided to try something new, keeping the website simple and aligning it with the technologies I use nowadays. I love markdown, so I'll only look for solutions involving static site generators.</p>
<p>Initially, I thought about using Deno. I did some research and found <a href="https://lume.land/">Lume</a>.</p>
<p>It looks good. It uses Deno as its runtime, it's fast, and supports many template engines. But the problem is, there aren't many custom themes right now and no one of them fit for both my main website and blog. That means if I use a theme, I'd have to do a lot of work on HTML and CSS templates, which I don't want to spend time on for this moment.</p>
<p>So, I thought, why not go directly with Rust? Deno is a JavaScript runtime written in Rust, but it's not quite the same as using Rust tools directly. So, I did some more research and found some options, but I chose <a href="https://github.com/getzola/zola">Zola</a> because it's more popular, super fast, easy to use, and has a very active development community on GitHub. Plus, it has a rich ecosystem of themes but of course it's still relatively small compared to Jekyll, Hugo, Pelican, or Eleventy.</p>
<p>I found an interesting theme called <a href="https://www.getzola.org/themes/tabi/">Tabi</a> that fits exactly what I want:</p>
<ul>
<li>Fast, pretty, easy to configure</li>
<li>Good user interface and experience</li>
<li>Supports internationalization (i18n)</li>
<li>Supports dark mode and light mode</li>
<li>Easy to write blog posts and showcase projects</li>
<li>Easy integration with comment systems</li>
<li>Good syntax highlighting</li>
<li>Simple pagination customization</li>
<li>Good SEO, search and analytics support</li>
<li>Support image preview for social sharing posts</li>
</ul>
<p>You can find more details in the <a href="https://github.com/welpo/tabi">Tabi documentation</a>.</p>
<p>And the best part about static site generators is that they use markdown, so I won't lose much time migrating the technology.</p>
<p>Take a look at these tools! If you like them, give them a star. The folks behind them did a great job.</p>
<p>By the way, you're already on my new website. Welcome!</p>
<p>I'm really happy with it. It's super fast when build locally.</p>
<p>Here is my blog now:
<img src="img/new_blog.webp" alt="old home" loading="lazy"></p>
]]></content>
    <link href="/blog/new-home-for-my-website/"></link>
    <category>blog</category>
    <category>static-site-generator</category>
  </entry>
  <entry>
    <title>Start a new journey</title>
    <id>/blog/start-a-new-journey/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2021-05-01T00:00:00Z</published>
    <summary>I share my journey from being a BIM engineer to becoming a full-time backend developer</summary>
    <content type="html"><![CDATA[<p>Hey everyone! I'm excited to share my journey from being a BIM engineer to becoming a full-time developer.</p>
<p>In modern construction, digital technologies are being used more and more. A big development is Building Information Modeling (BIM), which involves putting a lot of information about things like materials, planning, costs and more into 3D models.</p>
<p>As a BIM engineer, my main job was to make sure this process worked well, fast, and effectively for different construction teams, like architects, engineers, and planners. My aim was to keep high-quality models that each team could use again, reducing the need to do things over. We mainly used a software named Revit for this.</p>
<p>To do high-quality work, I used my skills in programming to make processes automatic. So, I spent time writing scripts and plugins in languages like VBA, C#, and Python to make things easier for my company.</p>
<p>Balancing two different roles at the same time was complicated. Since learning programming is a big challenge, it made me rethink what I wanted to do.</p>
<p>I considered my future goals and what I truly enjoyed. While advancing to a BIM manager role within the next 1 or 2 years seemed like a natural progression, I realized my passion lay elsewhere. Even though I was good at BIM, I found myself liking programming more. I liked solving problems, finding information easily, and helping with open-source projects. So, I started thinking about becoming a full-time developer. It was a big decision because it meant going down a different path after studying for 7 years.</p>
<p>At first, I looked for developer jobs in construction since I knew a lot about it. But there weren't many opportunities. Companies wanted construction experts, not much developers. So, I decided to step out of my comfort zone and explore new areas like making games, software, websites, and working with data, AI, and ML. That seemed interesting to me.</p>
<p>Because I worked a lot at developing the scripting and plugins, I decided to focus on backend development. I liked working with algorithms more than designing how things look.</p>
<p>To improve my coding skills, I dedicated many evenings and weekends to diving into the world of computers, databases, and designing APIs. I experimented with various programming languages like Ruby, Python, JavaScript, and TypeScript. Eventually, I found Node.js and TypeScript to be my favorites because they have great communities and can do a lot of different things.</p>
<p>Even though the COVID-19 pandemic made things difficult, I kept working on open-source projects and my side projects. But trying to do both jobs at once was hard.So, I made a big decision: I took a break from my BIM job for a year without getting paid. In France, you can do that. It gave me time to focus on coding completely.</p>
<p>During my break, I got a job offer to work as a backend developer at <a href="https://www.ekino.fr/">Ekino</a>. I'll be using Node.js and TypeScript, which I'm really excited about. I'll be working on projects like the backend of CANAL+, one of France's biggest film platforms.</p>
<p>This feels like the start of a new journey for me. I'm excited to start working ful-time as a developer and see where it takes me. I'm looking forward to learning new things and working with a great team at <a href="https://www.ekino.fr/">Ekino</a>. This is just the beginning, and I can't wait to see what's next.</p>
]]></content>
    <link href="/blog/start-a-new-journey/"></link>
    <category>career</category>
    <category>journey</category>
  </entry>
  <entry>
    <title>Build your personal website without spending any money</title>
    <id>/blog/build-free-your-personal-website-using-jekyll/</id>
    <updated>0001-01-01T00:00:00Z</updated>
    <published>2020-05-25T00:00:00Z</published>
    <summary>Learn how to build your own personal website using Jekyll and GitHub Pages without spending a dime. Dive into the step-by-step process and get your website up and running in no time.</summary>
    <content type="html"><![CDATA[<p>In this article, we'll walk through how to set up a Jekyll-powered blog using the Minimal Mistakes theme.</p>
<p>It’s not always clear why we need a personal website, but here’s the truth, especially for developers: a website is an effective medium to let the world know who we are, what we are capable of, and what our values are.</p>
<p>The purpose of the website you want to build can vary; it could be a blog, portfolio, landing page, or multi-purpose site. In my case, I need a website to:</p>
<ul>
<li>Showcase my projects</li>
<li>Blog about my experiences, my knowledge in programming, and my other interests</li>
<li>Share information about me that would be of interest to a recruiter, including my resume, email, and links to my GitHub, Medium, and LinkedIn pages</li>
<li>Being able to easily generate and publish blog posts is another extremely beneficial feature, though not required.</li>
</ul>
<p>Initially, I tried to create my website using HTML, CSS, and serving it with GitHub Pages. However, I realized it would take a lot of time to complete, not to mention the time needed to customize the website for each post.</p>
<p>I searched for a solution on the internet and found the awesome technology called &quot;Static Site Generator.&quot;</p>
<h2 id="static-site-generator">STATIC SITE GENERATOR</h2>
<p>You may have already heard about static site generators. They aren't new; they were what we used to build the web before dynamic CMSs (WordPress, Drupal, etc.) took over.</p>
<p>What's new is that modern tools—like static site generators—have emerged over the last few years and expanded the capabilities of static sites.</p>
<p>A static site generator is an application that takes a template directory containing raw text files in various formats, processes them through a converter (like Markdown) and its Liquid renderer, and outputs a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>
<p>With the growth of the <a href="https://jamstack.org/">JAMstack</a> and its community, Static Site Generators are becoming more and more popular.</p>
<p>So, why use a static generator?</p>
<ul>
<li>Speed</li>
<li>Security</li>
<li>Development workflow: no need to create the backend server. This makes it incredibly easy to run your site locally, automate builds, switch to a different host, etc.</li>
<li>There are a lot of themes available, fast build, easy maintenance. That's true. You can even build a beautiful website within minutes.</li>
</ul>
<p>There are many static site generators available; you can check them out on <a href="https://www.staticgen.com/">staticgen.com</a></p>
<div align="center">
  <img src="img/static-site-generator.webp" alt="STG" loading="lazy">
</div>
In this article, I will present one of them: Jekyll.
<h3 id="jekyll">Jekyll</h3>
<p>Jekyll is an extremely popular static site generator. It is an open-source program in Ruby created by GitHub co-founder Tom Preston-Werner. Jekyll enables developers to transform plain text into static websites and blogs. It serves as the engine behind GitHub Pages, allowing you to host sites directly from your GitHub repositories.</p>
<p>Jekyll is built with the Ruby programming language. I'm currently learning web development with Ruby &amp; Ruby on Rails at The Hacking Project. So, if you come from a Ruby/ROR background like me, you'll want to explore Jekyll.</p>
<p>Now, let's see how I created my personal blog. And don't forget that it will be totally free.</p>
<h2 id="installation--build">INSTALLATION &amp; BUILD</h2>
<p>There are multiple ways to get started with Jekyll, each with its own variations. Here are a few options:</p>
<p>Install Jekyll locally via the command line, create a new boilerplate website using jekyll new, build it locally with jekyll build, then serve it.</p>
<p>Make sure you have installed Jekyll on your machine with gem install bundler jekyll. For the full installation guide, you can check out the official guide on <a href="https://jekyllrb.com/">jekyllrb.com</a>.</p>
<p>Take a Jekyll theme and clone it to your local machine, install Jekyll locally via the command line, make updates to your website, build it locally, and then serve it. (You can also fork a starting point and make changes to it.)</p>
<p>We'll start with the easiest option: using an available Jekyll theme. This will get us up and running in just a few minutes.</p>
<p>So, let's choose a theme together.</p>
<p>Nowadays, there are many Jekyll themes, both free and paid. Developers design these templates perfectly for any corporate business and blogging website.</p>
<p>You can explore some excellent paid Jekyll themes <a href="https://themeforest.net/category/static-site-generators">here</a>.</p>
<p>But as the title suggests, we will build our website without paying anything, choosing only free themes.</p>
<p>You can find almost all the free Jekyll themes on <a href="https://jekyllthemes.io/free">Free Jekyll Themes</a> and choose the one you prefer.</p>
<h3 id="21-minimal-mistakes-jekyll-theme">2.1 Minimal Mistakes Jekyll Theme</h3>
<p>I will introduce you to a really good theme for building a blog: the &quot;Minimal Mistakes&quot; theme, created by <a href="https://github.com/mmistakes">Michael Rose</a>. Thank you so much, <a href="https://mademistakes.com/">Michael</a>, for providing an awesome Jekyll theme for the community.</p>
<p>Its advantages:</p>
<ul>
<li>Free theme</li>
<li>Highly recommended by the community: 7k stars and 12k forks on GitHub (Source GitHub mmistakes)</li>
<li>Full features for a blog</li>
<li>Responsive design for mobile, tablet, and desktop</li>
<li>Compatible with GitHub Pages</li>
<li>Support for Jekyll's built-in Sass/SCSS preprocessor</li>
<li>Nine different skins (color variations)</li>
<li>Several responsive layout options (single, archive index, search, splash, and paginated home page)</li>
<li>Commenting support (powered by Disqus, Facebook, Google+, Discourse, static-based via Staticman, and utterances)</li>
<li>Google Analytics support</li>
</ul>
<p>We already have a starting point; now, all we need to do is install this theme on your machine.</p>
<h3 id="22-clone-minimal-mistakes-theme-to-your-machine">2.2 Clone Minimal Mistakes theme to your machine</h3>
<p>As we will use GitHub Pages to serve our blog, before we clone it to the local machine, I will explain how to create a new repository on GitHub.</p>
<p>You probably won't need to do it the same way, as there are many different ways to do it. This is just a simpler way for me.</p>
<h3 id="23-initialize-repository-on-the-local-machine">2.3 Initialize repository on the local machine</h3>
<ul>
<li>Create a repository on GitHub</li>
</ul>
<p>Instead of using git init via the command line, I create it directly on GitHub.
<img src="img/create-repo-github.webp" alt="create new repo">{:class=&quot;lazyload&quot;}</p>
<p>This way, we can easily define the visibility of the repository: public or private, and we can initialize it with the template of .gitignore and LICENSE.
I named this repo <a href="https://github.com/tduyng/demo-jekyll-mmistakes">demo-jekyll-mmtakes</a>.</p>
<p>If you want this website to be the origin GitHub pages, meaning the domain name of your website is github-user-name.github.io, you will need to create a repository with this name: &quot;github-user-name.github.io&quot;.</p>
<p>For example, my GitHub pages: tduyng.github.io, so I need to create a repository named: &quot;tduyng.github.io&quot;.</p>
<p>You can check how to create GitHub Pages in the official GitHub documentation: <a href="https://guides.github.com/features/pages/">https://guides.github.com/features/pages/</a></p>
<ul>
<li>
<p>After we clone the repository that we just created with git clone on the local machine.</p>
</li>
<li>
<p>Now, we will clone mmistakes repository.</p>
</li>
</ul>
<div align="center">
  <img src="img/mmistakes-repo.webp" alt="" loading="lazy">
</div>
<ul>
<li>
<p>Enter the mmistakes directory, remove .git, LICENSE, and README files</p>
</li>
<li>
<p>Then, we move all files from the mmistakes directory to our local repository: demo-jekyll-mmistakes</p>
</li>
<li>
<p>Don't hesitate to make a git commit when you finish that step with a message &quot;Init mmistake theme,&quot; for example.</p>
</li>
</ul>
<h3 id="24-setup-development-environment">2.4 Setup development environment</h3>
<p>First, let’s make sure your development environment is ready.</p>
<p>Ensure you have installed <a href="https://www.ruby-lang.org/en/">Ruby</a> and <a href="https://rubygems.org/">RubyGems</a>, and <a href="https://jekyllrb.com/">Jekyll</a> on your computer.</p>
<p>You’ll be using your own text editor and terminal app.</p>
<p>Once your development environment is set up, you can try running the server to view your page as it is.</p>
<p>Use bundle install to install all gem dependencies, and jekyll serve or bundle exec jekyll serve to run the server. The page will be running on localhost:4000</p>
<p>The result in your browser:</p>
<div align="center">
  <img src="img/first-page.webp" alt="first page" loading="lazy">
</div>
We have nothing to show on the page now because we need to customize the Minimal Mistakes theme and create a new post.
<h3 id="25-customize-minimal-mistakes-theme">2.5 Customize Minimal Mistakes Theme</h3>
<h4 id="251-configurations">2.5.1 Configurations</h4>
<p>Before customizing, let's take a look at the folder structure of our project:</p>
<div align="center">
  <img src="img/tree-folder.webp" alt="tree folder" loading="lazy">
</div>
To customize your website, you'll need to modify the _config.yml file to set up the initial settings.
<p>In the config.yml, Michael has detailed the significance of each tag. For example, here's how I modified the config.yml file for my blog:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">author</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">name</span>: <span style="color:#ff79c6">*name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">bio</span>: <span style="color:#f1fa8c">&#39;Love people who code&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">location</span>: <span style="color:#f1fa8c">&#39;Paris, France&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">email</span>: <span style="color:#f1fa8c">&#39;z@tduyng.github.io&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">links</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;Website&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#f1fa8c">&#39;https://tduyng.github.io&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;Twitter&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">&amp;twitterUrl</span> <span style="color:#f1fa8c">&#39;https://twitter.com/tienduy_nguyen&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;LinkedIn&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">&amp;linkedinUrl</span> <span style="color:#f1fa8c">&#39;https://linkedin.com/in/tduyng&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;GitHub&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">&amp;githubUrl</span> <span style="color:#f1fa8c">&#39;https://github.com/tduyng&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">footer</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">links</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;Twitter&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">*twitterUrl</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;LinkedIn&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">*linkedinUrl</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">label</span>: <span style="color:#f1fa8c">&#39;GitHub&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#ff79c6">*githubUrl</span>
</span></span></code></pre><p>Here, you can provide your social information, such as your name, bio, location, and email. Additionally, you can include links to your website, Twitter, LinkedIn, and GitHub profiles.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#ff79c6">plugins</span>:
</span></span><span style="display:flex;"><span>    - jekyll-paginate
</span></span><span style="display:flex;"><span>    - jekyll-sitemap
</span></span><span style="display:flex;"><span>    - jekyll-gist
</span></span><span style="display:flex;"><span>    - jekyll-feed
</span></span><span style="display:flex;"><span>    - jekyll-include-cache
</span></span><span style="display:flex;"><span>    - jemoji
</span></span></code></pre><p>Lastly, you can specify the gem plugins you want to use. For example, I've added the jemoji plugin, which allows us to use emoji markdown on our page.</p>
<p>These are just some of the configurations you can customize in the _config.yml file. Once you've made your changes, save the file and move on to the next step.</p>
<h4 id="252-gemfile">2.5.2 Gemfile</h4>
<p>Your Gemfile is currently empty, so you need to add some Jekyll plugins that you've declared in your <code>_config.yml</code> file.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>source <span style="color:#f1fa8c">&#34;https://rubygems.org&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ruby <span style="color:#f1fa8c">&#34;2.7.1&#34;</span>
</span></span><span style="display:flex;"><span>gem <span style="color:#f1fa8c">&#34;jekyll&#34;</span>, <span style="color:#f1fa8c">&#34;~&gt; 3.8.5&#34;</span>
</span></span><span style="display:flex;"><span>gem <span style="color:#f1fa8c">&#34;minimal-mistakes-jekyll&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>group <span style="color:#f1fa8c">:jekyll_plugins</span> <span style="color:#ff79c6">do</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-remote-theme&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-paginate&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-sitemap&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-gist&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-feed&#34;</span>, <span style="color:#f1fa8c">&#34;~&gt; 0.6&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jemoji&#34;</span>
</span></span><span style="display:flex;"><span>  gem <span style="color:#f1fa8c">&#34;jekyll-include-cache&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span></code></pre><p>After modifying your Gemfile, return to the terminal.</p>
<h4 id="253-run-server">2.5.3 Run Server</h4>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bundle install <span style="color:#6272a4"># Install all gems in Gemfile</span>
</span></span><span style="display:flex;"><span>bundle update <span style="color:#6272a4"># Update multiple gems</span>
</span></span></code></pre><p>To run the server, type:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bundle <span style="color:#8be9fd;font-style:italic">exec</span> jekyll serve
</span></span></code></pre><p>Open your browser at localhost:4000 to view the result.</p>
<div align="center">
  <img src="img/second-page.webp" alt="second page" loading="lazy">
</div>
<p>Looks better, right?</p>
<p>You're almost finished with the customization. Next, we'll create the first posts and customize our navbar.</p>
<h4 id="254-create-posts">2.5.4 Create Posts</h4>
<p>All posts should be placed in the _posts folder. If you don't have one, simply create it.</p>
<p>When you clone the Minimal Mistakes repository from GitHub, you'll find two folders named docs and test. These folders contain documentation and examples for different types of posts, which can be very helpful.</p>
<p>For a quick demo, copy all the posts from the test/_posts folder to your _posts folder. You can use both Markdown and HTML files for your posts. Personally, I prefer Markdown because it's faster to write and customize.</p>
<p>If you're new to Markdown, you can learn from tutorials like markdownguide.org.</p>
<p>Each post should include:</p>
<ul>
<li>Title</li>
<li>Categories</li>
<li>Tags</li>
</ul>
<p>Here's an example of the first part of a post in Markdown:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#39;Markup: HTML Tags and Formatting&#39;
</span></span><span style="display:flex;"><span>header:
</span></span><span style="display:flex;"><span>    teaser: &#39;assets/images/markup-syntax-highlighting-teaser.webp&#39;
</span></span><span style="display:flex;"><span>categories:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> Markup
</span></span><span style="display:flex;"><span>tags:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> content
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> css
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> formatting
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> html
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">-</span> markup
</span></span><span style="display:flex;"><span>---
</span></span></code></pre><p>And here's an example of the content of the post:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>A variety of common markup showing how the theme styles them.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">## Header Two
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">### Header Three
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">#### Header Four
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">##### Header Five
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">###### Header Six
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">## Blockquotes
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span>Single line blockquote:
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">
</span></span></span><span style="display:flex;"><span><span style="color:#ff79c6">&gt; </span><span style="text-decoration:underline">Stay hungry. Stay foolish.
</span></span></span><span style="display:flex;"><span><span style="text-decoration:underline"></span>
</span></span><span style="display:flex;"><span>Multi-line blockquote with a cite reference:
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">
</span></span></span><span style="display:flex;"><span><span style="color:#ff79c6">&gt; </span><span style="text-decoration:underline">People think focus means saying yes to the thing you&#39;ve got to focus on. But that&#39;s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I&#39;m actually as proud of the things we haven&#39;t done as the things I have done. Innovation is saying no to 1,000 things.
</span></span></span><span style="display:flex;"><span><span style="text-decoration:underline"></span><span style="color:#ff79c6">&gt; </span><span style="text-decoration:underline">&lt;cite&gt;Steve Jobs&lt;/cite&gt; --- Apple Worldwide Developers&#39; Conference, 1997
</span></span></span><span style="display:flex;"><span><span style="text-decoration:underline"></span><span style="color:#ff79c6">&gt; </span><span style="text-decoration:underline">{: .small}
</span></span></span><span style="display:flex;"><span><span style="text-decoration:underline"></span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">## Tables
</span></span></span><span style="display:flex;"><span><span style="font-weight:bold"></span>
</span></span><span style="display:flex;"><span>| Header1 | Header2 | Header3 |
</span></span><span style="display:flex;"><span>| :------ | :-----: | ------: |
</span></span><span style="display:flex;"><span>| cell1   |  cell2  |   cell3 |
</span></span><span style="display:flex;"><span>| cell4   |  cell5  |   cell6 |
</span></span><span style="display:flex;"><span>| ------- |
</span></span><span style="display:flex;"><span>| cell1   |  cell2  |   cell3 |
</span></span><span style="display:flex;"><span>| cell4   |  cell5  |   cell6 |
</span></span><span style="display:flex;"><span>| ======= |
</span></span><span style="display:flex;"><span>| Foot1   |  Foot2  |   Foot3 |
</span></span></code></pre><p>For more features, refer to the documentation of this theme.</p>
<p>Once you've added the posts, you can see the result in your browser. The Minimal Mistakes theme offers many excellent features for a modern blog, as demonstrated in the screenshots.</p>
<p>Next, we'll focus on navigation.</p>
<h4 id="255-navigation">2.5.5 Navigation</h4>
<p>Customizing the navigation is straightforward as Michael has already set it up for us. We just need to make some adjustments.</p>
<p>Navigate to the _data folder in the directory tree, and you'll find navigation.yml. Customize it as follows:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span><span style="color:#6272a4"># main links</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">main</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">title</span>: <span style="color:#f1fa8c">&#39;About&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: https://mmistakes.github.io/minimal-mistakes/about/
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">title</span>: <span style="color:#f1fa8c">&#39;Posts&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: /posts/
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">title</span>: <span style="color:#f1fa8c">&#39;Categories&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#f1fa8c">&#39;/categories&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">title</span>: <span style="color:#f1fa8c">&#39;Tags&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#f1fa8c">&#39;/tags&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ff79c6">title</span>: <span style="color:#f1fa8c">&#39;Search&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">url</span>: <span style="color:#f1fa8c">&#39;/search&#39;</span>
</span></span></code></pre><p>The resulting navigation will appear as follows:</p>
<div align="center">
  Posts page
  <img src="img/posts-nav.webp" alt="third page" loading="lazy">
Categories page
<img src="img/categories-nav.webp" alt="post detail" loading="lazy">
<p>Tag pages
<img src="img/tags-nav.webp" alt="post detail" loading="lazy"></p>
</div>
If you're curious about Jekyll, you can learn more at [Jekyll quickstart](https://jekyllrb.com/docs/).
<h4 id="256-build">2.5.6 Build</h4>
<p>After finishing an article, you'll need to build the files with:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;"><code><span style="display:flex;"><span>bundle <span style="color:#8be9fd;font-style:italic">exec</span> jekyll build
</span></span></code></pre><p>This command will automatically generate HTML and CSS files in the site folder.</p>
<h3 id="26-deploy-on-github-pages">2.6 Deploy on GitHub Pages</h3>
<p>Push and commit all the changes to your GitHub repository.</p>
<p>If you haven't set up GitHub Pages for this repository yet, you'll need to do so.</p>
<p>Navigate to the Settings of your repository on GitHub, and activate GitHub Pages.</p>
<p>For more detailed instructions, refer to the <a href="https://guides.github.com/features/pages/">GitHub Pages guide</a>.</p>
<p>Once you've completed these steps, your beautiful website will be live at your-github-user-name.github.io.</p>
<h2 id="extra-topics">Extra topics</h2>
<ul>
<li>Using your own domain name. It's not expensive.</li>
<li><a href="https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a></li>
<li>Other static site generator: Gastbyjs, nextjs, nuxtjs, hugo ...</li>
</ul>
<h2 id="reference">Reference</h2>
<ul>
<li>Demo online <a href="https://adev42.com/demo-jekyll-mmistakes/">https://tduyng.github.io/demo-jekyll-mmistakes/</a></li>
<li>My repo demo Github <a href="https://github.com/tduyng/demo-jekyll-mmistakes">demo-jekyll-mmistakes</a></li>
<li>Jekyll home page of Jekyll <a href="https://jekyllrb.com/">https://jekyllrb.com/</a></li>
<li>Documentation of minimal mistake theme <a href="https://mmistakes.github.io/minimal-mistakes/">https://mmistakes.github.io/minimal-mistakes/</a></li>
<li>Interesting blog about jekyll <a href="https://blog.webjeda.com/">https://blog.webjeda.com/</a></li>
<li>Using github pages <a href="https://pages.github.com/">https://pages.github.com/</a></li>
</ul>
]]></content>
    <link href="/blog/build-free-your-personal-website-using-jekyll/"></link>
    <category>blog</category>
    <category>static-site-generator</category>
    <category>free</category>
    <category>web-development</category>
  </entry>
</feed>
